; .\usb118a.SRC generated from: usb118a.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE usb118a.c COMPACT BROWSE DEBUG OBJECTEXTEND SRC(.\usb118a.SRC)

$NOMOD51

NAME	USB118A

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
T2	BIT	090H.0
IE	DATA	0A8H
P0_0	BIT	080H.0
P1_0	BIT	090H.0
P0_1	BIT	080H.1
FL	BIT	0D0H.1
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
P3_5	BIT	0B0H.5
ES	BIT	0A8H.4
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
IP	DATA	0B8H
P3_7	BIT	0B0H.7
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?_int_data?USB118A                    SEGMENT CODE 
?PR?_intia?USB118A   SEGMENT CODE 
?PR?_delay?USB118A   SEGMENT CODE 
?PR?_Del?USB118A     SEGMENT CODE 
?PR?_Init_COMM?USB118A                   SEGMENT CODE 
?PR?serial_syn?USB118A                   SEGMENT CODE 
?PR?_Send_Data?USB118A                   SEGMENT CODE 
?PR?_serial_send?USB118A                 SEGMENT CODE 
?PD?_serial_send?USB118A                 SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?Receive_Data?USB118A                 SEGMENT CODE 
?PR?_Receive_One?USB118A                 SEGMENT CODE 
?PD?_Receive_One?USB118A                 SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?USB118_Detect?USB118A                SEGMENT CODE 
?PR?_USB118_Crefiledir?USB118A           SEGMENT CODE 
?PD?_USB118_Crefiledir?USB118A           SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_USB118_Open?USB118A                 SEGMENT CODE 
?PD?_USB118_Open?USB118A                 SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_USB118_Write?USB118A                SEGMENT CODE 
?PD?_USB118_Write?USB118A                SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?main?USB118A     SEGMENT CODE 
?PR?serial?USB118A   SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?PD?USB118A          SEGMENT XDATA INPAGE 
	EXTRN	CODE (?C?ICASE)
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	CODE (?C?CSTPTR)
	EXTRN	CODE (?C?CSTOPTR)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	dat1
	PUBLIC	Command_status
	PUBLIC	commd
	PUBLIC	serial
	PUBLIC	main
	PUBLIC	_USB118_Write
	PUBLIC	?_USB118_Open?BYTE
	PUBLIC	_USB118_Open
	PUBLIC	?_USB118_Crefiledir?BYTE
	PUBLIC	_USB118_Crefiledir
	PUBLIC	USB118_Detect
	PUBLIC	?_Receive_One?BYTE
	PUBLIC	_Receive_One
	PUBLIC	Receive_Data
	PUBLIC	?_serial_send?BYTE
	PUBLIC	_serial_send
	PUBLIC	_Send_Data
	PUBLIC	serial_syn
	PUBLIC	_Init_COMM
	PUBLIC	_Del
	PUBLIC	_delay
	PUBLIC	_intia
	PUBLIC	_int_data

	RSEG  ?PD?_Receive_One?USB118A
?_Receive_One?BYTE:
	ORG  1
  r_command?960:   DS   3
	ORG  3
      r_dat?961:   DS   3
	ORG  6
          i?962:   DS   1
	ORG  7
      r_num?963:   DS   2

	RSEG  ?PD?_USB118_Crefiledir?USB118A
?_USB118_Crefiledir?BYTE:
	ORG  4
      tpye?1164:   DS   1
	ORG  5
       na1?1165:   DS   1
	ORG  3
       na2?1166:   DS   1
	ORG  3
       na3?1167:   DS   1
	ORG  4
       na4?1168:   DS   1
	ORG  5
       na5?1169:   DS   1
	ORG  6
       na6?1170:   DS   1
	ORG  7
       na7?1171:   DS   1
	ORG  8
       na8?1172:   DS   1
	ORG  9
       tp1?1173:   DS   1
	ORG  10
       tp2?1174:   DS   1
	ORG  11
       tp3?1175:   DS   1

	RSEG  ?PD?_USB118_Write?USB118A
?_USB118_Write?BYTE:
     wdata?1387:   DS   3

	RSEG  ?PD?_USB118_Open?USB118A
?_USB118_Open?BYTE:
	ORG  4
       na1?1276:   DS   1
	ORG  5
       na2?1277:   DS   1
	ORG  3
       na3?1278:   DS   1
	ORG  3
       na4?1279:   DS   1
	ORG  4
       na5?1280:   DS   1
	ORG  5
       na6?1281:   DS   1
	ORG  6
       na7?1282:   DS   1
	ORG  7
       na8?1283:   DS   1
	ORG  8
       tp1?1284:   DS   1
	ORG  9
       tp2?1285:   DS   1
	ORG  10
       tp3?1286:   DS   1

	RSEG  ?PD?_serial_send?USB118A
?_serial_send?BYTE:
	ORG  1
  s_command?755:   DS   3
	ORG  3
      s_dat?756:   DS   3
	ORG  6
      s_num?757:   DS   2

	RSEG  ?PD?USB118A
          commd:   DS   66
 Command_status:   DS   1
           dat1:   DS   6

	RSEG  ?C_INITSEG
	DB	0A0H
	DB	042H
	DB	LOW (commd)
	DB	001H
	DB	002H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H

	DB	086H
	DB	LOW (dat1)
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H

	DB	081H
	DB	LOW (Command_status)
	DB	000H

; #include <AT89X52.h>
; 
; #define uchar  unsigned  char
; #define uint   unsigned  int 
; 	
; uchar  commd[66]={0x01,0x02,0x43,0x44,0x45,0x46}; //send and receive command buffer
; uchar  dat1[6]={0x61,0x62,0x63,0x64,0x65,0x66}; //send  and receive databuffer
;  
; uchar Command_status=0;	  //receive status 
; 
; /*-------------
; 函数功能；send data 
; 入口参数：
; --------------*/
; void int_data(uchar da)

	RSEG  ?PR?_int_data?USB118A
_int_data:
	USING	0
			; SOURCE LINE # 15
;---- Variable 'da?040' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 16
;  uchar dat;
;  for(dat=0; dat<32; dat++)
			; SOURCE LINE # 18
;---- Variable 'dat?041' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0001:
;    {
			; SOURCE LINE # 19
;     dat1[dat]=da+dat;
			; SOURCE LINE # 20
	MOV  	A,R7
	ADD  	A,R6
	MOV  	R5,A
	MOV  	A,#LOW (dat1)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,R5
	MOVX 	@R0,A
;    }
			; SOURCE LINE # 21
	INC  	R6
	MOV  	A,R6
	CJNE 	A,#020H,?C0001
; }
			; SOURCE LINE # 22
?C0004:
	RET  	
; END OF _int_data

; /*-------------------------------------------
;             数组初始化函数
; 函数功能：初始化函数
; 入口参数：ia是要给commd[]数组初始化值
; 出口参数：
; -------------------------------------------*/
; void intia(uchar ia)

	RSEG  ?PR?_intia?USB118A
_intia:
	USING	0
			; SOURCE LINE # 29
;---- Variable 'ia?142' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 30
;   uchar t;
;   for(t=0; t<66; t++)
			; SOURCE LINE # 32
;---- Variable 't?143' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0005:
;    {
			; SOURCE LINE # 33
;     commd[t]=ia;
			; SOURCE LINE # 34
	MOV  	A,#LOW (commd)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,R7
	MOVX 	@R0,A
;    }
			; SOURCE LINE # 35
	INC  	R6
	MOV  	A,R6
	CJNE 	A,#042H,?C0005
; }
			; SOURCE LINE # 36
?C0008:
	RET  	
; END OF _intia

; 
; 
; /*--------------------------------------------------
;                延时函数  延时sec*01ms
; 函数功能：延时 function ,when frenquency 24M , 0.1ms
; 入口参数：c 是延时多少个0.1ms
; -----------------------------------------------------*/
; void delay(uint sec) 

	RSEG  ?PR?_delay?USB118A
_delay:
	USING	0
			; SOURCE LINE # 44
;---- Variable 'sec?244' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 45
;  uint i;
;  uchar j;
;  for(i=0; i<sec; i++)
			; SOURCE LINE # 48
;---- Variable 'i?245' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
?C0009:
	CLR  	C
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	A,R4
	SUBB 	A,R6
	JNC  	?C0015
;    for(j=0; j<100; j++)
			; SOURCE LINE # 49
;---- Variable 'j?246' assigned to Register 'R3' ----
	CLR  	A
	MOV  	R3,A
?C0012:
	INC  	R3
	MOV  	A,R3
	CJNE 	A,#064H,?C0012
?C0011:
	INC  	R5
	CJNE 	R5,#00H,?C0092
	INC  	R4
?C0092:
	SJMP 	?C0009
;   	;	 	   
; }
			; SOURCE LINE # 51
?C0015:
	RET  	
; END OF _delay

; 
;  /*------------------------------------------------------
;                延时函数  延时=sec*15.1ms
; 函数功能：延时 function ,when frenquency 24M , 15.1ms
; 入口参数：c 是延时多少个15.1ms
; --------------------------------------------------------*/
; void Del(int sec) 

	RSEG  ?PR?_Del?USB118A
_Del:
	USING	0
			; SOURCE LINE # 58
;---- Variable 'sec?347' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 59
;  uint i;
;  uchar j, b; 
;  for(i=0; i<sec; i++)
			; SOURCE LINE # 62
;---- Variable 'i?348' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
?C0016:
	CLR  	C
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	A,R4
	SUBB 	A,R6
	JNC  	?C0025
;    for(j=0; j<100; j++)
			; SOURCE LINE # 63
;---- Variable 'j?349' assigned to Register 'R3' ----
	CLR  	A
	MOV  	R3,A
?C0019:
;      for(b=0; b<99; b++)
			; SOURCE LINE # 64
;---- Variable 'b?350' assigned to Register 'R2' ----
	CLR  	A
	MOV  	R2,A
?C0022:
	INC  	R2
	MOV  	A,R2
	CJNE 	A,#063H,?C0022
?C0021:
	INC  	R3
	MOV  	A,R3
	CJNE 	A,#064H,?C0019
?C0018:
	INC  	R5
	CJNE 	R5,#00H,?C0093
	INC  	R4
?C0093:
	SJMP 	?C0016
; 	   ;	   
; }
			; SOURCE LINE # 66
?C0025:
	RET  	
; END OF _Del

; 
; /*----------------------------------------
; 函数功能：initialize serial function
; 
; -------------------------------------------
; void serial_int()
; {
;   EA=0;		 //总中断禁止
;   ES=0;		 //serial interrupt forbid
;   TMOD=0x20; //定时器T1使用工作方式2
;   TH1=0xF3;	//设置初值
;   TL1=0xF3;
;   TR1=1;
;   PCON=0x80;	//SMOD=1
;   SCON=0x50;	//工作方式1，9600bit/s 
;   TI=1;
;   REN=1;
; }
; */
; 
; /*---------------------------------------------------
;                 串行通讯口初始化函数 
; 函数功能：初始化uart   
; 入口参数：波特率（9600， 19200， 57600）
; ----------------------------------------------------*/ 
; void Init_COMM(uint sp)

	RSEG  ?PR?_Init_COMM?USB118A
_Init_COMM:
	USING	0
			; SOURCE LINE # 92
;---- Variable 'sp?451' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 93
; 	     SCON = 0x53;
			; SOURCE LINE # 94
	MOV  	SCON,#053H
; 	     PCON = 0x80 | PCON;
			; SOURCE LINE # 95
	ORL  	PCON,#080H
;          T2CON=0x30;
			; SOURCE LINE # 96
	MOV  	T2CON,#030H
; 	     switch(sp)
			; SOURCE LINE # 97
	MOV  	A,R7
	MOV  	B,R6
	LCALL	?C?ICASE
	DW   	?C0027
	DW   	02580H
	DW   	?C0028
	DW   	04B00H
	DW   	?C0029
	DW   	0E100H
	DW   	00H
	DW   	?C0026
; 	     {
			; SOURCE LINE # 98
; 	       case 9600:{// 9600 @ 24MHz: 24000000/(32*(65536-(RCAP2H,RCAP2L)))
			; SOURCE LINE # 99
?C0027:
;                         RCAP2H=0xFF;		
			; SOURCE LINE # 100
	MOV  	RCAP2H,#0FFH
; 	                    RCAP2L=0xB2;
			; SOURCE LINE # 101
	MOV  	RCAP2L,#0B2H
; 					  }break;
			; SOURCE LINE # 102
	SJMP 	?C0026
; 		   case 19200:{// 19200 @ 24MHz: 24000000/(32*(65536-(RCAP2H,RCAP2L)))
			; SOURCE LINE # 103
?C0028:
; 			            RCAP2H=0xFF;		
			; SOURCE LINE # 104
	MOV  	RCAP2H,#0FFH
; 	                    RCAP2L=0xD9;
			; SOURCE LINE # 105
	MOV  	RCAP2L,#0D9H
; 					  }break;
			; SOURCE LINE # 106
	SJMP 	?C0026
;            case 57600:{// 57600 @ 24MHz: 24000000/(32*(65536-(RCAP2H,RCAP2L)))
			; SOURCE LINE # 107
?C0029:
; 			            RCAP2H=0xFF;		
			; SOURCE LINE # 108
	MOV  	RCAP2H,#0FFH
; 	                    RCAP2L=0xF3;
			; SOURCE LINE # 109
	MOV  	RCAP2L,#0F3H
; 					  }break;
			; SOURCE LINE # 110
;           }
			; SOURCE LINE # 111
?C0026:
;           TI=1;
			; SOURCE LINE # 112
	SETB 	TI
; 	      RI=0;
			; SOURCE LINE # 113
	CLR  	RI
; 	      TR2=1;
			; SOURCE LINE # 114
	SETB 	TR2
; 		  
; }
			; SOURCE LINE # 116
	RET  	
; END OF _Init_COMM

; /*-----------------------------------------------------
;                 URAT命令格式0xaa+0xbb+command+data
; 函数功能：是发送同步码0xaa+0xbb
; 参数说明：syn is send string 
; -------------------------------------------------------*/
; void serial_syn(  )

	RSEG  ?PR?serial_syn?USB118A
serial_syn:
	USING	0
			; SOURCE LINE # 122
; {
			; SOURCE LINE # 123
;   uchar i;
;   uchar syn;
;   i=0;
			; SOURCE LINE # 126
;---- Variable 'i?552' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
;   syn=0xaa;
			; SOURCE LINE # 127
;---- Variable 'syn?553' assigned to Register 'R6' ----
	MOV  	R6,#0AAH
;   TI=0;
			; SOURCE LINE # 128
	CLR  	TI
?C0031:
;   while(i<2)
			; SOURCE LINE # 129
;   { 
			; SOURCE LINE # 130
;     SBUF=syn;
			; SOURCE LINE # 131
	MOV  	SBUF,R6
?C0033:
;     while(!TI);
			; SOURCE LINE # 132
	JNB  	TI,?C0033
?C0034:
; 	TI=0;		
			; SOURCE LINE # 133
	CLR  	TI
; 	syn=0xbb;
			; SOURCE LINE # 134
	MOV  	R6,#0BBH
; 	i++;   
			; SOURCE LINE # 135
	INC  	R7
;   }
			; SOURCE LINE # 136
	MOV  	A,R7
	CJNE 	A,#02H,?C0031
; }
			; SOURCE LINE # 137
?C0035:
	RET  	
; END OF serial_syn

; 
; /*--------------------------------------------------------
;                    串口接收一个字节数据
; 函数功能：接收一个字节数据
; ---------------------------------------------------------*/
; void Send_Data(uchar send)

	RSEG  ?PR?_Send_Data?USB118A
_Send_Data:
			; SOURCE LINE # 143
;---- Variable 'send?654' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 144
;    
;    SBUF=send;
			; SOURCE LINE # 146
	MOV  	SBUF,R7
?C0036:
;    while(!TI);   
			; SOURCE LINE # 147
	JNB  	TI,?C0036
?C0037:
;    TI=0;	              			            
			; SOURCE LINE # 148
	CLR  	TI
; }
			; SOURCE LINE # 149
	RET  	
; END OF _Send_Data

; /*---------------------------------------------------------------------------------------------------
;                      串口发送函数command(64)+data(0-2048)
; 函数功能: serial send data
; 入口参数: *s_command 是命令指针，按协议要求发送64个字节为一帧，*s_dat是数据指针，
;           s_num是要发送的数据字节数（0-2048）
;  ----------------------------------------------------------------------------------------------------*/
; void serial_send(uchar *s_command,  uchar *s_dat, uint s_num)

	RSEG  ?PR?_serial_send?USB118A
_serial_send:
	USING	0
			; SOURCE LINE # 156
;---- Variable 's_command?755' assigned to Register 'R1/R2/R3' ----
; {
			; SOURCE LINE # 157
;   uint s;
;   for(s=0; s<64; s++)   	 
			; SOURCE LINE # 159
;---- Variable 's?758' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
?C0039:
;    {
			; SOURCE LINE # 160
;      //SBUF=*s_command;
; 	// while(!TI);
;    	// TI=0;
; 	 Send_Data(*s_command);
			; SOURCE LINE # 164
	LCALL	?C?CLDPTR
	MOV  	R7,A
	LCALL	_Send_Data
; 	 s_command++;  
			; SOURCE LINE # 165
	MOV  	A,#01H
	ADD  	A,R1
	MOV  	R1,A
	CLR  	A
	ADDC 	A,R2
	MOV  	R2,A
;     }
			; SOURCE LINE # 166
	INC  	R5
	CJNE 	R5,#00H,?C0094
	INC  	R4
?C0094:
	MOV  	A,R5
	XRL  	A,#040H
	ORL  	A,R4
	JNZ  	?C0039
?C0040:
;    for(s=0; s<s_num; s++)
			; SOURCE LINE # 167
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
?C0042:
	SETB 	C
	MOV  	R0,#LOW (s_num?757+01H)
	MOVX 	A,@R0
	SUBB 	A,R5
	DEC  	R0
	MOVX 	A,@R0
	SUBB 	A,R4
	JC   	?C0043
; 	{
			; SOURCE LINE # 168
;  	 //SBUF=*s_dat;
; 	 //while(!TI);
;    	 //TI=0;
; 	 Send_Data(*s_dat);
			; SOURCE LINE # 172
	MOV  	R0,#LOW (s_dat?756)
	MOVX 	A,@R0
	MOV  	R3,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R2,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R1,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
	LCALL	_Send_Data
; 	 s_dat++; 	
			; SOURCE LINE # 173
	MOVX 	A,@R0
	ADD  	A,#01H
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,#00H
	MOVX 	@R0,A
;    	}
			; SOURCE LINE # 174
	INC  	R5
	CJNE 	R5,#00H,?C0095
	INC  	R4
?C0095:
	SJMP 	?C0042
?C0043:
;    TI=0;
			; SOURCE LINE # 175
	CLR  	TI
;    RI=0;
			; SOURCE LINE # 176
	CLR  	RI
; 
;    EA=1;
			; SOURCE LINE # 178
	SETB 	EA
;    ES=1;    
			; SOURCE LINE # 179
	SETB 	ES
; }
			; SOURCE LINE # 180
	RET  	
; END OF _serial_send

; 
; /*--------------------------------------------------------
;                    串口接收一个字节数据
; 函数功能：接收一个字节数据
; ---------------------------------------------------------*/
; unsigned char Receive_Data()

	RSEG  ?PR?Receive_Data?USB118A
Receive_Data:
	USING	0
			; SOURCE LINE # 186
; {
			; SOURCE LINE # 187
?C0046:
;          uchar receive;
; 		 while(!RI);
			; SOURCE LINE # 189
	JNB  	RI,?C0046
?C0047:
; 		 receive=SBUF;
			; SOURCE LINE # 190
;---- Variable 'receive?859' assigned to Register 'R7' ----
	MOV  	R7,SBUF
; 		 RI=0;	              			  
			; SOURCE LINE # 191
	CLR  	RI
;          return (receive);           
			; SOURCE LINE # 192
; }
			; SOURCE LINE # 193
?C0048:
	RET  	
; END OF Receive_Data

; /*-------------------------------------------------------------------------------------------------
;                     串口接收一帧数据：数据格式 command(64)+data(0-16384)
; 函数功能：接收一帧数据
; 入口参数：*r_command是接收响应命令帧数据指针，*r_dat是接收数据指针，r_num是在命令指针后的数据个数。
; 出口参数：return 0 表示错误命令, 1 表示接收一帧完成 
; ---------------------------------------------------------------------------------------------------*/
; unsigned char Receive_One(uchar *r_command,  uchar *r_dat)

	RSEG  ?PR?_Receive_One?USB118A
_Receive_One:
	USING	0
			; SOURCE LINE # 200
;---- Variable 'r_command?960' assigned to Register 'R1/R2/R3' ----
; {
			; SOURCE LINE # 201
;          
;   uchar i;
;   uint r_num;
;   r_num=0;
			; SOURCE LINE # 205
	CLR  	A
	MOV  	R0,#LOW (r_num?963)
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
;   for(i=0; i<3; i++)
			; SOURCE LINE # 206
	MOV  	R0,#LOW (i?962)
	MOVX 	@R0,A
?C0049:
;    {
			; SOURCE LINE # 207
;     *r_command=Receive_Data();
			; SOURCE LINE # 208
	LCALL	Receive_Data
	MOV  	A,R7
	LCALL	?C?CSTPTR
; 	 r_command++;
			; SOURCE LINE # 209
	MOV  	A,#01H
	ADD  	A,R1
	MOV  	R1,A
	CLR  	A
	ADDC 	A,R2
	MOV  	R2,A
;    }
			; SOURCE LINE # 210
	MOV  	R0,#LOW (i?962)
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#03H
	JC   	?C0049
?C0050:
;   if(commd[0]==0xaa)	 //如果接收到0xaa+0xbb+0x01 错误信息格式是： 0xaa + 0xbb +0x01
			; SOURCE LINE # 211
	MOV  	R0,#LOW (commd)
	MOVX 	A,@R0
	CJNE 	A,#0AAH,?C0052
; 	  return 0;
			; SOURCE LINE # 212
	MOV  	R7,#00H
	RET  	
?C0052:
;   for(i=3;i<10;i++)      //不是错误信息时，继续接收完一帧（64byte）    
			; SOURCE LINE # 213
	MOV  	R0,#LOW (i?962)
	MOV  	A,#03H
	MOVX 	@R0,A
?C0054:
;    {
			; SOURCE LINE # 214
;     *r_command=Receive_Data();
			; SOURCE LINE # 215
	LCALL	Receive_Data
	MOV  	A,R7
	LCALL	?C?CSTPTR
;    	r_command++;
			; SOURCE LINE # 216
	MOV  	A,#01H
	ADD  	A,R1
	MOV  	R1,A
	CLR  	A
	ADDC 	A,R2
	MOV  	R2,A
;     }
			; SOURCE LINE # 217
	MOV  	R0,#LOW (i?962)
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#0AH
	JC   	?C0054
?C0055:
;  		 																		 
;   if((commd[0]==0xB0))	 //如果是read 命令则有数据返回
			; SOURCE LINE # 219
	MOV  	R0,#LOW (commd)
	MOVX 	A,@R0
	MOV  	R1,A
	CJNE 	A,#0B0H,?C0057
;     {
			; SOURCE LINE # 220
;     	r_num=commd[6];	 //data for r_num BYTE    
			; SOURCE LINE # 221
	MOV  	R0,#LOW (commd+06H)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (r_num?963)
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
; 		r_num<<=8;
			; SOURCE LINE # 222
	MOVX 	A,@R0
	MOV  	R7,#00H
	DEC  	R0
	MOVX 	@R0,A
	MOV  	R6,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
; 		r_num|=commd[5];
			; SOURCE LINE # 223
	MOV  	R0,#LOW (commd+05H)
	MOVX 	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	MOV  	R0,#LOW (r_num?963)
	MOVX 	@R0,A
	MOV  	A,R5
	INC  	R0
	MOVX 	@R0,A
;      }
			; SOURCE LINE # 224
?C0057:
;    if(commd[0]==0x20) 	 //如果是 list 命令则有数据返回
			; SOURCE LINE # 225
	MOV  	A,R1
	CJNE 	A,#020H,?C0058
; 	 {
			; SOURCE LINE # 226
;        r_num=commd[5];	 //data for r_num BYTE    
			; SOURCE LINE # 227
	MOV  	R0,#LOW (commd+05H)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (r_num?963)
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
;        r_num<<=8;
			; SOURCE LINE # 228
	MOVX 	A,@R0
	MOV  	R7,#00H
	DEC  	R0
	MOVX 	@R0,A
	MOV  	R6,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
; 	   r_num|=commd[4];
			; SOURCE LINE # 229
	MOV  	R0,#LOW (commd+04H)
	MOVX 	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	MOV  	R0,#LOW (r_num?963)
	MOVX 	@R0,A
	MOV  	A,R5
	INC  	R0
	MOVX 	@R0,A
; 	  }    		   
			; SOURCE LINE # 230
?C0058:
;    for(i=0;i<r_num;i++)    //receive data,   r_num(0-16384)
			; SOURCE LINE # 231
	CLR  	A
	MOV  	R0,#LOW (i?962)
	MOVX 	@R0,A
?C0059:
	MOV  	R0,#LOW (i?962)
	MOVX 	A,@R0
	MOV  	R7,A
	SETB 	C
	MOV  	R0,#LOW (r_num?963+01H)
	MOVX 	A,@R0
	SUBB 	A,R7
	DEC  	R0
	MOVX 	A,@R0
	SUBB 	A,#00H
	JC   	?C0060
;      {
			; SOURCE LINE # 232
;       *(r_dat+i)=Receive_Data();
			; SOURCE LINE # 233
	LCALL	Receive_Data
	MOV  	R0,#LOW (r_dat?961)
	MOVX 	A,@R0
	MOV  	R3,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R2,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R1,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	DPL,A
	MOV  	DPH,#00H
	MOV  	A,R7
	LCALL	?C?CSTOPTR
;      }		 
			; SOURCE LINE # 234
	MOV  	R0,#LOW (i?962)
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0059
?C0060:
;     return 1;
			; SOURCE LINE # 235
	MOV  	R7,#01H
; }
			; SOURCE LINE # 236
?C0053:
	RET  	
; END OF _Receive_One

; /*----------------------------------------------
; 函数功能：serial receive  data
; 参数说明：同serial_send()
; ------------------------------------------------*
; unsigned char serial_rec(unsigned char *r_command,  unsigned char *r_dat,  unsigned int r_num)
; {
;  unsigned int r, receive_data;
;  //serial_int();
;  
;  for(r=0; r<3; r++)
;    {
;     while(!RI);
; 	receive_data=SBUF;
; 	RI=0;
;     *r_command=receive_data;		 		 		 
; 	r_command++;	
;    	  
;    }
;    delay(10);
;   if(commd[0]==0xaa)
;       return 0;
; 
;  for(r=3; r<64; r++)	 
;    {
; 	while(!RI);
; 	receive_data=SBUF;
; 	RI=0;
; 	*r_command=receive_data;		 		 		 
; 	r_command++;
; 	
;    	  
;    }
; 
;  for(r=0; r<r_num; r++)
;    {
; 	while(!RI);
; 	receive_data=SBUF;
; 	RI=0; 
; 	*r_dat=receive_data;
;     r_dat++;
; 	
;    	 
;    }
;     return 1;	 
;   
; }
;  
; /*-------------------------------------------------------------------------------------------
;             检测设备是否正常
; 函数功能: USB118 detect u
; 出口参数: USB118T_Detect commd[0]= 0x04, commd[1] 是检测结果 0x01有磁盘，0x00没有磁盘。 
; ------------------------------------------------------------------------------------------- */
; void USB118_Detect()

	RSEG  ?PR?USB118_Detect?USB118A
USB118_Detect:
	USING	0
			; SOURCE LINE # 289
; {
			; SOURCE LINE # 290
;   intia(0x20);		//intialize	command data group
			; SOURCE LINE # 291
	MOV  	R7,#020H
	LCALL	_intia
; 
;   commd[0]=0x01;	 //USB118R_Detect command 0x01
			; SOURCE LINE # 293
	MOV  	R0,#LOW (commd)
	MOV  	A,#01H
	MOVX 	@R0,A
;   commd[1]=0x00;  
			; SOURCE LINE # 294
	CLR  	A
	INC  	R0
	MOVX 	@R0,A
;     
;   serial_syn();
			; SOURCE LINE # 296
	LCALL	serial_syn
;   serial_send(commd, 0, 0);
			; SOURCE LINE # 297
	MOV  	R0,#LOW (?_serial_send?BYTE+03H)
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (commd)
	MOV  	R1,#LOW (commd)
	LJMP 	_serial_send
; END OF USB118_Detect

; }
; 
; /*-----------------------------------------------------------------------------------------------------------------------
; 		  创建文件或者目录
; 函数功能：create file or makedir
; 入口参数：tpye is 0x07(file) or 0x32(makedir),na1--an8 feil name, tp1--tp3 feil tpye
; 出口参数：USB118_Create  ,Create 返回command[0]=0x0A, command [1]  01H表示成功，00H表示失败，command[2]-[3]表示错误码
;       and USB118_MakeDir ,MakeDir返回command[0]=0x42，command [1]  01H表示成功，00H表示失败，command[2]-[3]表示错误码 
; ----------------------------------------------------------------------------------------------------------------------- */
; void USB118_Crefiledir( uchar tpye,  uchar na1, uchar na2, uchar na3, uchar na4, 

	RSEG  ?PR?_USB118_Crefiledir?USB118A
_USB118_Crefiledir:
	USING	0
			; SOURCE LINE # 307
;---- Variable 'tpye?1164' assigned to Register 'R4' ----
	MOV  	R4,AR7
;---- Variable 'na2?1166' assigned to Register 'R3' ----
;---- Variable 'na1?1165' assigned to Register 'R5' ----
;                          uchar na5,  uchar na6, uchar na7, uchar na8, uchar tp1,
; 					   	 uchar tp2,  uchar tp3 )
; {
			; SOURCE LINE # 310
;  intia(0);
			; SOURCE LINE # 311
	CLR  	A
	MOV  	R7,A
	LCALL	_intia
;  commd[0]=tpye;		//create file(07H) or dir(32H)
			; SOURCE LINE # 312
	MOV  	R0,#LOW (commd)
	MOV  	A,R4
	MOVX 	@R0,A
;  commd[1]=na1;
			; SOURCE LINE # 313
	INC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
;  commd[2]=na2;
			; SOURCE LINE # 314
	INC  	R0
	MOV  	A,R3
	MOVX 	@R0,A
;  commd[3]=na3;
			; SOURCE LINE # 315
	MOV  	R0,#LOW (na3?1167)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+03H)
	MOVX 	@R0,A
;  commd[4]=na4;
			; SOURCE LINE # 316
	MOV  	R0,#LOW (na4?1168)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+04H)
	MOVX 	@R0,A
;  commd[5]=na5;
			; SOURCE LINE # 317
	MOV  	R0,#LOW (na5?1169)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+05H)
	MOVX 	@R0,A
;  commd[6]=na6;
			; SOURCE LINE # 318
	MOV  	R0,#LOW (na6?1170)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+06H)
	MOVX 	@R0,A
;  commd[7]=na7;
			; SOURCE LINE # 319
	MOV  	R0,#LOW (na7?1171)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+07H)
	MOVX 	@R0,A
;  commd[8]=na8;
			; SOURCE LINE # 320
	MOV  	R0,#LOW (na8?1172)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+08H)
	MOVX 	@R0,A
; 
;  commd[9]=tp1;
			; SOURCE LINE # 322
	MOV  	R0,#LOW (tp1?1173)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+09H)
	MOVX 	@R0,A
;  commd[10]=tp2;
			; SOURCE LINE # 323
	MOV  	R0,#LOW (tp2?1174)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+0AH)
	MOVX 	@R0,A
;  commd[11]=tp3;
			; SOURCE LINE # 324
	MOV  	R0,#LOW (tp3?1175)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+0BH)
	MOVX 	@R0,A
; 
;  commd[12]=0x20;	//create file attribute
			; SOURCE LINE # 326
	INC  	R0
	MOV  	A,#020H
	MOVX 	@R0,A
;  commd[23]=0x38;    //create file time
			; SOURCE LINE # 327
	MOV  	R0,#LOW (commd+017H)
	MOV  	A,#038H
	MOVX 	@R0,A
;  commd[24]=0x21;
			; SOURCE LINE # 328
	INC  	R0
	MOV  	A,#021H
	MOVX 	@R0,A
;  commd[33]=0;
			; SOURCE LINE # 329
	CLR  	A
	MOV  	R0,#LOW (commd+021H)
	MOVX 	@R0,A
; 
;  serial_syn();
			; SOURCE LINE # 331
	LCALL	serial_syn
;  serial_send(commd, 0, 0);  
			; SOURCE LINE # 332
	MOV  	R0,#LOW (?_serial_send?BYTE+03H)
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (commd)
	MOV  	R1,#LOW (commd)
	LJMP 	_serial_send
; END OF _USB118_Crefiledir

;  //serial_rec(commd, 0, 0);
; }
; 
; /*------------------------------------------------------------------
; 函数功能： open file
; 入口参数：The na1-8 is file name, the tp1-3 is file type.
; 出口参数：USB118_Open  ,Open 返回command[0]=0x0D, command [1]  01H表示成功，00H表示失败，
;           command[2]-[3]表示错误码 
; ------------------------------------------------------------------*/
; void  USB118_Open(uchar na1, uchar na2, uchar na3, uchar na4,uchar na5, uchar na6, uchar na7, uchar na8, 

	RSEG  ?PR?_USB118_Open?USB118A
_USB118_Open:
	USING	0
			; SOURCE LINE # 342
;---- Variable 'na1?1276' assigned to Register 'R4' ----
	MOV  	R4,AR7
;---- Variable 'na3?1278' assigned to Register 'R3' ----
;---- Variable 'na2?1277' assigned to Register 'R5' ----
;                   uchar tp1, uchar tp2, uchar tp3)
; 					   	   
; {
			; SOURCE LINE # 345
;  intia(0x20);
			; SOURCE LINE # 346
	MOV  	R7,#020H
	LCALL	_intia
;  commd[0]=0x06;	 //open file 
			; SOURCE LINE # 347
	MOV  	R0,#LOW (commd)
	MOV  	A,#06H
	MOVX 	@R0,A
;  commd[1]=na1;
			; SOURCE LINE # 348
	INC  	R0
	MOV  	A,R4
	MOVX 	@R0,A
;  commd[2]=na2;
			; SOURCE LINE # 349
	INC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
;  commd[3]=na3;
			; SOURCE LINE # 350
	INC  	R0
	MOV  	A,R3
	MOVX 	@R0,A
;  commd[4]=na4;
			; SOURCE LINE # 351
	MOV  	R0,#LOW (na4?1279)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+04H)
	MOVX 	@R0,A
;  commd[5]=na5;
			; SOURCE LINE # 352
	MOV  	R0,#LOW (na5?1280)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+05H)
	MOVX 	@R0,A
;  commd[6]=na6;
			; SOURCE LINE # 353
	MOV  	R0,#LOW (na6?1281)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+06H)
	MOVX 	@R0,A
;  commd[7]=na7;
			; SOURCE LINE # 354
	MOV  	R0,#LOW (na7?1282)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+07H)
	MOVX 	@R0,A
;  commd[8]=na8;
			; SOURCE LINE # 355
	MOV  	R0,#LOW (na8?1283)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+08H)
	MOVX 	@R0,A
; 
;  commd[9]=tp1;
			; SOURCE LINE # 357
	MOV  	R0,#LOW (tp1?1284)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+09H)
	MOVX 	@R0,A
;  commd[10]=tp2;
			; SOURCE LINE # 358
	MOV  	R0,#LOW (tp2?1285)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+0AH)
	MOVX 	@R0,A
;  commd[11]=tp3;
			; SOURCE LINE # 359
	MOV  	R0,#LOW (tp3?1286)
	MOVX 	A,@R0
	MOV  	R0,#LOW (commd+0BH)
	MOVX 	@R0,A
; 
;  serial_syn();
			; SOURCE LINE # 361
	LCALL	serial_syn
;  serial_send(commd, 0, 0);
			; SOURCE LINE # 362
	MOV  	R0,#LOW (?_serial_send?BYTE+03H)
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (commd)
	MOV  	R1,#LOW (commd)
	LJMP 	_serial_send
; END OF _USB118_Open

;  //serial_rec(commd, 0, 0);	
; }
; 
; /*-----------------------------------------------------
;              写入数据
; 函数功能：when open  or create file, write data
; 入口参数：*wdata 将要写入数据组的指针头, wnum是写入数据的长度(0--2048)
; -------------------------------------------------------*/		 
; void USB118_Write(uchar *wdata, uint wnum)

	RSEG  ?PR?_USB118_Write?USB118A
_USB118_Write:
	USING	0
			; SOURCE LINE # 371
	MOV  	R0,#LOW (wdata?1387)
	MOV  	A,R3
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R2
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R1
	MOVX 	@R0,A
;---- Variable 'wnum?1388' assigned to Register 'R4/R5' ----
; {
			; SOURCE LINE # 372
;   
;   uchar n;
;   uint data_num;
;   intia(0);
			; SOURCE LINE # 376
	CLR  	A
	MOV  	R7,A
	LCALL	_intia
;   data_num=wnum;
			; SOURCE LINE # 377
;---- Variable 'data_num?1390' assigned to Register 'DPTR' ----
	MOV  	DPL,R5
	MOV  	DPH,R4
;   n=wnum&0xff;
			; SOURCE LINE # 378
	MOV  	A,R5
;---- Variable 'n?1389' assigned to Register 'R3' ----
	MOV  	R3,A
;   wnum>>=8;
			; SOURCE LINE # 379
	MOV  	A,R4
	MOV  	R5,A
	MOV  	R4,#00H
;   
;   commd[0]=0x09;	 //write data
			; SOURCE LINE # 381
	MOV  	R0,#LOW (commd)
	MOV  	A,#09H
	MOVX 	@R0,A
;   commd[1]=0;
			; SOURCE LINE # 382
	CLR  	A
	INC  	R0
	MOVX 	@R0,A
;   commd[2]=n;
			; SOURCE LINE # 383
	INC  	R0
	MOV  	A,R3
	MOVX 	@R0,A
;   commd[3]=(uchar)wnum;
			; SOURCE LINE # 384
	INC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
;   				    
;   serial_syn();
			; SOURCE LINE # 386
	LCALL	serial_syn
;   serial_send(commd, wdata, data_num);
			; SOURCE LINE # 387
	MOV  	R0,#LOW (wdata?1387)
	MOVX 	A,@R0
	MOV  	R1,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R2,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R0,#LOW (?_serial_send?BYTE+03H)
	XCH  	A,R1
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R2
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R1
	MOVX 	@R0,A
	MOV  	R6,DPH
	MOV  	R7,DPL
	INC  	R0
	MOV  	A,R6
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (commd)
	MOV  	R1,#LOW (commd)
	LJMP 	_serial_send
; END OF _USB118_Write

; 
;   //serial_rec(commd, 0, 0);
; }  	  
; /*-----------------------------------------------
; 函数功能:进入子目录
; 入口参数:na1-8是要进入的目录名
; ------------------------------------------------*
; void USB118_InDir(uchar na1, uchar na2, uchar na3, uchar na4,uchar na5, uchar na6, uchar na7, uchar na8)
; {
;  intia(0x20);
; 
;  commd[0]=0x33;		   //in dir
;  commd[1]=na1;
;  commd[2]=na2;
;  commd[3]=na3;
;  commd[4]=na4;
;  commd[5]=na5;
;  commd[6]=na6;
;  commd[7]=na7;
;  commd[8]=na8;
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*------------------------------       
; 函数功能:返回当前目录的上一层
; -------------------------------*
; void USB118_OutDir()
; {
;  intia(0x20);
;  
;  commd[0]=0x34;	  // out dir
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*------------------------------------
; 函数功能:返回根目录
; --------------------------------------*
; void USB118_RootDir()
; {
;  intia(0x20);
; 
;  commd[0]=0x35;	  // return root dir
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*----------------------------------
; 函数功能:read data
; 入口参数:length读取数据的长度
; -----------------------------------*
; void USB118_Read(uint length)
; {
;  uchar leng;
;  intia(0x20);
; 
;  leng=(uchar)length&0xff;
;  length>>=8; 
;  commd[0]=0x08;	    //read file
;  commd[1]=leng;
;  commd[2]=(uchar)length;
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*----------------------------------
; 函数功能:列举目录下文件和文件夹
; -----------------------------------*
; void USB118_List()
; {
;  intia(0x20);
;  
;  commd[0]=0x10;
;  commd[1]=0;
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*--------------------------------------------------------------
; 函数功能:删除指定文件或子目录
; 入口参数:na1-8是要删除的文件名, tp1-3是要删除的文件的扩展名
; --------------------------------------------------------------*
; void USB118_Remove(uchar na1, uchar na2, uchar na3, uchar na4,uchar na5, uchar na6, uchar na7, uchar na8, 
;                   uchar tp1, uchar tp2, uchar tp3)
; {
;  intia(0x20);
; 
;  commd[0]=0x11;
;  commd[1]=0;
;  commd[2]=na1;
;  commd[3]=na2;
;  commd[4]=na3;
;  commd[5]=na4;
;  commd[6]=na5;
;  commd[7]=na6;
;  commd[8]=na7;
;  commd[9]=na8;
; 
;  commd[10]=tp1;
;  commd[11]=tp2;
;  commd[12]=tp3;
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*----------------------------------------
; 函数功能:获取磁盘空间
; ----------------------------------------*
; void USB118_GetCapacity()
; {
;   intia(0x20);
; 
;   commd[0]=0x12;
;   commd[1]=0;
; 
;   serial_syn();
;   serial_send(commd, 0, 0);
; }
; 
; /*--------------------------------------------------
; 函数功能:移动指针位置
; 入口函数:sp 是指针移动到的位置 (0--4294967295)
; ---------------------------------------------------*
; void USB118_SetFilePointer(long int sp)
; {
;  intia(0x20);
; 
;  commd[0]=0x15;
;  commd[1]=0;
;  commd[2]=(uchar)sp;
;  sp>>=8;
;  commd[3]=(uchar)sp;
;  sp>>=8;
;  commd[4]=(uchar)sp;
;  sp>>=8;
;  commd[5]=(uchar)sp;
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; }
; 
; /*---------------------------------
; 函数功能:获取系统版本号
; -----------------------------------
; void USB118_GetVersion()
; {
;  intia(0x20);
; 
;  commd[0]=0x30;
;  commd[1]=0;
; 
;  serial_syn();
;  serial_send(commd, 0, 0);
; } */
; 
; main()

	RSEG  ?PR?main?USB118A
main:
	USING	0
			; SOURCE LINE # 550
; {
			; SOURCE LINE # 551
;  Del(200);
			; SOURCE LINE # 552
	MOV  	R7,#0C8H
	MOV  	R6,#00H
	LCALL	_Del
; 
;  //intia(0x20);  
;  Init_COMM(9600);
			; SOURCE LINE # 555
	MOV  	R7,#080H
	MOV  	R6,#025H
	LCALL	_Init_COMM
?C0066:
; 
;  while(1)
			; SOURCE LINE # 557
;  {
			; SOURCE LINE # 558
;   USB118_Detect();
			; SOURCE LINE # 559
	LCALL	USB118_Detect
;   Del(50);
			; SOURCE LINE # 560
	MOV  	R7,#032H
	MOV  	R6,#00H
	LCALL	_Del
;   delay(20);
			; SOURCE LINE # 561
	MOV  	R7,#014H
	LCALL	_delay
;  // if(Command_status==0x01)
; 	if((commd[0]==0x04)&(commd[1]==0x01)) 
			; SOURCE LINE # 563
	MOV  	R0,#LOW (commd+01H)
	MOVX 	A,@R0
	CJNE 	A,#01H,?C0069
	MOV  	R7,#01H
	SJMP 	?C0070
?C0069:
	MOV  	R7,#00H
?C0070:
	MOV  	R0,#LOW (commd)
	MOVX 	A,@R0
	CJNE 	A,#04H,?C0071
	MOV  	R6,#01H
	SJMP 	?C0072
?C0071:
	MOV  	R6,#00H
?C0072:
	MOV  	A,R6
	ANL  	A,R7
	JZ   	?C0066
; 	  {
			; SOURCE LINE # 564
; 	   break;
			; SOURCE LINE # 565
; 	   }
			; SOURCE LINE # 566
;    
;  }
			; SOURCE LINE # 568
?C0073:
;   while(1)
			; SOURCE LINE # 569
;  {
			; SOURCE LINE # 570
;    USB118_Open('A', 'C', 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 'T', 'X', 'T');
			; SOURCE LINE # 571
	MOV  	R0,#LOW (?_USB118_Open?BYTE+03H)
	MOV  	A,#020H
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#054H
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#058H
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#054H
	MOVX 	@R0,A
	MOV  	R3,#020H
	MOV  	R5,#043H
	MOV  	R7,#041H
	LCALL	_USB118_Open
;    delay(20);
			; SOURCE LINE # 572
	MOV  	R7,#014H
	MOV  	R6,#00H
	LCALL	_delay
;    Del(50);
			; SOURCE LINE # 573
	MOV  	R7,#032H
	LCALL	_Del
;    //if(Command_status==0x01)
; 	if((commd[0]==0x0D)&(commd[1]==0x01)) 
			; SOURCE LINE # 575
	MOV  	R0,#LOW (commd+01H)
	MOVX 	A,@R0
	CJNE 	A,#01H,?C0076
	MOV  	R7,#01H
	SJMP 	?C0077
?C0076:
	MOV  	R7,#00H
?C0077:
	MOV  	R0,#LOW (commd)
	MOVX 	A,@R0
	CJNE 	A,#0DH,?C0078
	MOV  	R6,#01H
	SJMP 	?C0079
?C0078:
	MOV  	R6,#00H
?C0079:
	MOV  	A,R6
	ANL  	A,R7
	JZ   	?C0075
; 	  {
			; SOURCE LINE # 576
; 	   int_data(0x61);
			; SOURCE LINE # 577
	MOV  	R7,#061H
	LCALL	_int_data
; 	   USB118_Write(dat1, 10);
			; SOURCE LINE # 578
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (dat1)
	MOV  	R1,#LOW (dat1)
	MOV  	R5,#0AH
; 	   break;
			; SOURCE LINE # 579
	SJMP 	?C0096
; 
; 	   }
			; SOURCE LINE # 581
?C0075:
; 	 else
; 	   {
			; SOURCE LINE # 583
; 		USB118_Crefiledir( 0x07,  'A', 'C', 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 'T', 'X', 'T');
			; SOURCE LINE # 584
	MOV  	R0,#LOW (?_USB118_Crefiledir?BYTE+03H)
	MOV  	A,#020H
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#054H
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#058H
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#054H
	MOVX 	@R0,A
	MOV  	R3,#043H
	MOV  	R5,#041H
	MOV  	R7,#07H
	LCALL	_USB118_Crefiledir
; 		 //if(Command_status==0x01)
; 		 Del(50);
			; SOURCE LINE # 586
	MOV  	R7,#032H
	MOV  	R6,#00H
	LCALL	_Del
;          	if((commd[0]==0x0A)&(commd[1]==0x01)) 
			; SOURCE LINE # 587
	MOV  	R0,#LOW (commd+01H)
	MOVX 	A,@R0
	CJNE 	A,#01H,?C0082
	MOV  	R7,#01H
	SJMP 	?C0083
?C0082:
	MOV  	R7,#00H
?C0083:
	MOV  	R0,#LOW (commd)
	MOVX 	A,@R0
	CJNE 	A,#0AH,?C0084
	MOV  	R6,#01H
	SJMP 	?C0085
?C0084:
	MOV  	R6,#00H
?C0085:
	MOV  	A,R6
	ANL  	A,R7
	JNZ  	$ + 5H
	LJMP 	?C0073
; 	          {
			; SOURCE LINE # 588
; 			   int_data(0x61);
			; SOURCE LINE # 589
	MOV  	R7,#061H
	LCALL	_int_data
; 	           USB118_Write(dat1, 4);
			; SOURCE LINE # 590
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (dat1)
	MOV  	R1,#LOW (dat1)
	MOV  	R5,#04H
?C0096:
	MOV  	R4,#00H
	LCALL	_USB118_Write
; 	           break;
			; SOURCE LINE # 591
; 	           }
			; SOURCE LINE # 592
; 	   }
			; SOURCE LINE # 593
; 
;    
;   }
			; SOURCE LINE # 596
?C0086:
;  while(1);
			; SOURCE LINE # 597
	SJMP 	?C0086
; END OF main

CSEG	AT	00023H
	LJMP	serial

;  }
; 
; /*---------------------------------------------------
;                 接收中断函数
; 函数功能：接收数据
; 出口参数：Command_status的状态
; ----------------------------------------------------*/
; void serial() interrupt 4 using 0

	RSEG  ?PR?serial?USB118A
	USING	0
serial:
	PUSH 	ACC
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	USING	0
	MOV  	PSW,#00H
			; SOURCE LINE # 605
; {
;   uint m;
;   if(RI)
			; SOURCE LINE # 608
	JNB  	RI,?C0091
;    {
			; SOURCE LINE # 609
;    ES=0;
			; SOURCE LINE # 610
	CLR  	ES
;    m= Receive_One(commd, 0);
			; SOURCE LINE # 611
	MOV  	R0,#LOW (?_Receive_One?BYTE+03H)
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	MOV  	R3,#0FEH
	MOV  	R2,#HIGH (commd)
	MOV  	R1,#LOW (commd)
	LCALL	_Receive_One
	MOV  	R6,#00H
;---- Variable 'm?1591' assigned to Register 'R6/R7' ----
;   //m=serial_rec(commd,0, 0);  
;    if(m)
			; SOURCE LINE # 613
	MOV  	A,R7
	JZ   	?C0091
;      Command_status=0x01;  	  	
			; SOURCE LINE # 614
	MOV  	R0,#LOW (Command_status)
	MOV  	A,#01H
	MOVX 	@R0,A
;   }
			; SOURCE LINE # 615
;  }  			; SOURCE LINE # 616
?C0091:
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	ACC
	RETI 	
; END OF serial

	END
