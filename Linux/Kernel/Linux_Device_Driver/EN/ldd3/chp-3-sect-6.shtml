<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>3.6. scull's Memory Usage</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-3-sect-5.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-3-sect-7.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-3-sect-6"></a>
<H3 class="docSection1Title">3.6. scull's Memory Usage</H3>

<p class="docText">Before introducing the <span class="docEmphasis">read</span> and<a name="chp-3-ITERM-4568"></a> <a name="chp-3-ITERM-4569"></a>
<a name="chp-3-ITERM-4570"></a>
<a name="chp-3-ITERM-4571"></a> <a name="chp-3-ITERM-4572"></a> <a name="chp-3-ITERM-4573"></a>
<span class="docEmphasis">write</span> operations, we'd better
look at how and why <span class="docEmphasis">scull</span> performs memory
allocation. "How" is needed to
thoroughly understand the code, and
"why" demonstrates the kind of
choices a driver writer needs to make, although
<span class="docEmphasis">scull</span> is definitely not typical as a device.</p>

<p class="docText">This section deals only with the memory allocation policy in
<span class="docEmphasis">scull</span> and doesn't show the
hardware management skills you need to write real drivers. These
skills are introduced in <a class="docLink" href="chp-9.shtml#chp-9">Chapter 9</a> and <a class="docLink" href="chp-10.shtml#chp-10">Chapter 10</a>. Therefore, you can skip this
section if you're not interested in understanding
the inner workings of the memory-oriented <span class="docEmphasis">scull</span>
driver.</p>

<p class="docText">The region of memory used by <span class="docEmphasis">scull</span>, also called
a <span class="docEmphasis">device</span>, is variable in length. The more you
write, the more it grows; trimming is performed by overwriting the
device with a shorter file.</p>

<p class="docText">The <span class="docEmphasis">scull</span> driver introduces two core functions
used to manage memory in the Linux kernel. These functions, defined
in <i>&lt;linux/slab.h&gt;</I>, are:</p>

<pre>void *kmalloc(size_t size, int flags);
void kfree(void *ptr);</pre><br>


<p class="docText">A call to <span class="docEmphasis">kmalloc</span> attempts to allocate
<tt>size</tt> bytes of memory; the return value is a
pointer to that memory or <tt>NULL</tt> if the allocation
fails. The <tt>flags</tt> argument is used to describe how
the memory should be allocated; we examine those flags in detail in
<a class="docLink" href="chp-8.shtml#chp-8">Chapter 8</a>. For now, we always
use <tt>GFP_KERNEL</tt>. Allocated memory should be freed
with <span class="docEmphasis">kfree</span>. You should never pass anything to
<span class="docEmphasis">kfree</span> that was not obtained from
<span class="docEmphasis">kmalloc</span>. It is, however, legal to pass a
<tt>NULL</tt> pointer to <span class="docEmphasis">kfree</span>.</P>

<p class="docText"><a name="chp-3-ITERM-4574"></a>
<a name="chp-3-ITERM-4575"></a><a name="chp-3-ITERM-4576"></a><span class="docEmphasis">kmalloc</span>
is not the most efficient way to allocate large areas of memory (see
<a class="docLink" href="chp-8.shtml#chp-8">Chapter 8</a>), so the
implementation chosen for <span class="docEmphasis">scull</span> is not a
particularly smart one. The source code for a smart implementation
would be more difficult to read, and the aim of this section is to
show <span class="docEmphasis">read</span> and <span class="docEmphasis">write</span>, not
memory management. That's why the code just uses
<span class="docEmphasis">kmalloc</span> and <span class="docEmphasis">kfree</span> without
resorting to allocation of whole pages, although that approach would
be more efficient.</p>

<p class="docText"><a name="chp-3-ITERM-4577"></a>On the flip side, we
didn't want to limit the size of the
"device" area, for both a
philosophical reason and a practical one. Philosophically,
it's always a bad idea to put arbitrary limits on
data items being managed. Practically, <span class="docEmphasis">scull</span> can
be used to temporarily eat up your system's memory
in order to run tests under low-memory conditions. Running such tests
might help you understand the system's internals.
You can use the command <span class="docEmphasis">cp /dev/zero /dev/scull0</span>
to eat all the real RAM with <span class="docEmphasis">scull</span>, and you can
use the <span class="docEmphasis">dd</span> utility to choose how much data is
copied to the <span class="docEmphasis">scull</span> device.</p>

<p class="docText">In <span class="docEmphasis">scull</span>, each device is a linked list of
<a name="chp-3-ITERM-4578"></a>
<a name="chp-3-ITERM-4579"></a>pointers,
each of which points to a <tt>scull_dev</tt> structure.
Each such structure can refer, by default, to at most four million
bytes, through an array of intermediate pointers. The released source
uses an array of 1000 pointers to areas of 4000 bytes. We call each
memory area a <I>quantum</i> and the array (or its
length) a <I>quantum
set</i><a name="chp-3-ITERM-4580"></a>
<a name="chp-3-ITERM-4581"></a>. A <span class="docEmphasis">scull</span> device
and its memory areas are shown in <a class="docLink" href="chp-3-sect-6.shtml#chp-3-FIG-1">Figure 3-1</a>.</p>

<a name="chp-3-FIG-1"></a><p><center>
<h5 class="docFigureTitle">Figure 3-1. The layout of a scull device</h5>
<img border="0" alt="" width="348" height="235" SRC="images/0596005903/figs/ldr3_0301.gif"></center></p><br>

<p class="docText">The chosen numbers are such that writing a single byte in
<span class="docEmphasis">scull</span> consumes 8000 or 12,000 thousand bytes of
memory: 4000 for the quantum and 4000 or 8000 for the quantum set
(according to whether a pointer is represented in 32 bits or 64 bits
on the target platform). If, instead, you write a huge amount of
data, the overhead of the linked list is not too bad. There is only
one list element for every four megabytes of data, and the maximum
size of the device is limited by the computer's
memory size.</p>

<p class="docText">Choosing the appropriate values for the quantum and the quantum set
is a question of policy, rather than mechanism, and the optimal sizes
depend on how the device is used. Thus, the
<span class="docEmphasis">scull</span> driver should not force the use of any
particular values for the quantum and quantum set sizes. In
<span class="docEmphasis">scull</span>, the user can change the values in charge
in several ways: by changing the macros
<tt>SCULL_QUANTUM</tt> and <tt>SCULL_QSET</tt> in
<i>scull.h</i> at compile time, by setting the integer
values <tt>scull_quantum</tt> and
<tt>scull_qset</tt> at module load time, or by changing
both the current and default values using <span class="docEmphasis">ioctl</span>
at runtime.</p>

<p class="docText">Using a macro and an integer value to allow both compile-time and
load-time configuration is reminiscent of how the major number is
selected. We use this technique for whatever value in the driver is
arbitrary or related to policy.</p>

<p class="docText">The only question left is how the default numbers have been chosen.
In this particular case, the problem is finding the best balance
between the waste of memory resulting from half-filled quanta and
quantum sets and the overhead of allocation, deallocation, and
pointer chaining that occurs if quanta and sets are small.
Additionally, the internal design of <span class="docEmphasis">kmalloc</span>
should be taken into account. (We won't pursue the
point now, though; the innards of <span class="docEmphasis">kmalloc</span> are
explored in <a class="docLink" href="chp-8.shtml#chp-8">Chapter 8</a>.) The
choice of default numbers comes from the assumption that massive
amounts of data are likely to be written to
<span class="docEmphasis">scull</span> while testing it, although normal use of
the device will most likely transfer just a few kilobytes of data.</p>

<p class="docText">We have already seen the <tt>scull_dev</tt> structure that
represents our device internally. That structure's
<tt>quantum</tt> and <tt>qset</tt> fields hold
the device's quantum and quantum set sizes,
respectively. The actual data, however, is
<a name="chp-3-ITERM-4582"></a>tracked by a different structure,
which we call <tt>struct
scull_qset</tt><a name="chp-3-ITERM-4583"></a>
<a name="chp-3-ITERM-4584"></a>:</P>

<pre>struct scull_qset {
    void **data;
    struct scull_qset *next;
};</pre><br>


<p class="docText">The next code fragment shows in practice how
<tt>struct</tt> <tt>scull_dev</tt> and
<tt>struct</tt> <tt>scull_qset</tt> are used to
hold data. The function <span class="docEmphasis">scull_trim</span> is in charge
of freeing the whole data area and is invoked by
<span class="docEmphasis">scull_open</span> when the file is opened for writing.
It simply walks through the list and frees any quantum and quantum
set it finds.</P>

<pre>int scull_trim(struct scull_dev *dev)
{
    struct scull_qset *next, *dptr;
    int qset = dev-&gt;qset;   /* "dev" is not-null */
    int i;

    for (dptr = dev-&gt;data; dptr; dptr = next) { /* all the list items */
        if (dptr-&gt;data) {
            for (i = 0; i &lt; qset; i++)
                kfree(dptr-&gt;data[i]);
            kfree(dptr-&gt;data);
            dptr-&gt;data = NULL;
        }
        next = dptr-&gt;next;
        kfree(dptr);
    }
    dev-&gt;size = 0;
    dev-&gt;quantum = scull_quantum;
    dev-&gt;qset = scull_qset;
    dev-&gt;data = NULL;
    return 0;
}</pre><BR>


<p class="docText"><span class="docEmphasis">scull_trim</span> is also used in <a name="chp-3-ITERM-4585"></a> <a name="chp-3-ITERM-4586"></a> <a name="chp-3-ITERM-4587"></a> <a name="chp-3-ITERM-4588"></a> <a name="chp-3-ITERM-4589"></a> <a name="chp-3-ITERM-4590"></a>the module cleanup
function to return memory used by <span class="docEmphasis">scull</span> to the
system.</p>


<ul></ul></TD></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-3-sect-5.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-3-sect-7.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
