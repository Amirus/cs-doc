<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>3.4. Char Device Registration</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-3-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-3-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-3-sect-4"></a>
<H3 class="docSection1Title" >3.4. Char Device Registration</H3>

<p class="docText">As we mentioned, the kernel uses <a name="chp-3-ITERM-4525"></a>
<a name="chp-3-ITERM-4526"></a> <a name="chp-3-ITERM-4527"></a>
<a name="chp-3-ITERM-4528"></a> <a name="chp-3-ITERM-4529"></a>structures of type
<tt>struct</tt> <tt>cdev</tt> to represent char
devices internally. Before the kernel invokes your
device's operations, you must allocate and register
one or more of these structures.<sup class="docFootnote"><a class="docLink" href="chp-3-sect-4.shtml#chp-3-FNOTE-6">[6]</a></sup> To do so, your code should include
<i>&lt;linux/cdev.h&gt;</i>, where the structure and
its associated helper functions are defined.</p><blockquote><p class="docFootnote"><sup><a name="chp-3-FNOTE-6">[6]</a></sup> There is an older
mechanism that avoids the use of <tt>cdev</tt> structures
(which we discuss in <a class="docLink" href="chp-3-sect-4.shtml#chp-3-sect-4.2">Section 3.4.2</a>). New code should use the newer technique,
however.</p></blockquote>

<p class="docText">There are two ways of allocating and initializing one of these
structures. If you wish to obtain a standalone
<tt>cdev</tt> structure at runtime, you may do so with code
such as:</P>

<pre>struct cdev *my_cdev = cdev_alloc(  );
my_cdev-&gt;ops = &amp;my_fops;</pre><br>


<p class="docText">Chances are, however, that you will want to embed the
<tt>cdev</tt> structure within a device-specific structure
of your own; that is what <span class="docEmphasis">scull</span> does. In that
case, you should initialize the structure that you have already
allocated with:</p>

<pre>void cdev_init(struct cdev *cdev, struct file_operations *fops);</pre><BR>


<p class="docText">Either way, there is one other <tt>struct</tt>
<tt>cdev</tt> field that you need to initialize. Like the
<tt>file_operations</tt> structure,
<tt>struct</tt> <tt>cdev</tt> has an
<tt>owner</tt> field that should be set to
<tt>THIS_MODULE</tt>.</p>

<p class="docText">Once the <tt>cdev</tt><a name="chp-3-ITERM-4530"></a>
<a name="chp-3-ITERM-4531"></a>
<a name="chp-3-ITERM-4532"></a> structure is set up, the final
step is to tell the kernel about it with a call to:</p>

<pre>int cdev_add(struct cdev *dev, dev_t num, unsigned int count);</pre><BR>


<p class="docText">Here, <tt>dev</tt> is the <tt>cdev</tt>
structure, <tt>num</tt> is the first device number to which
this device responds, and <tt>count</tt> is the number of
device numbers that should be associated with the device. Often
<tt>count</tt> is one, but there are situations where it
makes sense to have more than one device number correspond to a
specific device. Consider, for example, the SCSI tape driver, which
allows user space to select operating modes (such as density) by
assigning multiple minor numbers to each physical device.</p>

<p class="docText">There are a couple of important things to keep in mind when using
<span class="docEmphasis">cdev_add</span>. The first is that this call can fail.
If it returns a negative error code, your device has not been added
to the system. It almost always succeeds, however, and that brings up
the other point: as soon as <span class="docEmphasis">cdev_add</span> returns,
your device is "live" and its
operations can be called by the kernel. You should not call
<span class="docEmphasis">cdev_add</span> until your driver is completely ready
to handle operations on the device.</P>

<p class="docText">To remove a char device from the system, call:</p>

<pre>void cdev_del(struct cdev *dev);</pre><br>


<p class="docText">Clearly, you should not access the <tt>cdev</tt> structure
after passing it to <span class="docEmphasis">cdev_del</span>.</p>

<a name="chp-3-sect-4.1"></a>
<h4 class="docSection2Title">3.4.1. Device Registration in scull</h4>

<p class="docText">Internally, <span class="docEmphasis">scull</span> represents each device
with<a name="chp-3-ITERM-4533"></a> a structure of type
<tt>struct</tt> <tt>scull_dev</tt>. This
structure is defined as:</p>

<pre>struct scull_dev {
    struct scull_qset *data;  /* Pointer to first quantum set */
    int quantum;              /* the current quantum size */
    int qset;                 /* the current array size */
    unsigned long size;       /* amount of data stored here */
    unsigned int access_key;  /* used by sculluid and scullpriv */
    struct semaphore sem;     /* mutual exclusion semaphore     */
    struct cdev cdev;     /* Char device structure      */
};</pre><br>


<p class="docText">We discuss the various fields in this structure as we come to them,
but for now, we call attention to <tt>cdev</tt>, the
<tt>struct cdev</tt> that interfaces our device to the
kernel. This structure must be initialized and added to the system as
described above; the <span class="docEmphasis">scull</span> code that handles
this task is:</p>

<pre>static void scull_setup_cdev(struct scull_dev *dev, int index)
{
    int err, devno = MKDEV(scull_major, scull_minor + index);
    
    cdev_init(&amp;dev-&gt;cdev, &amp;scull_fops);
    dev-&gt;cdev.owner = THIS_MODULE;
    dev-&gt;cdev.ops = &amp;scull_fops;
    err = cdev_add (&amp;dev-&gt;cdev, devno, 1);
    /* Fail gracefully if need be */
    if (err)
    printk(KERN_NOTICE "Error %d adding scull%d", err, index);
}</pre><br>


<p class="docText">Since the <tt>cdev</tt> structure is embedded within
<tt>struct</tt> <tt>scull_dev</tt>,
<span class="docEmphasis">cdev_init</span> must be called to perform the
initialization of that structure.</p>


<a name="chp-3-sect-4.2"></a>
<h4 class="docSection2Title">3.4.2. The Older Way</h4>

<p class="docText">If you dig through much driver code in the 2.6 kernel, you may notice
that quite a few char drivers do not use the <tt>cdev</tt>
interface that we have just described. What you are seeing is older
code that has not yet been upgraded to the 2.6 interface. Since that
code works as it is, this upgrade may not happen for a long time. For
completeness, we describe the <a name="chp-3-ITERM-4534"></a>
<a name="chp-3-ITERM-4535"></a>
<a name="chp-3-ITERM-4536"></a>older char device
registration interface, but new code should not use it; this
mechanism will likely go away in a future kernel.</p>

<p class="docText">The classic way to register a char device driver is with:</P>

<pre>int register_chrdev(unsigned int major, const char *name,
                    struct file_operations *fops);</pre><br>


<p class="docText">Here, <tt>major</tt> is the major number
of<a name="chp-3-ITERM-4537"></a> interest,
<tt>name</tt> is the name of the driver (it appears in
<I>/proc/devices</I>), and <tt>fops</tt> is
the default <tt>file_operations</tt> structure. A call to
<span class="docEmphasis">register_chrdev</span> registers minor numbers 0-255
for the given <tt>major</tt>, and sets up a default
<tt>cdev</tt> structure for each. Drivers using this
interface must be prepared to handle <span class="docEmphasis">open</span> calls
on all 256 minor numbers (whether they correspond to real devices or
not), and they cannot use major or minor numbers greater than 255.</p>

<p class="docText">If you use <span class="docEmphasis">register_chrdev</span>, the proper function
to remove your device(s) from the system is:</p>

<pre>int unregister_chrdev(unsigned int major, const char *name);</pre><br>


<p class="docText"><tt>major</tt> and <tt>name</tt> must be
the<a name="chp-3-ITERM-4538"></a>
<a name="chp-3-ITERM-4539"></a>
<a name="chp-3-ITERM-4540"></a>
<a name="chp-3-ITERM-4541"></a>
<a name="chp-3-ITERM-4542"></a> same as
those passed to <span class="docEmphasis">register_chrdev</span>, or the call
will fail.</P>



<ul></UL></TD></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-3-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-3-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
