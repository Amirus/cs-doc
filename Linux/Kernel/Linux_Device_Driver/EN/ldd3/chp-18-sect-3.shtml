<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>18.3. TTY Line Settings</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-18-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-18-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-18-sect-3"></a>
<H3 class="docSection1Title">18.3. TTY Line Settings</H3>

<p class="docText">When a user wants to <a name="chp-18-ITERM-7953"></a> <a name="chp-18-ITERM-7954"></a> <a name="chp-18-ITERM-7955"></a> <a name="chp-18-ITERM-7956"></a> <a name="chp-18-ITERM-7957"></a>change
the line settings of a tty device or retrieve the current line
settings, he makes one of the many different termios user-space
library function calls or directly makes an
<span class="docEmphasis">ioctl</span> call on the tty device node. The tty core
converts both of these interfaces into a number of different tty
driver function callbacks and <span class="docEmphasis">ioctl</span> calls.</p>

<a name="chp-18-sect-3.1"></a>
<h4 class="docSection2Title">18.3.1. set_termios</h4>

<p class="docText">The majority of the <a name="chp-18-ITERM-7958"></a> <a name="chp-18-ITERM-7959"></a>
<a name="chp-18-ITERM-7960"></a>termios
user-space functions are translated by the library into an
<span class="docEmphasis">ioctl</span> call to the driver node. A large number of
the different tty <span class="docEmphasis">ioctl</span> calls are then
translated by the tty core into a single
<span class="docEmphasis">set_termios</span> function call to the tty driver. The
<span class="docEmphasis">set_termios</span> callback needs to determine which
line settings it is being asked to change, and then make those
changes in the tty device. The tty driver must be able to decode all
of the different settings in the termios structure and react to any
needed changes. This is a complicated task, as all of the line
settings are packed into the termios structure in a wide variety of
ways.</p>

<p class="docText">The first thing that a <span class="docEmphasis">set_termios</span> function
should do is determine whether anything actually has to be changed.
This can be done with the following code:</P>

<pre>unsigned int cflag;

cflag = tty-&gt;termios-&gt;c_cflag;

/* check that they really want us to change something */
if (old_termios) {
    if ((cflag =  = old_termios-&gt;c_cflag) &amp;&amp;
        (RELEVANT_IFLAG(tty-&gt;termios-&gt;c_iflag) =  = 
         RELEVANT_IFLAG(old_termios-&gt;c_iflag))) {
        printk(KERN_DEBUG " - nothing to change...\n");
        return;
    }
}</pre><br>


<p class="docText">The
<tt>RELEVANT_IFLAG</tt><a name="chp-18-ITERM-7961"></a>
<a name="chp-18-ITERM-7962"></a>
macro is defined as:</p>

<pre>#define RELEVANT_IFLAG(iflag) ((iflag) &amp; (IGNBRK|BRKINT|IGNPAR|PARMRK|INPCK))</pre><BR>


<p class="docText">and is used to mask off the important bits of the
<tt>cflags</tt> variable. This is then compared to the old
value, and see if they differ. If not, nothing needs to be changed,
so we return. Note that the <tt>old_termios</tt> variable
is first checked to see if it points to a valid structure first,
before it is accessed. This is required, as sometimes this variable
is set to <tt>NULL</tt>. trying to access a field off of a
<tt>NULL</tt> pointer causes the kernel to panic.</p>

<p class="docText">To look at the requested byte size, the
<tt>CSIZE</tt><a name="chp-18-ITERM-7963"></a>
<a name="chp-18-ITERM-7964"></a> bitmask can be used to separate out
the proper bits from the <tt>cflag</tt> variable. If the
size can not be determined, it is customary to default to eight data
bits. This can be implemented as follows:</P>

<pre>/* get the byte size */
switch (cflag &amp; CSIZE) {
    case CS5:
        printk(KERN_DEBUG " - data bits = 5\n");
        break;
    case CS6:
        printk(KERN_DEBUG " - data bits = 6\n");
        break;
    case CS7:
        printk(KERN_DEBUG " - data bits = 7\n");
        break;
    default:
    case CS8:
        printk(KERN_DEBUG " - data bits = 8\n");
        break;
}</pre><br>


<p class="docText">To determine the requested parity value, the
<tt>PARENB</tt><a name="chp-18-ITERM-7965"></a> bitmask can be checked against the
<tt>cflag</tt> variable to tell if any parity is to be set
at all. If so, the
<tt>PARODD</tt><a name="chp-18-ITERM-7966"></a> bitmask can be used to determine if the
parity should be odd or even. An implementation of this is:</P>

<pre>/* determine the parity */
if (cflag &amp; PARENB)
    if (cflag &amp; PARODD)
        printk(KERN_DEBUG " - parity = odd\n");
    else
        printk(KERN_DEBUG " - parity = even\n");
else
    printk(KERN_DEBUG " - parity = none\n");</pre><br>


<p class="docText">The stop bits that are requested can also be determined from the
<tt>cflag</tt> variable using the
<tt>CSTOPB</tt><a name="chp-18-ITERM-7967"></a> bitmask. An implemention of this is:</p>

<pre>/* figure out the stop bits requested */
if (cflag &amp; CSTOPB)
    printk(KERN_DEBUG " - stop bits = 2\n");
else
    printk(KERN_DEBUG " - stop bits = 1\n");</pre><br>


<p class="docText">There are a two basic types of flow control: hardware and software.
To determine if the user is asking for hardware flow control, the
<tt>CRTSCTS</tt><a name="chp-18-ITERM-7968"></a> bitmask can be checked against the
<tt>cflag</tt> variable. An exmple of this is:</p>

<pre>/* figure out the hardware flow control settings */
if (cflag &amp; CRTSCTS)
    printk(KERN_DEBUG " - RTS/CTS is enabled\n");
else
    printk(KERN_DEBUG " - RTS/CTS is disabled\n");</pre><br>


<p class="docText">Determining the different modes of software flow control and the
different stop and start characters is a bit more involved:</p>

<pre>/* determine software flow control */
/* if we are implementing XON/XOFF, set the start and 
 * stop character in the device */
if (I_IXOFF(tty) || I_IXON(tty)) {
    unsigned char stop_char  = STOP_CHAR(tty);
    unsigned char start_char = START_CHAR(tty);

    /* if we are implementing INBOUND XON/XOFF */
    if (I_IXOFF(tty))
        printk(KERN_DEBUG " - INBOUND XON/XOFF is enabled, "
            "XON = %2x, XOFF = %2x", start_char, stop_char);
    else
        printk(KERN_DEBUG" - INBOUND XON/XOFF is disabled");

    /* if we are implementing OUTBOUND XON/XOFF */
    if (I_IXON(tty))
        printk(KERN_DEBUG" - OUTBOUND XON/XOFF is enabled, "
            "XON = %2x, XOFF = %2x", start_char, stop_char);
    else
        printk(KERN_DEBUG" - OUTBOUND XON/XOFF is disabled");
}</pre><br>


<p class="docText">Finally, the baud rate needs to be determined. The tty core provides
a function,
<span class="docEmphasis">tty_get_baud_rate</span><a name="chp-18-ITERM-7969"></a>
<a name="chp-18-ITERM-7970"></a>
<a name="chp-18-ITERM-7971"></a>,
to help do this. The function returns an integer indicating the
requested baud rate for the specific tty device:</p>

<pre>/* get the baud rate wanted */
printk(KERN_DEBUG " - baud rate = %d", tty_get_baud_rate(tty));</pre><br>


<p class="docText">Now that the tty driver has determined all of the different line
settings, it can set the hardware up properly based on these values.</p>


<a name="chp-18-sect-3.2"></a>
<h4 class="docSection2Title">18.3.2. tiocmget and tiocmset</h4>

<p class="docText">In the 2.4 and older kernels, there used to be a number of tty
<span class="docEmphasis">ioctl</span> calls to get and set the different control
line settings. These were denoted by the constants
<tt>TIOCMGET</tt>, <tt>TIOCMBIS</tt>,
<tt>TIOCMBIC</tt>, and <tt>TIOCMSET</tt>.
<tt>TIOCMGET</tt> was used to get the line setting values
of the kernel, and as of the 2.6 kernel, this
<span class="docEmphasis">ioctl</span> call has been turned into a tty driver
callback function called <span class="docEmphasis">tiocmget</span>. The other
three <span class="docEmphasis">ioctls</span> have been simplified and are now
represented with a single tty driver callback function called
<span class="docEmphasis">tiocmset</span><a name="chp-18-ITERM-7972"></a>
<a name="chp-18-ITERM-7973"></a>.</p>

<p class="docText">The <span class="docEmphasis">tiocmget</span><a name="chp-18-ITERM-7974"></a>
<a name="chp-18-ITERM-7975"></a>
function in the tty driver is called by the tty core when the core
wants to know the current physical values of the control lines of a
specific tty device. This is usually done to retrieve the values of
the DTR and RTS lines of a serial port. If the tty driver cannot
directly read the MSR or MCR registers of the serial port, because
the hardware does not allow this, a copy of them should be kept
locally. A number of the USB-to-serial drivers must implement this
kind of "shadow" variable. Here is
how this function could be implemented if a local copy of these
values are kept:</P>

<pre>static int tiny_tiocmget(struct tty_struct *tty, struct file *file)
{
    struct tiny_serial *tiny = tty-&gt;driver_data;

    unsigned int result = 0;
    unsigned int msr = tiny-&gt;msr;
    unsigned int mcr = tiny-&gt;mcr;

    result = ((mcr &amp; MCR_DTR)  ? TIOCM_DTR  : 0) |  /* DTR is set */
             ((mcr &amp; MCR_RTS)  ? TIOCM_RTS  : 0) |  /* RTS is set */
             ((mcr &amp; MCR_LOOP) ? TIOCM_LOOP : 0) |  /* LOOP is set */
             ((msr &amp; MSR_CTS)  ? TIOCM_CTS  : 0) |  /* CTS is set */
             ((msr &amp; MSR_CD)   ? TIOCM_CAR  : 0) |  /* Carrier detect is set*/
             ((msr &amp; MSR_RI)   ? TIOCM_RI   : 0) |  /* Ring Indicator is set */
             ((msr &amp; MSR_DSR)  ? TIOCM_DSR  : 0);   /* DSR is set */

    return result;
}</pre><br>


<p class="docText">The <span class="docEmphasis">tiocmset</span> function in the tty driver is
called by the tty core when the core wants to set the values of the
control lines of a specific tty device. The tty core tells the tty
driver what values to set and what to clear, by passing them in two
variables: <tt>set</tt> and <tt>clear</tt>. These
variables contain a bitmask of the lines settings that should be
changed. An <span class="docEmphasis">ioctl</span> call never asks the driver to
both set and clear a particular bit at the same time, so it does not
matter which operation occurs first. Here is an example of how this
function could be implemented by a tty driver:</P>

<pre>static int tiny_tiocmset(struct tty_struct *tty, struct file *file,
                         unsigned int set, unsigned int clear)
{
    struct tiny_serial *tiny = tty-&gt;driver_data;
    unsigned int mcr = tiny-&gt;mcr;

    if (set &amp; TIOCM_RTS)
        mcr |= MCR_RTS;
    if (set &amp; TIOCM_DTR)
        mcr |= MCR_RTS;

    if (clear &amp; TIOCM_RTS)
        mcr &amp;= ~MCR_RTS;
    if (clear &amp; TIOCM_DTR)
        mcr &amp;= ~MCR_RTS;

    /* set the new MCR value in the device */
    tiny-&gt;mcr = mcr;
    return 0;
}</pre><BR>




<ul></ul></td></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-18-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-18-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
