<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>5.6. Locking Traps</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-5-sect-5.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-5-sect-7.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-5-sect-6"></a>
<h3 class="docSection1Title">5.6. Locking Traps</h3>

<p class="docText">Many years of <a name="chp-5-ITERM-5033"></a>
<a name="chp-5-ITERM-5034"></a>
<a name="chp-5-ITERM-5035"></a> <a name="chp-5-ITERM-5036"></a> <a name="chp-5-ITERM-5037"></a> <a name="chp-5-ITERM-5038"></a>experience
with locks—experience that predates Linux—have shown that
locking can be very hard to get right. Managing concurrency is an
inherently tricky undertaking, and there are many ways of making
mistakes. In this section, we take a quick look at things that can go
wrong.</p>

<a name="chp-5-sect-6.1"></a>
<h4 class="docSection2Title">5.6.1. Ambiguous Rules</H4>

<p class="docText">As has already been said above, a proper locking
<a name="chp-5-ITERM-5039"></a>scheme
requires clear and explicit rules. When you create a resource that
can be accessed concurrently, you should define which lock will
control that access. Locking should really be laid out at the
beginning; it can be a hard thing to retrofit in afterward. Time
taken at the outset usually is paid back generously at debugging
time.</P>

<p class="docText">As you write your code, you will doubtless encounter several
functions that all require access
to<a name="chp-5-ITERM-5040"></a>
<a name="chp-5-ITERM-5041"></a>
<a name="chp-5-ITERM-5042"></a>
<a name="chp-5-ITERM-5043"></a> structures protected by a specific
lock. At this point, you must be careful: if one function acquires a
lock and then calls another function that also attempts to acquire
the lock, your code deadlocks. Neither semaphores nor spinlocks allow
a lock holder to acquire the lock a second time; should you attempt
to do so, things simply hang.</P>

<p class="docText">To make your locking work properly, you have to write some functions
with the assumption that their caller has already acquired the
relevant lock(s). Usually, only your internal, static functions can
be written in this way; functions called from outside must handle
locking explicitly. When you write internal functions that make
assumptions about locking, do yourself (and anybody else who works
with your code) a favor and document those assumptions explicitly. It
can be very hard to come back months later and figure out whether you
need to hold a lock to call a particular function or not.</p>

<p class="docText">In the case of <span class="docEmphasis">scull</span>, the design decision taken
was to require all functions invoked directly from system calls to
acquire the semaphore applying to the device structure that is
accessed. All internal functions, which are only called from other
<span class="docEmphasis">scull</span> functions, can then assume that the
semaphore has been properly acquired.</P>


<a name="chp-5-sect-6.2"></a>
<H4 class="docSection2Title">5.6.2. Lock Ordering Rules</h4>

<p class="docText">In systems with a large
<a name="chp-5-ITERM-5044"></a>
<a name="chp-5-ITERM-5045"></a>
<a name="chp-5-ITERM-5046"></a>number of locks (and the kernel is
becoming such a system), it is not unusual for code to need to hold
more than one lock at once. If some sort of computation must be
performed using two different resources, each of which has its own
lock, there is often no alternative to acquiring both locks.</p>

<p class="docText">Taking multiple locks can be dangerous, however. If you have two
locks, called <span class="docEmphasis">Lock1</span> and
<span class="docEmphasis">Lock2</span>, and code needs to acquire both at the
same time, you have a potential deadlock. Just imagine one thread
locking <span class="docEmphasis">Lock1</span> while another simultaneously takes
<span class="docEmphasis">Lock2</span>. Then each thread tries to get the one it
doesn't have. Both
threads<a name="chp-5-ITERM-5047"></a> will
deadlock.</p>

<p class="docText">The solution to this problem is usually simple: when multiple locks
must be acquired, they should always be acquired in the same order.
As long as this convention is followed, simple deadlocks like the one
described above can be avoided. However, following lock ordering
rules can be easier said than done. It is very rare that such rules
are actually written down anywhere. Often the best you can do is to
see what other code does.</p>

<p class="docText">A couple of rules of thumb can help. If you must obtain a lock that
is local to your code (a device lock, say) along with a lock
belonging to a more central part of the kernel, take your lock first.
If you have a combination of semaphores and spinlocks, you must, of
course, obtain the semaphore(s) first; calling
<span class="docEmphasis">down</span> (which can sleep) while holding a spinlock
is a serious error. But most of all, try to avoid situations where
you need more than one lock.</P>


<a name="chp-5-sect-6.3"></a>
<h4 class="docSection2Title">5.6.3. Fine- Versus Coarse-Grained Locking</h4>

<p class="docText">The first Linux kernel that supported
<a name="chp-5-ITERM-5048"></a>
<a name="chp-5-ITERM-5049"></a>multiprocessor systems was 2.0; it
contained exactly one spinlock. The <I>big kernel
lock</i> turned the entire kernel into one large critical
section; only one CPU could be executing kernel code at any given
time. This lock solved the concurrency problem well enough to allow
the kernel developers to address all of the other issues involved in
supporting SMP. But it did not scale very well. Even a two-processor
system could spend a significant amount of time simply waiting for
the big kernel lock. The performance of a four-processor system was
not even close to that of four independent machines.</p>

<p class="docText">So, subsequent kernel releases have included finer-grained locking.
In 2.2, one spinlock controlled access to the block I/O subsystem;
another worked for networking, and so on. A modern kernel can contain
thousands of locks, each protecting one small resource. This sort of
fine-grained locking can be good for scalability; it allows each
processor to work on its specific task without contending for locks
used by other processors. Very few people miss the big kernel
lock.<sup class="docFootnote"><a class="docLink" href="chp-5-sect-6.shtml#chp-5-FNOTE-3">[3]</a></sup></P><blockquote><p class="docFootnote"><sup><a name="chp-5-FNOTE-3">[3]</a></sup> This lock still exists in 2.6, though it covers
very little of the kernel now. If you stumble across a
<span class="docEmphasis">lock_kernel</span> call, you have found the big kernel
lock. Do not even think about using it in any new code,
however.</p></blockquote>

<p class="docText">Fine-grained locking comes at a cost, however. In a kernel with
thousands of locks, it can be very hard to know which locks you
need—and in which order you should acquire them—to
perform a specific operation. Remember that locking bugs can be very
difficult to find; more locks provide more opportunities for truly
nasty locking bugs to creep into the kernel. Fine-grained locking can
bring a level of complexity that, over the long term, can have a
large, adverse effect on the maintainability of the kernel.</P>

<p class="docText">Locking in a device driver is usually relatively straightforward; you
can have a single lock that covers everything you do, or you can
create one lock for every device you manage. As a general rule, you
should start with relatively coarse locking unless you have a real
reason to believe that contention could be a problem. Resist the urge
to optimize prematurely; the real performance constraints often show
up in unexpected places.</p>

<p class="docText">If you do suspect that lock contention is hurting performance, you
may find the
<span class="docEmphasis">lockmeter</span><a name="chp-5-ITERM-5050"></a>
<a name="chp-5-ITERM-5051"></a>
tool useful. This patch (available at <a class="docLink" target="_blank" href="http://oss.sgi.com/projects/lockmeter/">http://oss.sgi.com/projects/lockmeter/</a>)
instruments the kernel to measure time spent waiting in locks. By
looking at the report, you are able to determine quickly whether lock
contention is <a name="chp-5-ITERM-5052"></a> <a name="chp-5-ITERM-5053"></a> <a name="chp-5-ITERM-5054"></a> <a name="chp-5-ITERM-5055"></a> <a name="chp-5-ITERM-5056"></a> <a name="chp-5-ITERM-5057"></a>truly the problem or not.</p>



<ul></ul></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-5-sect-5.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-5-sect-7.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
