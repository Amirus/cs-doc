<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>17.11. MAC Address Resolution</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-17-sect-10.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-17-sect-12.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-17-sect-11"></a>
<h3 class="docSection1Title">17.11. MAC Address Resolution</H3>

<p class="docText"><a name="chp-17-ITERM-7803"></a> <a name="chp-17-ITERM-7804"></a>
<a name="chp-17-ITERM-7805"></a> <a name="chp-17-ITERM-7806"></a><a name="chp-17-ITERM-7807"></a><a name="chp-17-ITERM-7808"></a><a name="chp-17-ITERM-7809"></a><a name="chp-17-ITERM-7810"></a>An
interesting issue with Ethernet communication is how to associate the
MAC addresses (the interface's unique hardware ID)
with the IP number. Most protocols have a similar problem, but we
concentrate on the Ethernet-like case here. We try to offer a
complete description of the issue, so we show three situations: ARP,
Ethernet headers without ARP (such as <span class="docEmphasis">plip</span>), and
non-Ethernet headers.</p>

<a name="chp-17-sect-11.1"></a>
<h4 class="docSection2Title">17.11.1. Using ARP with Ethernet</H4>

<p class="docText"><a name="chp-17-ITERM-7811"></a>
<a name="chp-17-ITERM-7812"></a><a name="chp-17-ITERM-7813"></a>The usual way to deal with address
resolution is by using the Address Resolution Protocol (ARP).
Fortunately, ARP is managed by the kernel, and an Ethernet interface
doesn't need to do anything special to support ARP.
As long as <tt>dev-&gt;addr</tt> and
<tt>dev-&gt;addr_len</tt> are correctly assigned at open
time, the driver doesn't need to worry about
resolving IP numbers to MAC addresses;
<span class="docEmphasis">ether_setup</span> assigns the correct device methods
to <tt>dev-&gt;hard_header</tt> and
<tt>dev-&gt;rebuild_header</tt>.</p>

<p class="docText">Although the kernel normally handles the details of address
resolution (and caching of the results), it calls upon the interface
driver to help in the building of the packet. After all, the driver
knows about the details of the physical layer header, while the
authors of the networking code have tried to insulate the rest of the
kernel from that knowledge. To this end, the kernel calls the
driver's
<span class="docEmphasis">hard_header</span><a name="chp-17-ITERM-7814"></a>
<a name="chp-17-ITERM-7815"></a>
method to lay out the packet with the results of the ARP query.
Normally, Ethernet driver writers need not know about this
processâ€”the common Ethernet code takes care of everything.</P>


<a name="chp-17-sect-11.2"></a>
<h4 class="docSection2Title">17.11.2. Overriding ARP</h4>

<p class="docText"><a name="chp-17-ITERM-7816"></a>
<a name="chp-17-ITERM-7817"></a><a name="chp-17-ITERM-7818"></a>Simple point-to-point network
interfaces, such as <span class="docEmphasis">plip</span>, might benefit from
using Ethernet headers, while avoiding the overhead of sending ARP
packets back and forth. The sample code in <span class="docEmphasis">snull</span>
also falls into this class of network devices.
<span class="docEmphasis">snull</span> cannot use ARP because the driver changes
IP addresses in packets being transmitted, and ARP packets exchange
IP addresses as well. Although we could have implemented a simple ARP
reply generator with little trouble, it is more illustrative to show
how to handle physical-layer headers directly.</p>

<p class="docText"><a name="chp-17-ITERM-7819"></a>
<a name="chp-17-ITERM-7820"></a>If
your device wants to use the usual hardware header without running
ARP, you need to override the default
<span class="docEmphasis">dev-&gt;hard_header</span> method. This is how
<span class="docEmphasis">snull</span> implements it, as a very short function:</p>

<pre>int snull_header(struct sk_buff *skb, struct net_device *dev,
                unsigned short type, void *daddr, void *saddr,
                unsigned int len)
{
    struct ethhdr *eth = (struct ethhdr *)skb_push(skb,ETH_HLEN);

    eth-&gt;h_proto = htons(type);
    memcpy(eth-&gt;h_source, saddr ? saddr : dev-&gt;dev_addr, dev-&gt;addr_len);
    memcpy(eth-&gt;h_dest,   daddr ? daddr : dev-&gt;dev_addr, dev-&gt;addr_len);
    eth-&gt;h_dest[ETH_ALEN-1]   ^= 0x01;   /* dest is us xor 1 */
    return (dev-&gt;hard_header_len);
}</pre><br>


<p class="docText">The function simply takes the information provided by the kernel and
formats it into a standard Ethernet header. It also toggles a bit in
the destination Ethernet address, for reasons described later.</p>

<p class="docText">When a packet is received by the interface, the hardware header is
used in a couple of ways by <span class="docEmphasis">eth_type_trans</span>. We
have already seen this call in <span class="docEmphasis">snull_rx</span>:</p>

<pre>skb-&gt;protocol = eth_type_trans(skb, dev);</pre><br>


<p class="docText">The function extracts the protocol identifier
(<tt>ETH_P_IP</tt>, in this case) from the Ethernet header;
it also assigns <tt>skb-&gt;mac.raw</tt>, removes the
hardware header from packet data (with
<span class="docEmphasis">skb_pull</span>), and sets
<tt>skb-&gt;pkt_type</tt>. This last item defaults to
<tt>PACKET_HOST</tt> at <tt>skb</tt> allocation
(which indicates that the packet is directed to this host), and
<span class="docEmphasis">eth_type_trans</span> changes it to reflect the
Ethernet destination address: if that address does not match the
address of the interface that received it, the
<tt>pkt_type</tt> field is set to
<tt>PACKET_OTHERHOST</tt>. Subsequently, unless the
interface is in promiscuous mode or packet forwarding is enabled in
the kernel, <span class="docEmphasis">netif_rx</span> drops any packet of type
<tt>PACKET_OTHERHOST</tt>. For this reason,
<span class="docEmphasis">snull_header</span> is careful to make the destination
hardware address match that of the
"receiving" interface.</p>

<p class="docText">If your interface is a point-to-point link, you
won't want to receive unexpected multicast packets.
To avoid this problem, remember that a destination address whose
first octet has <tt>0</tt> as the least significant bit
(LSB) is directed to a single host (i.e., it is either
<tt>PACKET_HOST</tt> or
<tt>PACKET_OTHERHOST</tt>). The <span class="docEmphasis">plip</span>
driver uses <tt>0xfc</tt> as the first octet of its
hardware address, while <span class="docEmphasis">snull</span> uses
<tt>0x00</tt>. Both addresses result in a working
Ethernet-like point-to-point link.</p>


<a name="chp-17-sect-11.3"></a>
<h4 class="docSection2Title">17.11.3. Non-Ethernet Headers</h4>

<p class="docText"><a name="chp-17-ITERM-7821"></a> <a name="chp-17-ITERM-7822"></a>
<a name="chp-17-ITERM-7823"></a><a name="chp-17-ITERM-7824"></a><a name="chp-17-ITERM-7825"></a>We have just seen that the hardware
header contains some information in addition to the destination
address, the most important being the communication protocol. We now
describe how hardware headers can be used to encapsulate relevant
information. If you need to know the details, you can extract them
from the kernel sources or the technical documentation for the
particular transmission medium. Most driver writers are able to
ignore this discussion and just use the Ethernet implementation.</p>

<p class="docText">It's worth noting that not all information has to be
provided by every protocol. A point-to-point link such as
<span class="docEmphasis">plip</span> or <span class="docEmphasis">snull</span> could avoid
transferring the whole Ethernet header without losing generality. The
<span class="docEmphasis">hard_header</span> device method, shown earlier as
implemented by <span class="docEmphasis">snull_header</span>, receives the
delivery informationâ€”both protocol-level and hardware
addressesâ€”from the kernel. It also receives the 16-bit protocol
number in the <tt>type</tt> argument; IP, for example, is
identified by <tt>ETH_P_IP</tt>. The driver is expected to
correctly deliver both the packet data and the protocol number to the
receiving host. A point-to-point link could omit addresses from its
hardware header, transferring only the protocol number, because
delivery is guaranteed independent of the source and destination
addresses. An IP-only link could even avoid transmitting any hardware
header whatsoever.</P>

<p class="docText">When the packet is picked up at the other end of the link, the
receiving function in the driver should correctly set the fields
<tt>skb-&gt;protocol</tt>,
<tt>skb-&gt;pkt_type</tt>, and
<tt>skb-&gt;mac.raw</tt>.</p>

<p class="docText"><tt>skb-&gt;mac.raw</tt> is a char pointer used by the
address-resolution mechanism implemented in higher layers of the
networking code (for instance, <I>net/ipv4/arp.c</I>).
It must point to a machine address that matches
<tt>dev-&gt;type</tt>. The possible values for the device
type are defined in <span class="docEmphasis">&lt;linux/if_arp.h&gt;</span>;
Ethernet interfaces use <tt>ARPHRD_ETHER</tt>. For example,
here is how <span class="docEmphasis">eth_type_trans</span> deals with the
Ethernet header for received packets:</p>

<pre>skb-&gt;mac.raw = skb-&gt;data;
skb_pull(skb, dev-&gt;hard_header_len);</pre><br>


<p class="docText">In the simplest case (a point-to-point link with no headers),
<tt>skb-&gt;mac.raw</tt> can point to a static buffer
containing the hardware address of this interface,
<tt>protocol</tt> can be set to
<tt>ETH_P_IP</tt>, and <tt>packet_type</tt> can
be left with its default value of <tt>PACKET_HOST</tt>.</p>

<p class="docText">Because every hardware type is<a name="chp-17-ITERM-7826"></a> <a name="chp-17-ITERM-7827"></a> <a name="chp-17-ITERM-7828"></a> <a name="chp-17-ITERM-7829"></a> unique, it is hard to give more
specific advice than already discussed. The kernel is full of
examples, however. See, for example, the AppleTalk driver
(<I>drivers/net/appletalk/cops.c</i>), the infrared
drivers (such as <I>drivers/net/irda/smc_ircc.c</I>),
or the PPP driver (<I>drivers/net/ppp_generic.c</i>).</p>



<ul></ul></TD></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-17-sect-10.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-17-sect-12.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
