<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>1.2. Splitting the Kernel</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-1-sect-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-1-sect-3.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-1-sect-2"></a>
<h3 class="docSection1Title">1.2. Splitting the Kernel</h3>

<p class="docText">In a Unix system, <a name="chp-1-ITERM-3979"></a> <a name="chp-1-ITERM-3980"></a>
<a name="chp-1-ITERM-3981"></a>several concurrent
<i>processes</i> attend to different tasks. Each
process asks for system resources, be it computing power, memory,
network connectivity, or some other resource. The
<span class="docEmphasis">kernel</span> is the big chunk of executable code in
charge of handling all such requests. Although the distinction
between the different kernel tasks isn't always
clearly marked, the kernel's role can be split (as
shown in <a class="docLink" href="chp-1-sect-2.shtml#chp-1-FIG-1">Figure 1-1</a>) into the
following parts:</P>

<a name="chp-1-ITERM-3982"></a><a name="chp-1-ITERM-3983"></a><a name="chp-1-ITERM-3984"></a><a name="chp-1-ITERM-3985"></a><a name="chp-1-ITERM-3986"></a><a name="chp-1-ITERM-3987"></a><a name="chp-1-ITERM-3988"></a><a name="chp-1-ITERM-3989"></a><a name="chp-1-ITERM-3990"></a><a name="chp-1-ITERM-3991"></a><a name="chp-1-ITERM-3992"></a><a name="chp-1-ITERM-3993"></a><a name="chp-1-ITERM-3994"></a><a name="chp-1-ITERM-3995"></a><a name="chp-1-ITERM-3996"></a><a name="chp-1-ITERM-3997"></a><a name="chp-1-ITERM-3998"></a><a name="chp-1-ITERM-3999"></a><a name="chp-1-ITERM-4000"></a><a name="chp-1-ITERM-4001"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docEmphasis">Process management</span></span></dt></p>
<dd>
<p class="docList"><a name="chp-1-ITERM-3982"></a>The
kernel is in charge
<a name="chp-1-ITERM-3983"></a>
<a name="chp-1-ITERM-3984"></a>
<a name="chp-1-ITERM-3985"></a>
<a name="chp-1-ITERM-3986"></a>
<a name="chp-1-ITERM-3987"></a>
<a name="chp-1-ITERM-3988"></a>of creating and
destroying processes and handling their connection to the outside
world (input and output). Communication among different processes
(through signals, pipes, or interprocess communication primitives) is
basic to the overall system functionality and is also handled by the
kernel. In addition, the scheduler, which controls how processes
share the CPU, is part of process management. More generally, the
kernel's process management activity implements the
abstraction of several processes on top of a single CPU or a few of
them.</P>
</dd>
<dt><span class="docPubcolor"><span class="docEmphasis">Memory management</span></span></dt></p>
<dd>
<p class="docList">The computer's memory is a
<a name="chp-1-ITERM-3989"></a>
<a name="chp-1-ITERM-3990"></a>major resource, and the policy used
to deal with it is a critical one for system performance. The kernel
builds up a virtual addressing space for any and all processes on top
of the limited available resources. The different parts of the kernel
interact with the memory-management subsystem through a set of
function calls, ranging from the simple
<span class="docEmphasis">malloc</span>/<span class="docEmphasis">free</span> pair to much
more complex functionalities.</p>
</dd>
<dt><span class="docPubcolor"><span class="docEmphasis">Filesystems</span></span></dt></p>
<dd>
<p class="docList"><a name="chp-1-ITERM-3991"></a>Unix
is heavily based on
the<a name="chp-1-ITERM-3992"></a>
filesystem concept; almost everything in Unix can be treated as a
file. The kernel builds a structured filesystem on top of
unstructured hardware, and the resulting file abstraction is heavily
used throughout the whole system. In addition, Linux supports
multiple filesystem types, that is, different ways of organizing data
on the physical medium. For example, disks may be formatted with the
Linux-standard ext3 filesystem, the commonly used FAT filesystem or
several others.</p>
</dd>
<dt><span class="docPubcolor"><span class="docEmphasis">Device control</span></span></dt></p>
<dd>
<p class="docList"><a name="chp-1-ITERM-3993"></a>Almost every system operation
eventually maps to a physical device. With the exception of the
processor, memory, and a very few other entities, any and all device
control operations are performed by code that is specific to the
device being addressed. That code is called a <I>device
driver</i>. The kernel must have embedded in it a device
driver for every peripheral present on a system, from the hard drive
to the keyboard and the tape drive. This aspect of the
kernel's functions is our primary interest in this
book.</P>
</dd>
<dt><span class="docPubcolor"><span class="docEmphasis">Networking</span></span></dt></p>
<dd>
<p class="docList"><a name="chp-1-ITERM-3994"></a>Networking must
be<a name="chp-1-ITERM-3995"></a>
<a name="chp-1-ITERM-3996"></a>
<a name="chp-1-ITERM-3997"></a>
managed by the operating system, because most network operations are
not specific to a process: incoming packets are asynchronous events.
The packets must be collected, identified, and dispatched before a
process takes care of them. The system is in charge of delivering
data packets across program and network interfaces, and it must
control the execution of programs according to their network
activity. Additionally, all the<a name="chp-1-ITERM-3998"></a>
<a name="chp-1-ITERM-3999"></a> routing
<a name="chp-1-ITERM-4000"></a>
<a name="chp-1-ITERM-4001"></a>and address
resolution issues are implemented within the kernel.</p>
</dd>
</dl>

<a name="chp-1-FIG-1"></a><p><center>
<h5 class="docFigureTitle">Figure 1-1. A split view of the kernel</h5>
<img border="0" alt="" width="468" height="431" SRC="images/0596005903/figs/ldr3_0101.gif"></center></p><br>

<a name="chp-1-sect-2.1"></a>
<h4 class="docSection2Title">1.2.1. Loadable Modules</h4>

<p class="docText">One of the good features of<a name="chp-1-ITERM-4002"></a> Linux is the ability to extend at
runtime the set of features offered by the kernel. This means that
you can add functionality to the kernel (and remove functionality as
well) while the system is up and running.</p>

<p class="docText"><a name="chp-1-ITERM-4003"></a><a name="chp-1-ITERM-4004"></a><a name="chp-1-ITERM-4005"></a>Each piece of code that can be added to
the kernel at runtime is called a
<i>module</I><a name="chp-1-ITERM-4006"></a>
<a name="chp-1-ITERM-4007"></a>
<a name="chp-1-ITERM-4008"></a>. The Linux
kernel offers support for quite a few different types (or classes) of
modules, including, but not limited to, device drivers. Each module
is made up of object code (not linked into a complete executable)
that can be dynamically linked to the running kernel by the
<span class="docEmphasis">insmod</span><a name="chp-1-ITERM-4009"></a>
<a name="chp-1-ITERM-4010"></a>
program and can be unlinked by the<a name="chp-1-ITERM-4011"></a>
<a name="chp-1-ITERM-4012"></a>
<span class="docEmphasis">rmmod</span> program.</p>

<p class="docText"><a class="docLink" href="chp-1-sect-2.shtml#chp-1-FIG-1">Figure 1-1</a> identifies different
classes of modules in charge of specific tasks—a module is said
to belong to a specific class according to the functionality it
offers. The placement of modules in <a class="docLink" href="chp-1-sect-2.shtml#chp-1-FIG-1">Figure 1-1</a> covers the most important
classes, but is far from complete because more and more
functionality<a name="chp-1-ITERM-4013"></a> <a name="chp-1-ITERM-4014"></a> <a name="chp-1-ITERM-4015"></a> in Linux is being modularized.</P>



<UL></ul></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-1-sect-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-1-sect-3.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
