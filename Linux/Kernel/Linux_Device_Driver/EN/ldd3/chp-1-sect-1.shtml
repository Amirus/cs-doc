<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>1.1. The Role of the Device Driver</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-1-sect-2.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-1-sect-1"></a>
<h3 class="docSection1Title">1.1. The Role of the Device Driver</h3>

<p class="docText">As a programmer, you are<a name="chp-1-ITERM-3962"></a>
<a name="chp-1-ITERM-3963"></a> able to make your own choices
about your driver, and choose an acceptable trade-off between the
programming time required and the flexibility of the result. Though
it may appear strange to say that a driver is
"flexible," we like this word
because it emphasizes that the role of a device driver is providing
<a name="chp-1-ITERM-3964"></a><span class="docEmphasis">mechanism</span>, not
<span class="docEmphasis">policy</span>.<a name="chp-1-ITERM-3965"></a></p>

<p class="docText">The distinction between mechanism and policy is one of the best ideas
behind the Unix design. Most programming problems can indeed be split
into two parts: "what capabilities are to be
provided" (the mechanism) and "how
those capabilities can be used" (the policy). If the
two issues are addressed by different parts of the program, or even
by different programs altogether, the software package is much easier
to develop and to adapt to particular needs.</p>

<p class="docText">For example, Unix management of the graphic display is split between
the X server, which knows the hardware and offers a unified interface
to user programs, and the window and session managers, which
implement a particular policy without knowing anything about the
hardware. People can use the same window manager on different
hardware, and different users can run different configurations on the
same workstation. Even completely different desktop environments,
such as KDE and GNOME, can coexist on the same system. Another
example is the layered structure of TCP/IP networking: the operating
system offers the socket abstraction, which implements no policy
regarding the data to be transferred, while different servers are in
charge of the services (and their associated policies). Moreover, a
server like <span class="docEmphasis">ftpd</span> provides the file transfer
mechanism, while users can use whatever client they prefer; both
command-line and graphic clients exist, and anyone can write a new
user interface to transfer files.</P>

<p class="docText">Where drivers are concerned, the same separation of mechanism and
policy applies. The floppy driver is policy freeâ€”its role is
only to show the diskette as a continuous array of data blocks.
Higher levels of the system provide policies, such as who may access
the floppy drive, whether the drive is accessed directly or via a
filesystem, and whether users may mount filesystems on the drive.
Since different environments usually need to use hardware in
different ways, it's important to be as policy free
as possible.</P>

<p class="docText">When writing drivers, a programmer
<a name="chp-1-ITERM-3966"></a>should
pay particular attention to this fundamental concept: write kernel
code to access the hardware, but don't force
particular policies on the user, since different users have different
needs. The driver should deal with making the hardware available,
leaving all the issues about <span class="docEmphasis">how</span> to use the
hardware to the applications. A driver, then, is flexible if it
offers access to the hardware capabilities without adding
constraints. Sometimes, however, some policy decisions must be made.
For example, a digital I/O driver may only offer byte-wide access to
the hardware in order to avoid the extra code needed to handle
individual bits.</P>

<p class="docText">You can also look at your driver from a different perspective: it is
a software layer that lies between the applications and the actual
device. This privileged role of the driver allows the driver
programmer to choose exactly how the device should appear: different
drivers can
<a name="chp-1-ITERM-3967"></a>offer different capabilities, even for
the same device. The actual driver design should be a balance between
many different considerations. For instance, a single device may be
used concurrently by different programs, and the driver programmer
has complete freedom to determine how to handle concurrency. You
could implement memory mapping on the device independently of its
hardware capabilities, or you could provide a user library to help
application
programmers<a name="chp-1-ITERM-3968"></a> implement new
policies on top of the available primitives, and so forth. One major
consideration is the trade-off between the desire to present the user
with as many options as possible and the time you have to write the
driver, as well as the need to keep things simple so that errors
don't creep in.</p>

<p class="docText">Policy-free drivers have a number of typical characteristics. These
include support for both synchronous and asynchronous operation, the
ability to be opened multiple times, the ability to exploit the full
capabilities of the hardware, and the lack of software layers to
"simplify things" or provide
policy-related operations. Drivers of this sort not only work better
for their end users, but also turn out to be easier to write and
maintain as well. Being policy-free is actually a common target for
software designers.</P>

<p class="docText"><a name="chp-1-ITERM-3969"></a>
<a name="chp-1-ITERM-3970"></a>Many
device drivers, indeed, are released together with
<a name="chp-1-ITERM-3971"></a>
<a name="chp-1-ITERM-3972"></a>
<a name="chp-1-ITERM-3973"></a>user programs to
help with configuration and access to the target device. Those
programs can range from simple utilities to complete graphical
applications. Examples include the
<span class="docEmphasis">tunelp</span><a name="chp-1-ITERM-3974"></a> program, which adjusts how the parallel
port printer driver operates, and the graphical
<span class="docEmphasis">cardctl</span><a name="chp-1-ITERM-3975"></a> utility that is part of the PCMCIA
driver package. Often a client library is provided as well, which
provides capabilities that do not need to be implemented as part of
the driver itself.</P>

<p class="docText">The scope of this book is the kernel, so we try not to deal with
policy issues or with application programs or support libraries.
Sometimes we talk about different policies and how to support them,
but we won't go into much detail about programs
using the device or the policies they enforce. You should understand,
however, that user programs are an integral part of a software
package and that even policy-free packages are distributed with
<a name="chp-1-ITERM-3976"></a>
<a name="chp-1-ITERM-3977"></a>configuration files that apply a
default behavior to the underlying mechanisms.<a name="chp-1-ITERM-3978"></a></p>


<ul></ul></td></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-1-sect-2.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
