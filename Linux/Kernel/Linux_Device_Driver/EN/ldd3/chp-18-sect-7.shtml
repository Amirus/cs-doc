<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>18.7. The tty_operations Structure in Detail</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-18-sect-6.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-18-sect-8.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-18-sect-7"></a>
<H3 class="docSection1Title" >18.7. The tty_operations Structure in Detail</H3>

<p class="docText">The <tt>tty_operations</tt>
structure<a name="chp-18-ITERM-8001"></a>
<a name="chp-18-ITERM-8002"></a> <a name="chp-18-ITERM-8003"></a>
<a name="chp-18-ITERM-8004"></a>
<a name="chp-18-ITERM-8005"></a> contains all of the function
callbacks that can be set by a tty driver and called by the tty core.
Currently, all of the function pointers contained in this structure
are also in the <tt>tty_driver</tt> structure, but that
will be replaced soon with only an instance of this structure.</p>

<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*open)(struct tty_struct * tty, struct file * filp);</span></span> </span></dt></p>
<dd>
<p class="docList">The <span class="docEmphasis">open</span> function.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*close)(struct tty_struct * tty, struct file * filp);</span></span> </span></dt></P>
<dd>
<p class="docList">The <span class="docEmphasis">close</span> function.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*write)(struct tty_struct * tty, const unsigned char *buf, int count);</span></span> </span></dt></p>
<dd>
<p class="docList">The <span class="docEmphasis">write</span> function.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*put_char)(struct tty_struct *tty, unsigned char ch);</span></span> </span></dt></p>
<dd>
<p class="docList">The single-character <span class="docEmphasis">write</span> function. This
function is called by the tty core when a single character is to be
written to the device. If a tty driver does not define this function,
the <span class="docEmphasis">write</span> function is called instead when the
tty core wants to send a single character.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*flush_chars)(struct tty_struct *tty);</span></span> </span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*wait_until_sent)(struct tty_struct *tty, int timeout);</span></span> </span></dt></p>
<dd>
<p class="docList">The function that flushes data to the hardware.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*write_room)(struct tty_struct *tty);</span></span> </span></dt></P>
<dd>
<p class="docList">The function that indicates how much of the buffer is free.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*chars_in_buffer)(struct tty_struct *tty);</span></span> </span></dt></p>
<dd>
<p class="docList">The function that indicates how much of the buffer is full of data.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*ioctl)(struct tty_struct *tty, struct file * file, unsigned int cmd</span></span>, </span></dt></p>
<dt><span class="docPubcolor">             <span class="docPubcolor"><span class="docMonofont">unsigned long arg);</span></span>  </span></dt></P>
<dd>
<p class="docList">The <span class="docEmphasis">ioctl</span> function. This function is called by
the tty core when <span class="docEmphasis">ioctl(2)</span> is called on the
device node.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*set_termios)(struct tty_struct *tty, struct termios * old);</span></span> </span></dt></p>
<dd>
<p class="docList">The <span class="docEmphasis">set_termios</span> function. This function is
called by the tty core when the device's termios
settings have been changed.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*throttle)(struct tty_struct * tty);</span></span> </span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*unthrottle)(struct tty_struct * tty);</span></span> </span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*stop)(struct tty_struct *tty);</span></span> </span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*start)(struct tty_struct *tty);</span></span> </span></dt></p>
<dd>
<p class="docList">Data-throttling functions. These functions are used to help control
overruns of the tty core's input buffers. The
<span class="docEmphasis">throttle</span> function is called when the tty
core's input buffers are getting full. The tty
driver should try to signal to the device that no more characters
should be sent to it. The <span class="docEmphasis">unthrottle</span> function is
called when the tty core's input buffers have been
emptied out, and it can now accept more data. The tty driver should
then signal to the device that data can be received. The
<span class="docEmphasis">stop</span> and <span class="docEmphasis">start</span> functions
are much like the <span class="docEmphasis">throttle</span> and
<span class="docEmphasis">unthrottle</span> functions, but they signify that the
tty driver should stop sending data to the device and then later
resume sending data.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*hangup)(struct tty_struct *tty);</span></span> </span></dt></P>
<dd>
<p class="docList">The <span class="docEmphasis">hangup</span> function. This function is called
when the tty driver should hang up the tty device. Any special
hardware manipulation needed to do this should occur at this time.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*break_ctl)(struct tty_struct *tty, int state);</span></span> </span></dt></p>
<dd>
<p class="docList">The <span class="docEmphasis">line break</span> control function. This function
is called when the tty driver is to turn on or off the line BREAK
status on the RS-232 port. If state is set to <tt>-1</tt>,
the BREAK status should be turned on. If state is set to
<tt>0</tt>, the BREAK status should be turned off. If this
function is implemented by the tty driver, the tty core will handle
the <tt>TCSBRK</tt>, <tt>TCSBRKP</tt>,
<tt>TIOCSBRK</tt>, and <tt>TIOCCBRK</tt>
<span class="docEmphasis">ioctl</span>s. Otherwise, these
<span class="docEmphasis">ioctl</span>s are sent to the driver to the
<span class="docEmphasis">ioctl</span> function.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*flush_buffer)(struct tty_struct *tty);</span></span> </span></dt></p>
<dd>
<p class="docList">Flush buffer and lose any remaining data.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*set_ldisc)(struct tty_struct *tty);</span></span> </span></dt></p>
<dd>
<p class="docList">The <span class="docEmphasis">set line discipline</span> function. This function
is called when the tty core has changed the line discipline of the
tty driver. This function is generally not used and should not be
defined by a driver.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void (*send_xchar)(struct tty_struct *tty, char ch);</span></span> </span></dt></P>
<dd>
<p class="docList">Send <span class="docEmphasis">X-type char</span> function. This function is used
to send a high-priority XON or XOFF character to the tty device. The
character to be sent is specified in the <tt>ch</tt>
variable.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*read_proc)(char *page, char **start, off_t off, int count, int *eof</span></span>, </span></dt></p>
<dt><span class="docPubcolor">                 <span class="docPubcolor"><span class="docMonofont">void *data);</span></span>  </span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*write_proc)(struct file *file, const char *buffer, unsigned long</span></span> <span class="docPubcolor"><span class="docMonofont">count</span></span>, </span></dt></P>
<dt><span class="docPubcolor">                  <span class="docPubcolor"><span class="docMonofont">void *data);</span></span>  </span></dt></p>
<dd>
<p class="docList"><i>/proc</i> <span class="docEmphasis">read</span> and
<span class="docEmphasis">write</span> functions.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*tiocmget)(struct tty_struct *tty, struct file *file);</span></span> </span></dt></p>
<dd>
<p class="docList">Gets the current line settings of the specific tty device. If
retrieved successfully from the tty device, the value should be
returned to the caller.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int (*tiocmset)(struct tty_struct *tty, struct file *file, unsigned int set</span></span>, </span></dt></p>
<dt><span class="docPubcolor">                <span class="docPubcolor"><span class="docMonofont">unsigned int clear);</span></span>  </span></dt></P>
<dd>
<p class="docList">Sets the current line settings of the specific tty device.
<tt>set</tt> and <tt>clear</tt> contain the
different line settings that should either be set or cleared.</p>
</dd>
</dl>


<ul></UL></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-18-sect-6.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-18-sect-8.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
