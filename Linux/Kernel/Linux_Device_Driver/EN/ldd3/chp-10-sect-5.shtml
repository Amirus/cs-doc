<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>10.5. Interrupt Sharing</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-10-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-10-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-10-sect-5"></a>
<h3 class="docSection1Title">10.5. Interrupt Sharing</h3>

<p class="docText">The notion of an IRQ conflict is <a name="chp-10-ITERM-6142"></a>
<a name="chp-10-ITERM-6143"></a>almost synonymous with the PC
architecture. In the past, IRQ lines on the PC have not been able to
serve more than one device, and there have never been enough of them.
As a result, frustrated users have often spent much time with their
computer case open, trying to find a way to make all of their
peripherals play well together.</p>

<p class="docText">Modern hardware, of course, has been designed to allow the sharing of
interrupts; the PCI bus requires it. Therefore, the Linux kernel
supports interrupt sharing on all buses, even those (such as the ISA
bus) where sharing has traditionally not been supported. Device
drivers for the 2.6 kernel should be written to work with shared
interrupts if the target hardware can support that mode of operation.
Fortunately, working with shared interrupts is easy, most of the
time.</P>

<a name="chp-10-sect-5.1"></a>
<h4 class="docSection2Title">10.5.1. Installing a Shared Handler</H4>

<p class="docText">Shared interrupts are installed through
<a name="chp-10-ITERM-6144"></a><span class="docEmphasis">request_irq</span> just
like nonshared ones, but there are two differences:</P>

<UL><li><p class="docList"><a name="chp-10-ITERM-6145"></a>
<a name="chp-10-ITERM-6146"></a>The
<tt>SA_SHIRQ</tt> bit must be specified in the
<tt>flags</tt> argument when requesting the interrupt.</p></li><li><p class="docList"><a name="chp-10-ITERM-6147"></a>The <tt>dev_id</tt> argument
<span class="docEmphasis">must</span> be unique. Any pointer into the
module's address space will do, but
<tt>dev_id</tt> definitely cannot be set to
<tt>NULL</tt>.</P></LI></UL>
<p class="docText">The kernel keeps a list of shared handlers associated with the
interrupt, and <tt>dev_id</tt> can be thought of as the
signature that differentiates between them. If two drivers were to
register <tt>NULL</tt> as their signature on the same
interrupt, things might get mixed up at unload time, causing the
kernel to oops when an interrupt arrived. For this reason, modern
kernels complain loudly if passed a <tt>NULL</tt>
<tt>dev_id</tt> when registering shared interrupts. When a
shared interrupt is requested, <span class="docEmphasis">request_irq</span>
succeeds if one of the following is true:</p>

<UL><LI><p class="docList">The interrupt line is free.</p></li><li><p class="docList">All handlers already registered for that line have also specified
that the IRQ is to be shared.</p></LI></ul>
<p class="docText">Whenever two or more drivers are sharing an interrupt line and the
hardware interrupts the processor on that line, the kernel invokes
every handler registered for that interrupt, passing each its own
<tt>dev_id</tt>. Therefore, a shared handler must be able
to recognize its own interrupts and should quickly exit when its own
device has not interrupted. Be sure to return
<tt>IRQ_NONE</tt> whenever your handler is called and finds
that the device is not interrupting.</p>

<p class="docText">If you need to probe for your device before requesting the IRQ line,
the kernel can't help you. No probing function is
available for shared handlers. The standard probing mechanism works
if the line being used is free, but if the line is already held by
another driver with sharing capabilities, the probe fails, even if
your driver would have worked perfectly. Fortunately, most hardware
designed for interrupt sharing is also able to tell the processor
which interrupt it is using, thus eliminating the need for explicit
probing.</P>

<p class="docText"><a name="chp-10-ITERM-6148"></a>
<a name="chp-10-ITERM-6149"></a>Releasing
the handler is performed in the
normal<a name="chp-10-ITERM-6150"></a>
way, using <span class="docEmphasis">free_irq</span>. Here the
<tt>dev_id</tt> argument is used to select the correct
handler to release from the list of shared handlers for the
interrupt. That's why the <tt>dev_id</tt>
pointer must be unique.</p>

<p class="docText"><a name="chp-10-ITERM-6151"></a>
<a name="chp-10-ITERM-6152"></a><a name="chp-10-ITERM-6153"></a>
<a name="chp-10-ITERM-6154"></a>A
driver using a shared handler needs to be careful about one more
thing: it can't play with
<span class="docEmphasis">enable_irq</span> or <span class="docEmphasis">disable_irq</span>.
If it does, things might go haywire for other devices sharing the
line; disabling another device's interrupts for even
a short time may create latencies that are problematic for that
device and it's user. Generally, the programmer must
remember that his driver doesn't own the IRQ, and
its behavior should be more
"social" than is necessary if one
owns the interrupt line.</p>


<a name="chp-10-sect-5.2"></a>
<H4 class="docSection2Title">10.5.2. Running the Handler</h4>

<p class="docText">As suggested earlier, when
the<a name="chp-10-ITERM-6155"></a> kernel receives an interrupt, all
the registered handlers are invoked. A shared handler must be able to
distinguish between interrupts that it needs to handle and interrupts
generated by other devices.</P>

<p class="docText">Loading <span class="docEmphasis">short</span> with the option
<span class="docEmphasis">shared=1</span> installs the following handler instead
of the default:</p>

<pre>irqreturn_t short_sh_interrupt(int irq, void *dev_id, struct pt_regs *regs)
{
    int value, written;
    struct timeval tv;

    /* If it wasn't short, return immediately */
    value = inb(short_base);
    if (!(value &amp; 0x80))
        return IRQ_NONE;
    
    /* clear the interrupting bit */
    outb(value &amp; 0x7F, short_base);

    /* the rest is unchanged */

    do_gettimeofday(&amp;tv);
    written = sprintf((char *)short_head,"%08u.%06u\n",
            (int)(tv.tv_sec % 100000000), (int)(tv.tv_usec));
    short_incr_bp(&amp;short_head, written);
    wake_up_interruptible(&amp;short_queue); /* awake any reading process */
    return IRQ_HANDLED;
}</pre><br>


<p class="docText">An explanation is due here. Since the parallel port has no
"interrupt-pending" bit to check,
the handler uses the ACK bit for this purpose. If the bit is high,
the interrupt being reported is for <span class="docEmphasis">short</span>, and
the handler clears the bit.</p>

<p class="docText">The handler resets the bit by zeroing the high bit of the parallel
interface's data
port—<span class="docEmphasis">short</span> assumes that pins 9 and 10 are
connected together. If one of the other devices sharing the IRQ with
<span class="docEmphasis">short</span> generates an interrupt,
<span class="docEmphasis">short</span> sees that its own line is still inactive
and does nothing.</p>

<p class="docText">A full-featured driver probably splits the work into top and bottom
halves, of course, but that's easy to add and does
not have any impact on the code that implements sharing. A real
driver would also likely use the <tt>dev_id</tt> argument
to determine which, of possibly many, devices might be interrupting.</p>

<p class="docText">Note that if you are using a printer (instead of the jumper wire) to
test interrupt management with <span class="docEmphasis">short</span>, this
shared handler won't work as advertised, because the
printer protocol doesn't allow for sharing, and the
driver can't know whether the interrupt was from the
printer.</p>


<a name="chp-10-sect-5.3"></a>
<h4 class="docSection2Title">10.5.3. The /proc Interface and Shared Interrupts</h4>

<p class="docText"><a name="chp-10-ITERM-6156"></a>
<a name="chp-10-ITERM-6157"></a><a name="chp-10-ITERM-6158"></a><a name="chp-10-ITERM-6159"></a>Installing shared handlers in
the system doesn't affect
<i>/proc/stat</i>, which doesn't even
know about handlers. However, <i>/proc/interrupts</i>
changes slightly.</p>

<p class="docText">All the handlers installed for the same interrupt number appear on
the same line of <I>/proc/interrupts</i>. The following
output (from an x86_64 system) shows how shared interrupt handlers
are displayed:</P>

<pre>           CPU0       
  0:  892335412         XT-PIC  timer
  1:     453971         XT-PIC  i8042
  2:          0         XT-PIC  cascade
  5:          0         XT-PIC  libata, ehci_hcd
  8:          0         XT-PIC  rtc
  9:          0         XT-PIC  acpi
 10:   11365067         XT-PIC  ide2, uhci_hcd, uhci_hcd, SysKonnect SK-98xx, EMU10K1
 11:    4391962         XT-PIC  uhci_hcd, uhci_hcd
 12:        224         XT-PIC  i8042
 14:    2787721         XT-PIC  ide0
 15:     203048         XT-PIC  ide1
NMI:      41234 
LOC:  892193503 
ERR:        102
MIS:          0</pre><BR>


<p class="docText"><a name="chp-10-ITERM-6160"></a>This system has several shared
interrupt lines. IRQ 5 is used for the serial ATA and IEEE 1394
controllers; IRQ 10 has several devices, including an IDE controller,
two USB controllers, an Ethernet<a name="chp-10-ITERM-6161"></a> <a name="chp-10-ITERM-6162"></a> interface, and a sound card; and IRQ
11 also is used by two USB controllers.</p>



<ul></ul></TD></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-10-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-10-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
