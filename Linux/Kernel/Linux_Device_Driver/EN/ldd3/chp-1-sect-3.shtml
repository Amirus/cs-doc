<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>1.3. Classes of Devices and Modules</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-1-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-1-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-1-sect-3"></a>
<a name="chp-1-ITERM-4016"></a><h3 class="docSection1Title">1.3. Classes of Devices and Modules</h3>

<p class="docText">The Linux way of looking at
devices<a name="chp-1-ITERM-4017"></a>
<a name="chp-1-ITERM-4018"></a> distinguishes
between three fundamental device types. Each module usually
implements one of these types, and thus is classifiable as a
<span class="docEmphasis">char module</span>, a <span class="docEmphasis">block
module</span>, or a <span class="docEmphasis">network module</span>. This
division of modules into different types, or classes, is not a rigid
one; the programmer can choose to build huge modules implementing
different drivers in a single chunk of code. Good programmers,
nonetheless, usually create a different module for each new
functionality they implement, because decomposition is a key element
of scalability and extendability.</p>

<p class="docText">The three classes are:</p>

<a name="chp-1-ITERM-4019"></a><a name="chp-1-ITERM-4020"></a><a name="chp-1-ITERM-4021"></a><a name="chp-1-ITERM-4022"></a><a name="chp-1-ITERM-4023"></a><a name="chp-1-ITERM-4024"></a><a name="chp-1-ITERM-4025"></a><a name="chp-1-ITERM-4026"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docEmphasis">Character devices</span></span></dt></P>
<dd>
<p class="docList"><a name="chp-1-ITERM-4019"></a>A
<a name="chp-1-ITERM-4020"></a>character (char) device is one that
can be accessed as a stream of bytes (like a file); a
<a name="chp-1-ITERM-4021"></a>char <a name="chp-1-ITERM-4022"></a>driver is in
charge of implementing this behavior. Such a driver usually
implements at least the <span class="docEmphasis">open</span>,
<span class="docEmphasis">close</span>, <span class="docEmphasis">read</span>, and
<span class="docEmphasis">write</span> system calls. The text console
(<i>/dev/console</I>) and the serial ports
(<I>/dev/ttyS0</i> and friends) are examples of char
devices, as they are well represented by the stream abstraction. Char
devices are accessed by means of filesystem nodes, such as
<span class="docEmphasis">/dev/tty1</span> and <span class="docEmphasis">/dev/lp0</span>. The
only relevant difference between a char device and a regular file is
that you can always move back and forth in the regular file, whereas
most char devices are just data channels, which you can only access
sequentially. There exist, nonetheless, char devices that look like
data areas, and you can move back and forth in them; for instance,
this usually applies to frame grabbers, where the applications can
access the whole acquired image using <span class="docEmphasis">mmap</span> or
<span class="docEmphasis">lseek</span>.</p>
</dd>
<dt><span class="docPubcolor"><span class="docEmphasis">Block devices</span></span></dt></P>
<dd>
<p class="docList"><a name="chp-1-ITERM-4023"></a>Like
char devices,<a name="chp-1-ITERM-4024"></a>
block devices are accessed by filesystem nodes in the
<i>/dev</i> directory. A block device is a device
(e.g., a disk) that can host a filesystem. In most Unix systems, a
block device can only handle I/O operations that transfer one or more
whole blocks, which are usually 512 bytes (or a larger power of two)
bytes in length. Linux, instead, allows the application to read and
write a block device like a char deviceâ€”it permits the transfer
of any number of bytes at a time. As a result, block and char devices
differ only in the way data is managed internally by the kernel, and
thus in the kernel/driver software interface. Like a char device,
each block device is accessed through a filesystem node, and the
difference between them is transparent to the user. Block drivers
have a completely different interface to the kernel than char
drivers.</P>
</dd>
<dt><span class="docPubcolor"><span class="docEmphasis">Network interfaces</span></span></dt></P>
<dd>
<p class="docList">Any network transaction is
<a name="chp-1-ITERM-4025"></a>
<a name="chp-1-ITERM-4026"></a>made
through an interface, that is, a device that is able to exchange data
with other hosts. Usually, an <i>interface</I> is a
hardware device, but it might also be a pure software device, like
the loopback interface. A network interface is in charge of sending
and receiving data packets, driven by the network subsystem of the
kernel, without knowing how individual transactions map to the actual
packets being transmitted. Many network connections (especially those
using TCP) are stream-oriented, but network devices are, usually,
designed around the transmission and receipt of packets. A network
driver knows nothing about individual connections; it only handles
packets.</p>
</dd>
</dl>
<p class="docText">Not being a stream-oriented device, a network interface
isn't easily mapped to a node in the filesystem, as
<span class="docEmphasis">/dev/tty1</span> is. The Unix way to
provide<a name="chp-1-ITERM-4027"></a>
<a name="chp-1-ITERM-4028"></a> access to interfaces is still by
assigning a unique name to them (such as <tt>eth0</tt>),
but that name doesn't have a corresponding entry in
the filesystem. Communication between the kernel and a network device
driver is completely different from that used with char and block
drivers. Instead of <span class="docEmphasis">read</span> and
<span class="docEmphasis">write</span>, the kernel calls functions related to
packet transmission.</p>

<p class="docText"><a name="chp-1-ITERM-4029"></a>
<a name="chp-1-ITERM-4030"></a><a name="chp-1-ITERM-4031"></a><a name="chp-1-ITERM-4032"></a><a name="chp-1-ITERM-4033"></a>There are other ways of
classifying driver modules that are orthogonal to the above device
types. In general, some types of drivers work with additional layers
of kernel support functions for a given type of device. For example,
one can talk of <a name="chp-1-ITERM-4034"></a>
<a name="chp-1-ITERM-4035"></a>universal
serial bus (USB) modules, serial modules, SCSI modules, and so on.
Every USB device is driven by a USB module that works with the USB
subsystem, but the device itself shows up in the system as a char
device (a USB serial port, say), a block device (a USB memory card
reader), or a network device (a USB Ethernet interface).</p>

<p class="docText"><a name="chp-1-ITERM-4036"></a><a name="chp-1-ITERM-4037"></a><a name="chp-1-ITERM-4038"></a><a name="chp-1-ITERM-4039"></a>Other
classes of device drivers have been added to the kernel in recent
times, including FireWire drivers and I2O drivers. In the same way
that they handled USB and SCSI drivers, kernel developers collected
class-wide features and exported them to driver implementers to avoid
duplicating work and bugs, thus simplifying and strengthening the
process of writing such drivers.</p>

<p class="docText">In addition to device drivers, other functionalities, both hardware
and software, are modularized in the kernel.
<a name="chp-1-ITERM-4040"></a><a name="chp-1-ITERM-4041"></a><a name="chp-1-ITERM-4042"></a>One common example is filesystems. A
filesystem type determines how information is organized on a block
device in order to represent a tree of directories and files. Such an
entity is not a device driver, in that there's no
explicit device associated with the way the information is laid down;
the filesystem type is instead a software driver, because it maps the
low-level data structures to high-level data structures. It is the
filesystem that determines how long a filename can be and what
information about each file is stored in a directory entry. The
<a name="chp-1-ITERM-4043"></a>filesystem
module must implement the lowest level of the system calls that
access directories and files, by mapping filenames and paths (as well
as other information, such as access modes) to data structures stored
in data blocks. Such an interface is completely independent of the
actual data transfer to and from the disk (or other medium), which is
accomplished by a block device driver.</p>

<p class="docText">If you think of how strongly a Unix system depends on the underlying
filesystem, you'll realize that such a software
concept is vital to system operation. The ability to decode
filesystem information stays at the lowest level of the kernel
hierarchy and is of utmost importance; even if you write a block
driver for your new CD-ROM, it is useless if you are not able to run
<span class="docEmphasis">ls</span> or <span class="docEmphasis">cp</span> on the data it
hosts. Linux supports the concept of a filesystem module, whose
software interface declares the different operations that can be
performed on a filesystem inode, directory, file, and superblock.
It's quite unusual for a programmer to actually need
to write a filesystem module, because the official kernel already
includes code for the most important filesystem types.<a name="chp-1-ITERM-4044"></a></p>


<ul></ul></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-1-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-1-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
