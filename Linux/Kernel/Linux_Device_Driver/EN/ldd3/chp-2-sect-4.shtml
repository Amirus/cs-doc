<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>2.4. Compiling and Loading</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-2-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-2-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-2-sect-4"></a>
<h3 class="docSection1Title">2.4. Compiling and Loading</H3>

<p class="docText">The "hello world" example at the
beginning of this chapter included a brief demonstration of building
a module and loading it into the system. There is, of course, a lot
more to that whole process than we have seen so far. This section
provides more detail on how a module author turns source code into an
executing subsystem within the kernel.</p>

<a name="chp-2-sect-4.1"></a>
<h4 class="docSection2Title">2.4.1. Compiling Modules</H4>

<p class="docText">As the first step, we need to <a name="chp-2-ITERM-4173"></a>
<a name="chp-2-ITERM-4174"></a>look
a bit at how modules must be built. The build process for modules
differs significantly from that used for user-space applications; the
kernel is a large, standalone program with detailed and explicit
requirements on how its pieces are put together. The build process
also differs from how things were done with previous versions of the
kernel; the new build system is simpler to use and produces more
correct results, but it looks very different from what came before.
The kernel build system is a complex beast, and we just look at a
tiny piece of it. The files found in the
<i>Documentation/kbuild</I> directory in the kernel
source are required reading for anybody wanting to understand all
that is really going on beneath the surface.</p>

<p class="docText">There are some prerequisites that you must get out of the way before
you can build kernel modules. The first is to ensure that you have
sufficiently current versions of the compiler, module utilities, and
other necessary tools. The file
<i>Documentation/Changes</i> in the kernel
documentation directory always lists the required tool versions; you
should consult it before going any further. Trying to build a kernel
(and its modules) with the wrong tool versions can lead to no end of
subtle, difficult problems. Note that, occasionally, a version of the
compiler that is too new can be just as problematic as one that is
too old; the kernel source makes a great many assumptions about the
compiler, and new releases can sometimes break things for a while.</p>

<p class="docText">If you still do not have a kernel tree handy, or have not yet
configured and built that kernel, now is the time to go do it. You
cannot build loadable modules for a 2.6 kernel without this tree on
your filesystem. It is also helpful (though not required) to be
actually running the kernel that you are building for.</p>

<p class="docText">Once you have everything set up, creating a makefile for your module
is straightforward. In fact, for the "hello
world" example shown earlier in this chapter, a
single line will suffice:</p>

<pre>obj-m := hello.o</pre><br>


<p class="docText">Readers who are familiar with <span class="docEmphasis">make</span>, but not with
the 2.6 kernel build system, are likely to be wondering how this
makefile works. The above line is not how a traditional makefile
looks, after all. The answer, of course, is that the kernel build
system handles the rest. The assignment above (which takes advantage
of the extended syntax provided by GNU <span class="docEmphasis">make</span>)
states that there is one module to be built from the object file
<i>hello.o</i>. The resulting module is named
<i>hello.ko</i> after being built from the object file.</p>

<p class="docText">If, instead, you have a module called <i>module.ko</I>
that is generated from two source files (called, say,
<i>file1.c</I> and <I>file2.c</i>), the
correct incantation would be:</p>

<pre>obj-m := module.o
module-objs := file1.o file2.o</pre><br>


<p class="docText">For a makefile like those shown above to work, it must be invoked
within the context of the larger kernel build system. If your kernel
source tree is located in, say, your
<I>~/kernel-2.6</i> directory, the
<span class="docEmphasis">make</span><a name="chp-2-ITERM-4175"></a> command required to build your module
(typed in the directory containing the module source and makefile)
would be:</P>

<pre>make -C ~/kernel-2.6 M=`pwd` modules</pre><BR>


<p class="docText">This command starts by changing its directory to the one provided
with the <tt>-C</tt> option (that is, your kernel source
directory). There it finds the kernel's top-level
makefile. The <tt>M=</tt> option causes that makefile to
move back into your module source directory before trying to build
the <tt>modules</tt> target. This target, in turn, refers
to the list of modules found in the <tt>obj-m</tt>
variable, which we've set to
<I>module.o</i> in our examples.</p>

<p class="docText">Typing the previous <span class="docEmphasis">make</span> command can get
tiresome after a while, so the kernel developers have developed a
sort of makefile idiom, which makes life easier for those building
modules outside of the kernel tree. The trick is to write your
<a name="chp-2-ITERM-4176"></a>makefile as
follows:</p>

<pre># If KERNELRELEASE is defined, we've been invoked from the
# kernel build system and can use its language.
ifneq ($(KERNELRELEASE),)
    obj-m := hello.o 

# Otherwise we were called directly from the command
# line; invoke the kernel build system.
else

    KERNELDIR ?= /lib/modules/$(shell uname -r)/build
    PWD  := $(shell pwd)

default:
    $(MAKE) -C $(KERNELDIR) M=$(PWD) modules

endif</pre><br>


<p class="docText">Once again, we are seeing the extended GNU <span class="docEmphasis">make</span>
syntax in action. This makefile is read twice on a typical build.
When the makefile is invoked from the command line, it notices that
the <tt>KERNELRELEASE</tt> variable has not been set. It
locates the kernel source directory by taking advantage of the fact
that the symbolic link <I>build</I> in the installed
modules directory points back at the kernel build tree. If you are
not actually running the kernel that you are building for, you can
supply a <tt>KERNELDIR=</tt> option on the command line,
set the <tt>KERNELDIR</tt> environment variable, or rewrite
the line that sets <tt>KERNELDIR</tt> in the makefile. Once
the kernel source tree has been found, the makefile invokes the
<tt>default</tt>: target, which runs a second
<span class="docEmphasis">make</span> command (parameterized in the makefile as
<tt>$(MAKE)</tt>) to invoke the kernel build system as
described previously. On the second reading, the makefile sets
<tt>obj-m</tt>, and the kernel makefiles take care of
actually building the module.</P>

<p class="docText">This mechanism for building modules may strike you as a bit unwieldy
and obscure. Once you get used to it, however, you will likely
appreciate the capabilities that have been programmed into the kernel
build system. Do note that the above is not a complete makefile; a
real makefile includes the usual sort of targets for cleaning up
unneeded files, installing modules, <a name="chp-2-ITERM-4177"></a> <a name="chp-2-ITERM-4178"></a>etc. See the makefiles in the example
source directory for a complete example.</p>


<a name="chp-2-sect-4.2"></a>
<H4 class="docSection2Title">2.4.2. Loading and Unloading Modules</H4>

<p class="docText"><a name="chp-2-ITERM-4179"></a><a name="chp-2-ITERM-4180"></a>After the module is built, the
<a name="chp-2-ITERM-4181"></a>
<a name="chp-2-ITERM-4182"></a>
<a name="chp-2-ITERM-4183"></a>next
step is loading it into the kernel. As we've already
pointed out, <span class="docEmphasis">insmod</span> does the job for you. The
program loads the module code and data into the kernel, which, in
turn, performs a function similar to that of <span class="docEmphasis">ld</span>,
in that it links any unresolved symbol in the module to the symbol
table of the kernel. Unlike the linker, however, the kernel
doesn't modify the module's disk
file, but rather an in-memory copy. <span class="docEmphasis">insmod</span>
accepts a number of command-line options (for details, see the
manpage), and it can assign values to parameters in your module
before linking it to the current kernel. Thus, if a module is
correctly designed, it can be configured at load time; load-time
configuration gives the user more flexibility than compile-time
configuration, which is still used sometimes. Load-time configuration
is explained in <a class="docLink" href="chp-2-sect-8.shtml#chp-2-sect-8">Section 2.8</a> later in this chapter.</p>

<p class="docText"><a name="chp-2-ITERM-4184"></a>Interested readers may want to look at how
the kernel supports <span class="docEmphasis">insmod</span>: it relies on a
system call defined in <i>kernel/module.c</i>. The
function <span class="docEmphasis">sys_init_module</span> allocates kernel memory
to hold a<a name="chp-2-ITERM-4185"></a> module (this memory is allocated
with <span class="docEmphasis">vmalloc</span> ; see the <a class="docLink" href="chp-8-sect-4.shtml#chp-8-sect-4">Section 8.4</a> in <a class="docLink" href="chp-2.shtml#chp-2">Chapter 2</a>); it then copies the module
text into that memory region, resolves kernel references in the
module via the kernel symbol table, and calls the
module's initialization function to get everything
going.</p>

<p class="docText"><a name="chp-2-ITERM-4186"></a>If you actually
look in the kernel source, you'll find that the
names of the system calls are prefixed with <tt>sys_</tt>.
This is true for all system calls and no other functions;
it's useful to keep this in mind when grepping for
the system calls in the sources.</P>

<p class="docText">The<a name="chp-2-ITERM-4187"></a>
<a name="chp-2-ITERM-4188"></a>
<span class="docEmphasis">modprobe</span> utility is worth a quick mention.
<span class="docEmphasis">modprobe</span>, like <span class="docEmphasis">insmod</span>,
loads a module into the kernel. It differs in that it will look at
the module to be loaded to see whether it references any symbols that
are not currently defined in the kernel. If any such references are
found, <span class="docEmphasis">modprobe</span> looks for other modules in the
current module search path that define the relevant symbols. When
<span class="docEmphasis">modprobe</span> finds those modules (which are needed
by the module being loaded), it loads them into the kernel as well.
If you use <span class="docEmphasis">insmod</span> in this situation instead, the
command fails with an "unresolved
symbols" message left in the system logfile.</p>

<p class="docText">As mentioned before, modules may be removed from the kernel with the
<span class="docEmphasis">rmmod</span> utility. Note that module removal fails if
the<a name="chp-2-ITERM-4189"></a>
<a name="chp-2-ITERM-4190"></a>
<a name="chp-2-ITERM-4191"></a>
kernel believes that the module is still in use (e.g., a program
still has an open file for a device exported by the modules), or if
the kernel has been configured to disallow module removal. It is
possible to configure the kernel to allow
"forced" removal of modules, even
when they appear to be busy. If you reach a point where you are
considering using this option, however, things are likely to have
gone wrong badly enough that a reboot may well be the better course
of action.</p>

<p class="docText">The <span class="docEmphasis">lsmod</span> program produces a list of the modules
currently loaded in the kernel. Some other information, such as any
other modules making use of a specific module, is also provided.
<span class="docEmphasis">lsmod</span> works by reading the
<I>/proc/modules</i> virtual file. Information on
currently loaded modules can also be found in the sysfs virtual
filesystem under <i>/sys/module</I>.</p>


<a name="chp-2-sect-4.3"></a>
<H4 class="docSection2Title">2.4.3. Version Dependency</h4>

<p class="docText"><a name="chp-2-ITERM-4192"></a>Bear in
mind that your module's
<a name="chp-2-ITERM-4193"></a>
<a name="chp-2-ITERM-4194"></a>
<a name="chp-2-ITERM-4195"></a>
<a name="chp-2-ITERM-4196"></a>code
has to be recompiled for each version of the kernel that it is linked
to—at least, in the absence of modversions, not covered here as
they are more for distribution makers than developers. Modules are
strongly tied to the data structures and function prototypes defined
in a particular kernel version; the interface seen by a module can
change significantly from one kernel version to the next. This is
especially true of development kernels, of course.</p>

<p class="docText">The kernel does not just assume that a given module has been built
against the proper kernel version. One of the steps in the build
process is to link your module against a file (called
<i>vermagic.o</i>) from the current kernel tree; this
object contains a fair amount of information about the kernel the
module was built for, including the target kernel version, compiler
version, and the settings of a number of important configuration
variables. When an attempt is made to load a module, this information
can be tested for compatibility with the running kernel. If things
don't match, the module is not loaded; instead, you
see something like:</p>

<pre># <b>insmod hello.ko</b>
Error inserting './hello.ko': -1 Invalid module format</pre><br>


<p class="docText">A look in the system log file (<i>/var/log/messages</i>
or whatever your system is configured to use) will reveal
the<a name="chp-2-ITERM-4197"></a> specific problem that caused the
module to fail to load.</p>

<p class="docText">If you need to compile a module for a specific kernel version, you
will need to use the build system and source tree for that particular
version. A simple change to the <tt>KERNELDIR</tt> variable
in the example makefile shown previously does the trick.</p>

<p class="docText"><a name="chp-2-ITERM-4198"></a>Kernel
interfaces often
<a name="chp-2-ITERM-4199"></a>change between releases. If you are
writing a module that is intended to work with multiple versions of
the kernel (especially if it must work across major releases), you
likely have to make use of macros and <tt>#ifdef</tt>
constructs to make your code build properly. This edition of this
book only concerns itself with one major version of the kernel, so
you do not often see version tests in our example code. But the need
for them does occasionally arise. In such cases, you want to make use
of the definitions found in <i>linux/version.h</i>.
This header file, automatically included by
<span class="docEmphasis">linux/module.h</span>, defines the
following<a name="chp-2-ITERM-4200"></a> macros:</P>

<a name="chp-2-ITERM-4201"></a><a name="chp-2-ITERM-4202"></a><a name="chp-2-ITERM-4203"></a><a name="chp-2-ITERM-4204"></a><a name="chp-2-ITERM-4205"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">UTS_RELEASE</span></span><a name="chp-2-ITERM-4201"></a></span></dt></P>
<dd>
<p class="docList"><a name="chp-2-ITERM-4202"></a>This macro
expands to a string describing the version of this kernel tree. For
example, "<tt>2.6.10</tt>".</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">LINUX_VERSION_CODE</span></span><a name="chp-2-ITERM-4203"></a></span></dt></P>
<dd>
<p class="docList"><a name="chp-2-ITERM-4204"></a>This macro expands to the binary
representation of the kernel version, one byte for each part of the
version release number. For example, the code for 2.6.10 is 132618
(i.e., 0x02060a).<sup class="docFootnote"><a class="docLink" href="chp-2-sect-4.shtml#chp-2-FNOTE-2">[2]</a></sup> With this
information, you can (almost) easily determine what version of the
kernel you are dealing with.</p><blockquote><p class="docFootnote"><sup><a name="chp-2-FNOTE-2">[2]</a></sup> This allows up to 256 development
versions between stable versions.</P></blockquote>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">KERNEL_VERSION(major,minor,release)</span></span><a name="chp-2-ITERM-4205"></a></span></dt></p>
<dd>
<p class="docList">This is the macro used to build an integer version code from the
individual numbers that build up a version number. For example,
<tt>KERNEL_VERSION(2,6,10)</tt> expands to 132618. This
macro is very useful when you need to compare the current version and
a known checkpoint.</p>
</dd>
</dl>

<p class="docText">Most dependencies based on the kernel version can be worked around
with preprocessor conditionals by exploiting
<tt>KERNEL_VERSION</tt> and
<tt>LINUX_VERSION_CODE</tt>. Version dependency should,
however, not clutter driver code with hairy <tt>#ifdef</tt>
conditionals; the best way to deal with incompatibilities is by
confining them to a specific header file. As a general rule, code
which is explicitly version (or platform) dependent should be hidden
behind a low-level macro or function. High-level code can then just
call those functions without concern for the low-level details. Code
written in this way tends to be easier to read and more robust.</p>


<a name="chp-2-sect-4.4"></a>
<h4 class="docSection2Title">2.4.4. Platform Dependency</H4>

<p class="docText"><a name="chp-2-ITERM-4206"></a><a name="chp-2-ITERM-4207"></a>Each computer platform has its
<a name="chp-2-ITERM-4208"></a>
<a name="chp-2-ITERM-4209"></a> <a name="chp-2-ITERM-4210"></a>
<a name="chp-2-ITERM-4211"></a>peculiarities,
and kernel designers are free to exploit all the peculiarities to
achieve better performance in the target object file.</P>

<p class="docText">Unlike application developers, who must link their code with
precompiled libraries and stick to conventions on parameter passing,
kernel developers can dedicate some processor registers to specific
roles, and they have done so. Moreover, kernel code can be optimized
for a specific processor in a CPU family to get the best from the
target platform: unlike applications that are often distributed in
binary format, a custom compilation of the kernel can be optimized
for a specific computer set.</P>

<p class="docText">For example, the IA32 (x86) architecture has been subdivided into
several different processor types. The old 80386 processor is still
supported (for now), even though its instruction set is, by modern
standards, quite limited. The more modern processors in this
architecture have introduced a number of new capabilities, including
faster instructions for entering the kernel, interprocessor locking,
copying data, etc. Newer processors can also, when operated in the
correct mode, employ 36-bit (or larger) physical addresses, allowing
them to address more than 4 GB of physical memory. Other processor
families have seen similar improvements. The kernel, depending on
various configuration options, can be built to make use of these
additional features.</p>

<p class="docText">Clearly, if a module is to work with a given kernel, it must be built
with the same understanding of the target processor as that kernel
was. Once again, the <I>vermagic.o</I> object comes in
to play. When a module is loaded, the kernel checks the
processor-specific configuration options for the module and makes
sure they match the running kernel. If the module was compiled with
different options, it is not loaded.</p>

<p class="docText">If you are planning to write a driver for
general<a name="chp-2-ITERM-4212"></a> <a name="chp-2-ITERM-4213"></a> distribution, you may well be
wondering just how you can possibly support all these different
variations. The best answer, of course, is to release your driver
under a GPL-compatible license and contribute it to the mainline
kernel. Failing that, distributing your driver in source form and a
set of scripts to compile it on the user's system
may be the best answer. Some vendors have released tools to make this
task easier. If you must distribute your driver in binary form, you
need to look at the different kernels provided by your target
distributions, and provide a version of the module for each. Be sure
to take into account any errata kernels that may have been released
since the distribution was produced. Then, there are licensing issues
to be considered, as we discussed in <a class="docLink" href="chp-1-sect-6.shtml#chp-1-sect-6">Section 1.6</a>.
As a general rule,
distributing things in source form is an easier<a name="chp-2-ITERM-4214"></a> <a name="chp-2-ITERM-4215"></a> <a name="chp-2-ITERM-4216"></a> way to make your
way in the world.</p>



<ul></ul></TD></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-2-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-2-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
