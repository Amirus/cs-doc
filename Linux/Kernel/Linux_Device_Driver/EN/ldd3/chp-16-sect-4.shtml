<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>16.4. Some Other Details</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-16-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-16-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-16-sect-4"></a>
<h3 class="docSection1Title">16.4. Some Other Details</h3>

<p class="docText">This section covers a few other aspects of the block layer that may
be of interest for advanced drivers. None of the following facilities
need to be used to write a correct driver, but they may be helpful in
some situations.</p>

<a name="chp-16-sect-4.1"></a>
<h4 class="docSection2Title">16.4.1. Command Pre-Preparation</h4>

<p class="docText">The block layer provides a <a name="chp-16-ITERM-7439"></a>
<a name="chp-16-ITERM-7440"></a> <a name="chp-16-ITERM-7441"></a>mechanism for
drivers to examine and preprocess requests before they are returned
from <span class="docEmphasis">elv_next_request</span>. This mechanism allows
drivers to set up the actual drive commands ahead of time, decide
whether the request can be handled at all, or perform other sorts of
housekeeping.</p>

<p class="docText">If you want to use this feature, create a command preparation
function that fits this prototype:</p>

<pre>typedef int (prep_rq_fn) (request_queue_t *queue, struct request *req);</pre><br>


<p class="docText">The <tt>request</tt> structure includes a field called
<tt>cmd</tt><a name="chp-16-ITERM-7442"></a>, which is an array of
<tt>BLK_MAX_CDB</tt> bytes; this array may be used by the
preparation function to store the actual hardware command (or any
other useful information). This function should return one of the
following values:</p>

<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">BLKPREP_OK</span></span></span></dt></p>
<dd>
<p class="docList">Command preparation went normally, and the request can be handed to
your driver's <span class="docEmphasis">request</span> function.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">BLKPREP_KILL</span></span></span></dt></P>
<dd>
<p class="docList">This request cannot be completed; it is failed with an error code.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">BLKPREP_DEFER</span></span></span></dt></P>
<dd>
<p class="docList">This request cannot be completed at this time. It stays at the front
of the queue but is not handed to the <span class="docEmphasis">request</span>
function.</p>
</dd>
</dl>

<p class="docText">The preparation function is called
by<a name="chp-16-ITERM-7443"></a>
<a name="chp-16-ITERM-7444"></a>
<span class="docEmphasis">elv_next_request</span> immediately before the request
is returned to your driver. If this function returns
<tt>BLKPREP_DEFER</tt>, the return value from
<span class="docEmphasis">elv_next_request</span> to your driver is
<tt>NULL</tt>. This mode of operation can be useful if, for
example, your device has reached the maximum number of requests it
can have outstanding.</P>

<p class="docText">To have the block layer call your
<a name="chp-16-ITERM-7445"></a>preparation function, pass it to:</P>

<pre>void blk_queue_prep_rq(request_queue_t *queue, prep_rq_fn *func);</pre><BR>


<p class="docText">By default, request queues have no preparation function.</p>


<a name="chp-16-sect-4.2"></a>
<h4 class="docSection2Title">16.4.2. Tagged Command Queueing</h4>

<p class="docText">Hardware that can have <a name="chp-16-ITERM-7446"></a> <a name="chp-16-ITERM-7447"></a> <a name="chp-16-ITERM-7448"></a> <a name="chp-16-ITERM-7449"></a>
<a name="chp-16-ITERM-7450"></a>multiple requests active at once usually
supports some form of <i>tagged command queueing</I>
(TCQ). TCQ is simply the technique of attaching an integer
"tag" to each request so that when
the drive completes one of those requests, it can tell the driver
which one. In previous versions of the kernel, block drivers that
implemented TCQ had to do all of the work themselves; in 2.6, a TCQ
support infrastructure has been added to the block layer for all
drivers to use.</P>

<p class="docText">If your drive performs tagged command queueing, you should inform the
kernel of that fact at initialization time with a call to:</P>

<pre>int blk_queue_init_tags(request_queue_t *queue, int depth, 
                        struct blk_queue_tag *tags);</pre><br>


<p class="docText">Here, <tt>queue</tt> is your request queue, and
<tt>depth</tt> is the number of tagged requests your device
can have outstanding at any given time. <tt>tags</tt> is an
optional pointer to an array of <tt>struct
blk_queue_tag</tt> structures; there must be
<tt>depth</tt> of them. Normally, <tt>tags</tt>
can be passed as <tt>NULL</tt>, and
<span class="docEmphasis">blk_queue_init_tags</span> allocates the array. If,
however, you need to share the same tags between multiple devices,
you can pass the tags array pointer (stored in the
<tt>queue_tags</tt> field) from another request queue. You
should never actually allocate the <tt>tags</tt> array
yourself; the block layer needs to initialize the array and does not
export the initialization function to modules.</P>

<p class="docText">Since <span class="docEmphasis">blk_queue_init_tags</span> allocates memory, it
can fail; it returns a negative error code to the caller in that
case.</P>

<p class="docText">If the number of tags your device can handle changes, you can inform
the kernel with:</p>

<pre>int blk_queue_resize_tags(request_queue_t *queue, int new_depth);</pre><br>


<p class="docText">The queue lock must be held during the call. This call can fail,
returning a negative error code in that case.</p>

<p class="docText">The association of a tag with a <tt>request</tt> structure
is done with <span class="docEmphasis">blk_queue_start_tag</span>, which must be
called with the queue lock held:</p>

<pre>int blk_queue_start_tag(request_queue_t *queue, struct request *req);</pre><BR>


<p class="docText">If a tag is available, this function allocates it for this request,
stores the tag number in <tt>req-&gt;tag</tt>, and returns
<tt>0</tt>. It also dequeues the request from the queue and
links it into its own tag-tracking structure, so your driver should
take care not to dequeue the request itself if it's
using tags. If no more tags are available,
<span class="docEmphasis">blk_queue_start_tag</span> leaves the request on the
queue and returns a nonzero value.</p>

<p class="docText">When all transfers for a given request have been completed, your
driver should return the tag with:</p>

<pre>void blk_queue_end_tag(request_queue_t *queue, struct request *req);</pre><BR>


<p class="docText">Once again, you must hold the queue lock before calling this
function. The call should be made after
<span class="docEmphasis">end_that_request_first</span> returns
<tt>0</tt> (meaning that the request is complete) but
before calling <span class="docEmphasis">end_that_request_last</span>. Remember
that the request is already dequeued, so it would be a mistake for
your driver to do so at this point.</p>

<p class="docText">If you need to find the request associated with a given tag (when the
drive reports completion, for example), use
<span class="docEmphasis">blk_queue_find_tag</span>:</p>

<pre>struct request *blk_queue_find_tag(request_queue_t *qeue, int tag);</pre><BR>


<p class="docText">The return value is the associated <tt>request</tt>
structure, unless something has gone truly wrong.</p>

<p class="docText">If things really do go wrong, your driver may find itself having to
reset or perform some other act of violence against one of its
devices. In that case, any outstanding tagged commands will not be
completed. The block layer provides a function that can help with the
recovery effort in such situations:</P>

<pre>void blk_queue_invalidate_tags(request_queue_t *queue);</pre><br>


<p class="docText">This function returns all outstanding tags to the pool and puts the
associated requests back into the request<a name="chp-16-ITERM-7451"></a> <a name="chp-16-ITERM-7452"></a> <a name="chp-16-ITERM-7453"></a> <a name="chp-16-ITERM-7454"></a> <a name="chp-16-ITERM-7455"></a> queue. The queue
lock must be held when you call this function.</p>



<ul></ul></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-16-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-16-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
