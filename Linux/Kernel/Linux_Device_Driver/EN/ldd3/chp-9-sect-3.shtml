<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>9.3. An I/O Port Example</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-9-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-9-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-9-sect-3"></a>
<h3 class="docSection1Title">9.3. An I/O Port Example</h3>

<p class="docText">The sample code we use to show port I/O from within a device driver
acts on general-purpose digital I/O ports; such ports are found in
most computer systems.</p>

<p class="docText"><a name="chp-9-ITERM-5948"></a>
<a name="chp-9-ITERM-5949"></a><a name="chp-9-ITERM-5950"></a>A digital I/O port, in its most common
incarnation, is a byte-wide I/O location, either memory-mapped or
port-mapped. When you write a value to an output location, the
electrical signal seen on output pins is changed according to the
individual bits being written. When you read a value from the input
location, the current logic level seen on input pins is returned as
individual bit values.</p>

<p class="docText">The actual implementation and software interface of such I/O ports
varies from system to system. Most of the time, I/O pins are
controlled by two I/O locations: one that allows selecting what pins
are used as input and what pins are used as output and one in which
you can actually read or write logic levels. Sometimes, however,
things are even simpler, and the bits are hardwired as either input
or output (but, in this case, they're no longer
called "general-purpose I/O"); the
parallel port found on all personal computers is one such
not-so-general-purpose I/O port. Either way, the I/O pins are usable
by the sample code we introduce shortly.</p>

<a name="chp-9-sect-3.1"></a>
<h4 class="docSection2Title">9.3.1. An Overview of the Parallel Port</h4>

<p class="docText"><a name="chp-9-ITERM-5951"></a>
<a name="chp-9-ITERM-5952"></a><a name="chp-9-ITERM-5953"></a>Because we expect most
readers to be using an x86 platform in the form called
"personal computer," we feel it is
worth explaining how the PC parallel port is designed. The parallel
port is the peripheral interface of choice for running digital I/O
sample code on a personal computer. Although most readers probably
have parallel port specifications available, we summarize them here
for your convenience.</p>

<p class="docText">The parallel interface, in its minimal configuration (we overlook the
ECP and EPP modes) is made up of three 8-bit ports. The PC standard
starts the I/O ports for the first parallel interface at
<tt>0x378</tt> and for the second at
<tt>0x278</tt>. The first port is a bidirectional data
register; it connects directly to pins 2-9 on the physical connector.
The second port is a read-only status register; when the parallel
port is being used for a printer, this register reports several
aspects of printer status, such as being online, out of paper, or
busy. The third port is an output-only control register, which, among
other things, controls whether interrupts are enabled.</p>

<p class="docText"><a name="chp-9-ITERM-5954"></a> <a name="chp-9-ITERM-5955"></a><a name="chp-9-ITERM-5956"></a>The signal
levels used in parallel communications are standard
transistor-transistor logic (TTL) levels: 0 and 5 volts, with the
logic threshold at about 1.2 volts. You can count on the ports at
least meeting the standard TTL LS current ratings, although most
modern parallel ports do better in both current and voltage ratings.</p>
<p><table border="0" bgcolor="black" cellspacing="0" cellpadding="1" width="90%" align="center"><tr><TD><table bgcolor="white" width="100%" border="0" cellspacing="0" cellpadding="6"><tr><TD width="60" valign="top"><img src="images/warning_yellow.gif" width="51" height="36" alt=""></TD><td valign="top">


<p class="docText">The parallel connector is not isolated from the
computer's internal circuitry, which is useful if
you want to connect logic gates directly to the port. But you have to
be careful to do the wiring correctly; the parallel port circuitry is
easily damaged when you play with your own custom circuitry, unless
you add optoisolators to your circuit. You can choose to use plug-in
parallel ports if you fear you'll damage your
motherboard.</p>
</td></TR></table></td></TR></table></P><BR>

<p class="docText"><a name="chp-9-ITERM-5957"></a>The
bit specifications are outlined in <a class="docLink" href="chp-9-sect-3.shtml#chp-9-FIG-1">Figure 9-1</a>. You can access 12
output bits and 5 input bits, some of which are logically inverted
over the course of their signal path. The only bit with no associated
signal pin is bit 4 (0x10) of port 2, which enables interrupts from
the parallel port. We use this bit as part of our implementation of
an interrupt handler in <a class="docLink" href="chp-10.shtml#chp-10">Chapter 10</a>.</p>

<a name="chp-9-FIG-1"></a><p><center>
<h5 class="docFigureTitle">Figure 9-1. The pinout of the parallel port</h5>
<img border="0" alt="" width="474" height="328" SRC="images/0596005903/figs/ldr3_0901.gif"></center></P><BR>


<a name="chp-9-sect-3.2"></a>
<H4 class="docSection2Title">9.3.2. A Sample Driver</h4>

<p class="docText"><a name="chp-9-ITERM-5958"></a>
<a name="chp-9-ITERM-5959"></a>The driver we introduce is called
<span class="docEmphasis">short</span> (<a name="chp-9-ITERM-5960"></a>Simple Hardware Operations and Raw Tests).
All it does is read and write a few 8-bit ports, starting from the
one you select at load time. By default, it uses the port range
assigned to the parallel interface of the PC. Each device node (with
a unique minor number) accesses a different port. The
<span class="docEmphasis">short</span> driver doesn't do
anything useful; it just isolates for external use as a single
instruction acting on a port. If you are not used to port I/O, you
can use <span class="docEmphasis">short</span> to get familiar with it; you can
measure the time it takes to transfer data through a port or play
other games.</P>

<p class="docText">For <span class="docEmphasis">short</span> to work on your system, it must have
free access to the underlying hardware device (by default, the
parallel interface); thus, no other driver may have allocated it.
Most modern distributions set up the parallel port drivers as modules
that are loaded only when needed, so contention for the I/O addresses
is not usually a problem. If, however, you get a
"can't get I/O
address" error from <span class="docEmphasis">short</span> (on
the console or in the system log file), some other driver has
probably already taken the port. A quick look at
<I>/proc/ioports</i> usually tells you which driver is
getting in the way. The same caveat applies to other I/O devices if
you are not using the parallel interface.</p>

<p class="docText"><a name="chp-9-ITERM-5961"></a>
<a name="chp-9-ITERM-5962"></a>
<a name="chp-9-ITERM-5963"></a>From now on, we just refer to
"the parallel interface" to
simplify the discussion. However, you can set the
<tt>base</tt> module parameter at load time to redirect
<span class="docEmphasis">short</span> to other I/O devices. This feature allows
the sample code to run on any Linux platform where you have access to
a digital I/O interface that is accessible via
<span class="docEmphasis">outb</span> and <span class="docEmphasis">inb</span> (even though
the actual hardware is memory-mapped on all platforms but the x86).
Later, in <a class="docLink" href="chp-9-sect-4.shtml#chp-9-sect-4">Section 9.4</a> we show how <span class="docEmphasis">short</span>
can be used with generic memory-mapped digital I/O as well.</p>

<p class="docText"><a name="chp-9-ITERM-5964"></a>
<a name="chp-9-ITERM-5965"></a><a name="chp-9-ITERM-5966"></a>To watch what happens
on the parallel connector and if you have a bit of an inclination to
work with hardware, you can solder a few LEDs to the output pins.
Each LED should be connected in series to a 1-K resistor leading to a
ground pin (unless, of course, your LEDs have the resistor built in).
If you connect an output pin to an input pin, you'll
generate your own input to be read from the input ports.</p>

<p class="docText">Note that you cannot just connect a printer to the parallel port and
see data sent to <span class="docEmphasis">short</span>. This driver implements
simple access to the I/O ports and does not perform the handshake
that printers need to operate on the data. In the next chapter, we
show a sample driver (called <span class="docEmphasis">shortprint</span>), that
is capable of driving parallel printers; that driver uses interrupts,
however, so we can't get to it quite yet.</P>

<p class="docText">If you are going to view parallel data by soldering LEDs to a D-type
connector, we suggest that you not use pins 9 and 10, because we
connect them together later to run the sample code shown in <a class="docLink" href="chp-10.shtml#chp-10">Chapter 10</a>.</p>

<p class="docText">As far as <span class="docEmphasis">short</span> is concerned,
<i>/dev/short0</I> writes to and reads from the 8-bit
port located at the I/O address <tt>base</tt> (0x378 unless
changed at load time). <i>/dev/short1</i> writes to the
8-bit port located at <tt>base + 1</tt>, and so on up to
<tt>base + 7</tt>.</P>

<p class="docText">The actual output operation performed by
<i>/dev/short0</I> is based on a tight loop using
<span class="docEmphasis">outb</span>. A memory barrier instruction is used to
ensure that the output operation actually takes place and is not
optimized away:</p>

<pre>while (count--) {
    outb(*(ptr++), port);
    wmb(  );
}</pre><br>


<p class="docText">You can run the following command to light your LEDs:</p>

<pre>echo  -n "any string"  &gt; /dev/short0</pre><br>


<p class="docText">Each LED monitors a single bit of the output port. Remember that only
the last character written remains steady on the output pins long
enough to be perceived by your eyes. For that reason, we suggest that
you prevent automatic insertion of a trailing newline by passing the
<span class="docEmphasis">-n</span> option to <span class="docEmphasis">echo</span>.</p>

<p class="docText"><a name="chp-9-ITERM-5967"></a>Reading is performed by a
similar function, built around <span class="docEmphasis">inb</span> instead of
<span class="docEmphasis">outb</span>. In order to read
"meaningful" values from the
parallel port, you need to have some hardware connected to the input
pins of the connector to generate signals. If there is no signal, you
read an endless stream of identical bytes. If you choose to read from
an output port, you most likely get back the last value written to
the port (this applies to the parallel interface and to most other
digital I/O circuits in common use). Thus, those uninclined to get
out their soldering irons can read the current output value on port
0x378 by running a command such as:</p>

<pre>dd if=/dev/short0 bs=1 count=1 | od -t x1</pre><br>


<p class="docText">To demonstrate the use of all the I/O instructions, there are three
variations of each <span class="docEmphasis">short</span> device:
<i>/dev/short0</i> performs the loop just shown,
<i>/dev/short0p</i> uses <span class="docEmphasis">outb_p</span>
and <span class="docEmphasis">inb_p</span> in place of the
"fast" functions, and
<i>/dev/short0s</i> uses the string instructions. There
are eight such devices, from <I>short0</i> to
<I>short7</I>. Although the PC parallel interface has
only three ports, you may need more of them if using a different I/O
device to run your tests.</p>

<p class="docText">The <span class="docEmphasis">short</span> driver performs an absolute minimum of
hardware control but is adequate to show how the I/O port
instructions are used. Interested readers may want to look at the
source for the <span class="docEmphasis">parport</span> and
<span class="docEmphasis">parport_pc</span> modules to see how complicated this
device can get in real life in order to support a<a name="chp-9-ITERM-5968"></a> <a name="chp-9-ITERM-5969"></a> range of devices
(printers, tape backup, network interfaces) on the parallel port.</p>



<ul></UL></td></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-9-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-9-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
