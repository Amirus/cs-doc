<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>8.3. get_free_page and Friends</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-8-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-8-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-8-sect-3"></a>
<h3 class="docSection1Title" >8.3. get_free_page and Friends</h3>

<p class="docText"><a name="chp-8-ITERM-5737"></a>
<a name="chp-8-ITERM-5738"></a>
<a name="chp-8-ITERM-5739"></a><a name="chp-8-ITERM-5740"></a>If a module needs to allocate big chunks
of memory, it is usually better to use a
<a name="chp-8-ITERM-5741"></a>page-oriented technique.
Requesting whole pages also has other advantages, which are
introduced in <a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a>.</p>

<p class="docText">To allocate pages, the following functions are available:</P>

<a name="chp-8-ITERM-5742"></a><a name="chp-8-ITERM-5743"></a><a name="chp-8-ITERM-5744"></a><a name="chp-8-ITERM-5745"></a><a name="chp-8-ITERM-5746"></a><a name="chp-8-ITERM-5747"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">get_zeroed_page(unsigned int flags);</span></span></span></dt></P>
<dd>
<p class="docList"><a name="chp-8-ITERM-5742"></a>
<a name="chp-8-ITERM-5743"></a>Returns
a pointer to a new page and fills the page with zeros.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _get_free_page(unsigned int flags);</span></span><a name="chp-8-ITERM-5744"></a>
<a name="chp-8-ITERM-5745"></a></span></dt></p>
<dd>
<p class="docList">Similar to <span class="docEmphasis">get_zeroed_page</span>, but
doesn't clear the page.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _get_free_pages(unsigned int flags, unsigned int order);</span></span><a name="chp-8-ITERM-5746"></a>
<a name="chp-8-ITERM-5747"></a></span></dt></P>
<dd>
<p class="docList">Allocates and returns a pointer to the first byte of a memory area
that is potentially several (physically contiguous) pages long but
doesn't zero the area.</p>
</dd>
</dl>

<p class="docText"><a name="chp-8-ITERM-5748"></a>
<a name="chp-8-ITERM-5749"></a><a name="chp-8-ITERM-5750"></a>The <tt>flags</tt>
argument works in the same way as with <span class="docEmphasis">kmalloc</span>;
usually either <tt>GFP_KERNEL</tt> or
<tt>GFP_ATOMIC</tt> is used, perhaps with the addition of
the <tt>_ _GFP_DMA</tt> flag (for memory that can be used
for ISA direct-memory-access operations) or <tt>_
_GFP_HIGHMEM</tt> when high memory can be used.<sup class="docFootnote"><a class="docLink" href="chp-8-sect-3.shtml#chp-8-FNOTE-2">[2]</a></sup>
<tt>order</tt> is the base-two logarithm of the number of
pages you are requesting or freeing (i.e.,
log<sub>2</sub><span class="docEmphasis">N</span>). For example,
<tt>order</tt> is <tt>0</tt> if you want one page
and <tt>3</tt> if you request eight pages. If
<tt>order</tt> is too big (no contiguous area of that size
is available), the page allocation fails. The
<span class="docEmphasis">get_order</span> function, which takes an integer
argument, can be used to extract the order from a size (that must be
a power of two) for the hosting platform. The maximum allowed value
for <tt>order</tt> is <tt>10</tt> or
<tt>11</tt> (corresponding to 1024 or 2048 pages),
depending on the architecture. The chances of an order-10 allocation
succeeding on anything other than a freshly booted system with a lot
of memory are small, however.</P><blockquote><p class="docFootnote"><sup><a name="chp-8-FNOTE-2">[2]</a></sup> Although <span class="docEmphasis">alloc_pages</span> (described shortly)
should really be used for allocating high-memory pages, for reasons
we can't really get into until <a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a>.</P></blockquote>

<p class="docText">If you are curious, <i>/proc/buddyinfo</i> tells you
how many blocks of each order are available for each memory zone on
the system.</p>

<p class="docText"><a name="chp-8-ITERM-5751"></a>
<a name="chp-8-ITERM-5752"></a>When
a program is done with the pages, it can free them with one of the
following functions. The first function is a macro that falls back on
the second:</p>

<pre>void free_page(unsigned long addr);
void free_pages(unsigned long addr, unsigned long order);</pre><BR>


<p class="docText">If you try to free a different number of pages from what you
allocated, the memory map becomes corrupted, and the system gets in
trouble at a later time.</p>

<p class="docText"><a name="chp-8-ITERM-5753"></a>
<a name="chp-8-ITERM-5754"></a>It's
worth stressing that <span class="docEmphasis">_ _get_free_pages</span> and the
other functions can be called at any time, subject to the same rules
we saw for <span class="docEmphasis">kmalloc</span>. The functions can fail to
allocate memory in certain circumstances, particularly when
<tt>GFP_ATOMIC</tt> is used. Therefore, the program calling
these allocation functions must be prepared to handle an allocation
failure.</p>

<p class="docText"><a name="chp-8-ITERM-5755"></a><a name="chp-8-ITERM-5756"></a><a name="chp-8-ITERM-5757"></a>
<a name="chp-8-ITERM-5758"></a>Although
<tt>kmalloc(GFP_KERNEL)</tt> sometimes fails when there is
no available memory, the kernel does its best to fulfill allocation
requests. Therefore, it's easy to degrade system
responsiveness by allocating too much memory. For example, you can
bring the computer down by pushing too much data into a
<span class="docEmphasis">scull</span> device; the system starts crawling while
it tries to swap out as much as possible in order to fulfill the
<span class="docEmphasis">kmalloc</span> request. Since every resource is being
sucked up by the growing device, the computer is soon rendered
unusable; at that point, you can no longer even start a new process
to try to deal with the problem. We don't address
this issue in <span class="docEmphasis">scull</span>, since it is just a sample
module and not a real tool to put into a multiuser system. As a
programmer, you must be careful nonetheless, because a module is
privileged code and can open new security holes in the system (the
most likely is a denial-of-service hole like the one just outlined).</P>

<a name="chp-8-sect-3.1"></a>
<h4 class="docSection2Title">8.3.1. A scull Using Whole Pages: scullp</h4>

<p class="docText"><a name="chp-8-ITERM-5759"></a>
<a name="chp-8-ITERM-5760"></a>In order to test page allocation for
real, we have released the <span class="docEmphasis">scullp</span> module
together with other sample code. It is a reduced
<span class="docEmphasis">scull</span>, just like <span class="docEmphasis">scullc</span>
introduced earlier.</P>

<p class="docText">Memory quanta allocated by <span class="docEmphasis">scullp</span> are whole
pages or page sets: the <tt>scullp_order</tt> variable
defaults to <tt>0</tt> but can be changed at either compile
or load time.</p>

<p class="docText">The following lines show how it allocates memory:</P>

<pre>/* Here's the allocation of a single quantum */
if (!dptr-&gt;data[s_pos]) {
    dptr-&gt;data[s_pos] =
        (void *)_ _get_free_pages(GFP_KERNEL, dptr-&gt;order);
    if (!dptr-&gt;data[s_pos])
        goto nomem;
    memset(dptr-&gt;data[s_pos], 0, PAGE_SIZE &lt;&lt; dptr-&gt;order);
}</pre><br>


<p class="docText">The code to deallocate memory in <span class="docEmphasis">scullp</span> looks
like this:</p>

<pre>/* This code frees a whole quantum-set */
for (i = 0; i &lt; qset; i++)
    if (dptr-&gt;data[i])
        free_pages((unsigned long)(dptr-&gt;data[i]),
                dptr-&gt;order);</pre><br>


<p class="docText">At the user level, the perceived difference is primarily a speed
improvement and better memory use, because there is no internal
fragmentation of memory. We ran some tests copying 4 MB from
<i>scull0</i> to <i>scull1</i> and then
from <i>scullp0</i> to <i>scullp1</i>;
the results showed a slight improvement in kernel-space processor
usage.</p>

<p class="docText">The performance improvement is not dramatic, because
<span class="docEmphasis">kmalloc</span> is designed to be fast. The main
advantage of page-level allocation isn't actually
speed, but rather more efficient memory usage. Allocating by pages
wastes no memory, whereas using <span class="docEmphasis">kmalloc</span> wastes
an unpredictable amount of memory because of allocation granularity.</p>

<p class="docText">But the biggest advantage of the <span class="docEmphasis">_
_get_free_page</span> functions is that the pages obtained are
completely yours, and you could, in theory, assemble the pages into a
linear area by appropriate tweaking of the page tables. For example,
you can allow a user process to <span class="docEmphasis">mmap</span> memory
areas obtained as single unrelated pages. We discuss this kind of
operation in <a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a>, where
we show how <span class="docEmphasis">scullp</span> offers memory mapping,
something that <span class="docEmphasis">scull</span> cannot offer.</P>


<a name="chp-8-sect-3.2"></a>
<h4 class="docSection2Title">8.3.2. The alloc_pages Interface</H4>

<p class="docText">For completeness, we introduce <a name="chp-8-ITERM-5761"></a>
<a name="chp-8-ITERM-5762"></a>another
interface for memory allocation, even though we will not be prepared
to use it until after <a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a>. For now, suffice it to say that <tt>struct page</tt>
is an internal kernel structure that describes a page of memory. As
we will see, there are many places in the kernel where it is
necessary to work with <tt>page</tt> structures; they are
especially useful in any situation where you might be dealing with
high memory, which does not have a constant address in kernel space.</P>

<p class="docText">The <span class="docEmphasis">real</span> core of the Linux
<a name="chp-8-ITERM-5763"></a>page
allocator is a function called <span class="docEmphasis">alloc_pages_node</span>:</p>

<pre>struct page *alloc_pages_node(int nid, unsigned int flags, 
                              unsigned int order);</pre><br>


<p class="docText">This function also has two variants (which are simply macros); these
are the versions that you will most likely use:</p>

<pre>struct page *alloc_pages(unsigned int flags, unsigned int order);
struct page *alloc_page(unsigned int flags);</pre><BR>


<p class="docText">The core function, <span class="docEmphasis">alloc_pages_node</span>, takes three
arguments. <tt>nid</tt> is the NUMA node ID<sup class="docFootnote"><a class="docLink" href="chp-8-sect-3.shtml#chp-8-FNOTE-3">[3]</a></sup>
whose memory should be allocated, <tt>flags</tt> is the
usual <tt>GFP_</tt> allocation flags, and
<tt>order</tt> is the size of the allocation. The return
value is a pointer to the first of (possibly many)
<tt>page</tt> structures describing the allocated memory,
or, as usual, <tt>NULL</tt> on failure.</p><blockquote><p class="docFootnote"><sup><a name="chp-8-FNOTE-3">[3]</a></sup> NUMA (nonuniform memory access) computers are multiprocessor
systems where memory is "local" to
specific groups of processors
("nodes"). Access to local memory
is faster than access to nonlocal memory. On such systems, allocating
memory on the correct node is important. Driver authors do not
normally have to worry about NUMA issues, however.</P></blockquote>

<p class="docText"><span class="docEmphasis">alloc_pages</span> simplifies the situation by
allocating the memory on the current NUMA node (it calls
<span class="docEmphasis">alloc_pages_node</span> with the return value from
<span class="docEmphasis">numa_node_id</span> as the <tt>nid</tt>
parameter). And, of course, <span class="docEmphasis">alloc_page</span> omits the
<tt>order</tt> parameter and allocates a single page.</P>

<p class="docText">To release pages allocated in this manner, you should use one of the
following:</P>

<pre>void _ _free_page(struct page *page);
void _ _free_pages(struct page *page, unsigned int order);
void free_hot_page(struct page *page);
void free_cold_page(struct page *page);</pre><br>


<p class="docText">If you have specific knowledge of whether a single
page's contents are likely to be resident in the
processor cache, you should communicate that to the kernel with
<span class="docEmphasis">free_hot_page</span> (for cache-resident pages) or
<span class="docEmphasis">free_cold_page</span>. This information helps the
memory allocator<a name="chp-8-ITERM-5764"></a> <a name="chp-8-ITERM-5765"></a> <a name="chp-8-ITERM-5766"></a> <a name="chp-8-ITERM-5767"></a> optimize its use of memory across the
system.</p>



<ul></ul></TD></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-8-sect-2.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-8-sect-4.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
