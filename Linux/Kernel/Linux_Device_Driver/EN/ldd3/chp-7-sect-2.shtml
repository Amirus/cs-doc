<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>7.2. Knowing the Current Time</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-7-sect-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-7-sect-3.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-7-sect-2"></a>
<h3 class="docSection1Title">7.2. Knowing the Current Time</h3>

<p class="docText"><a name="chp-7-ITERM-5503"></a> <a name="chp-7-ITERM-5504"></a> <a name="chp-7-ITERM-5505"></a> <a name="chp-7-ITERM-5506"></a>Kernel code can always retrieve a
representation of the current time by looking at the value of
<tt>jiffies</tt>. Usually, the fact that the value
represents only the time since the last boot is not relevant to the
driver, because its life is limited to the system uptime. As shown,
drivers can use the current value of <tt>jiffies</tt> to
calculate time intervals across events (for example, to tell
double-clicks from single-clicks in input device drivers or calculate
timeouts). In short, looking at <tt>jiffies</tt> is almost
always sufficient when you need to measure time intervals. If you
need very precise measurements for short time lapses,
processor-specific registers come to the rescue (although they bring
in serious portability issues).</p>

<p class="docText">It's quite unlikely that a driver will ever need to
know the wall-clock time, expressed in months, days, and hours; the
information is usually needed only by user programs such as
<span class="docEmphasis">cron</span> and <span class="docEmphasis">syslogd</span>. Dealing
with real-world time is usually best left to user space, where the C
library offers better support; besides, such code is often too
policy-related to belong in the kernel. There <span class="docEmphasis">is</span>
a kernel function that turns a wall-clock time into a
<tt>jiffies</tt> value, however:</P>

<pre>#include &lt;linux/time.h&gt;
unsigned long mktime (unsigned int year, unsigned int mon,
                      unsigned int day, unsigned int hour,
                      unsigned int min, unsigned int sec);</pre><br>


<p class="docText">To repeat: dealing directly with wall-clock time in a driver is often
a sign that policy is being implemented and should therefore be
questioned.</P>

<p class="docText"><a name="chp-7-ITERM-5507"></a>
<a name="chp-7-ITERM-5508"></a><a name="chp-7-ITERM-5509"></a>While you won't
have to deal with human-readable representations of the time,
sometimes you need to deal with absolute timestamp even in kernel
space. To this aim, &lt;<I>linux/time.h&gt;</I> exports
the <span class="docEmphasis">do_gettimeofday</span> function. When called, it
fills a <tt>struct</tt> <tt>timeval</tt>
pointer—the same one used in the
<span class="docEmphasis">gettimeofday</span> system call—with the familiar
seconds and microseconds values. The prototype for
<span class="docEmphasis">do_gettimeofday</span> is:</p>

<pre> #include &lt;linux/time.h&gt;
 void do_gettimeofday(struct timeval *tv);</pre><br>


<p class="docText"><a name="chp-7-ITERM-5510"></a>
<a name="chp-7-ITERM-5511"></a><a name="chp-7-ITERM-5512"></a><a name="chp-7-ITERM-5513"></a><a name="chp-7-ITERM-5514"></a>
<a name="chp-7-ITERM-5515"></a>The
source states that <span class="docEmphasis">do_gettimeofday</span> has
"near microsecond resolution,"
because it asks the timing hardware what fraction of the current
jiffy has already elapsed. The precision varies from one architecture
to another, however, since it depends on the actual hardware
mechanisms in use. For example, some <span class="docEmphasis">m68knommu</span>
processors, Sun3 systems, and other <span class="docEmphasis">m68k</span> systems
cannot offer more than jiffy resolution. Pentium systems, on the
other hand, offer very fast and precise subtick measures by reading
the timestamp counter described earlier in this chapter.</p>

<p class="docText">The current time is also available <a name="chp-7-ITERM-5516"></a>(though with jiffy granularity)
from the <tt>xtime</tt> variable, a <tt>struct
timespec</tt> value. Direct use of this variable is discouraged
because it is difficult to atomically access both the fields.
Therefore, the kernel offers the utility function
<span class="docEmphasis">current_kernel_time</span>:</p>

<pre>#include &lt;linux/time.h&gt;
struct timespec current_kernel_time(void);</pre><BR>


<p class="docText"><a name="chp-7-ITERM-5517"></a>Code for retrieving the current time in
the various ways it is available within the <span class="docEmphasis">jit</span>
("just in time") module in the
source files provided on O'Reilly's
FTP site. <span class="docEmphasis">jit</span> creates a file called
<I>/proc/currentime</I>, which returns the following
items in ASCII when read:</p>

<UL><LI><p class="docList">The current <tt>jiffies</tt> and
<tt>jiffies_64</tt> values as hex numbers</p></li><li><p class="docList">The current time as returned by <span class="docEmphasis">do_gettimeofday</span></p></LI><li><p class="docList">The <tt>timespec</tt> returned by
<span class="docEmphasis">current_kernel_time</span></p></LI></ul>
<p class="docText">We chose to use a dynamic <i>/proc</I> file to keep the
boilerplate code to a minimum—it's not worth
creating a whole device just to return a little textual information.</p>

<p class="docText">The file returns text lines continuously as long as the module is
loaded; each <span class="docEmphasis">read</span> system call collects and
returns one set of data, organized in two lines for better
readability. Whenever you read multiple data sets in less than a
timer tick, you'll see the difference between
<span class="docEmphasis">do_gettimeofday</span>, which queries the hardware, and
the other values that are updated only when the timer ticks.</P>

<pre>phon% <b>head -8 /proc/currentime</b>
0x00bdbc1f 0x0000000100bdbc1f 1062370899.630126
                              1062370899.629161488
0x00bdbc1f 0x0000000100bdbc1f 1062370899.630150
                              1062370899.629161488
0x00bdbc20 0x0000000100bdbc20 1062370899.630208
                              1062370899.630161336
0x00bdbc20 0x0000000100bdbc20 1062370899.630233
                              1062370899.630161336</pre><br>


<p class="docText">In the screenshot above, there are two interesting things to note.
First, the <span class="docEmphasis">current_kernel_time</span> value, though
expressed in nanoseconds, has only clock-tick granularity;
<span class="docEmphasis">do_gettimeofday</span> consistently reports a later
time but not later than the next timer tick. Second, the 64-bit
jiffies counter has the least-significant bit of the upper 32-bit
word set. This happens because the default value for
<tt>INITIAL_JIFFIES</tt>, used at boot time to initialize
the counter, forces a low-word overflow a few minutes after boot time
to help detect problems related to that very overflow. This initial
bias in the counter has no effect, because <tt>jiffies</tt>
is unrelated to wall-clock time. In
<i>/proc/uptime</i>, where the kernel extracts the
uptime from <a name="chp-7-ITERM-5518"></a> <a name="chp-7-ITERM-5519"></a> <a name="chp-7-ITERM-5520"></a> <a name="chp-7-ITERM-5521"></a>the counter, the initial bias is
removed before conversion.</p>


<ul></ul></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-7-sect-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-7-sect-3.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
