<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>13.5. USB Transfers Without Urbs</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-13-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-13-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><a name="chp-13-sect-5"></a>
<h3 class="docSection1Title">13.5. USB Transfers Without Urbs</h3>

<p class="docText">Sometimes a USB driver does<a name="chp-13-ITERM-6575"></a> <a name="chp-13-ITERM-6576"></a> <a name="chp-13-ITERM-6577"></a> <a name="chp-13-ITERM-6578"></a> not want to go through all of the
hassle of creating a <tt>struct urb</tt>, initializing it,
and then waiting for the urb completion function to run, just to send
or receive some simple USB data. Two functions are available to
provide a simpler interface.</p>

<a name="chp-13-sect-5.1"></a>
<h4 class="docSection2Title">13.5.1. usb_bulk_msg</H4>

<p class="docText"><a name="chp-13-ITERM-6579"></a>
<a name="chp-13-ITERM-6580"></a><span class="docEmphasis">usb_bulk_msg</span>
creates a USB bulk urb and sends it to the specified device, then
waits for it to complete before returning to the caller. It is
defined as:</p>

<pre>int usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe,
                 void *data, int len, int *actual_length,
                 int timeout);</pre><BR>


<p class="docText">The parameters of this function are:</P>

<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct usb_device *usb_dev</span></span>  </span></dt></p>
<dd>
<p class="docList">A pointer to the USB device to send the bulk message to.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">unsigned int pipe</span></span>  </span></dt></P>
<dd>
<p class="docList">The specific endpoint of the USB device to which this bulk message is
to be sent. This value is created with a call to either
<span class="docEmphasis">usb_sndbulkpipe</span> or
<span class="docEmphasis">usb_rcvbulkpipe</span>.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void *data</span></span>  </span></dt></p>
<dd>
<p class="docList">A pointer to the data to send to the device if this is an OUT
endpoint. If this is an IN endpoint, this is a pointer to where the
data should be placed after being read from the device.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int len</span></span>  </span></dt></P>
<dd>
<p class="docList">The length of the buffer that is pointed to by the
<tt>data</tt> parameter.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int *actual_length</span></span>  </span></dt></p>
<dd>
<p class="docList">A pointer to where the function places the actual number of bytes
that have either been transferred to the device or received from the
device, depending on the direction of the endpoint.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int timeout</span></span>  </span></dt></P>
<dd>
<p class="docList">The amount of time, in jiffies, that should be waited before timing
out. If this value is <tt>0</tt>, the function waits
forever for the message to complete.</p>
</dd>
</dl>

<p class="docText">If the function is successful, the return value is
<tt>0</tt>; otherwise, a negative error number is returned.
This error number matches up with the error numbers previously
described for urbs in <a class="docLink" href="chp-13-sect-3.shtml#chp-13-sect-3.1">Section 13.3.1</a>. If successful, the
<tt>actual_length</tt> parameter contains the number of
bytes that were transferred or received from this message.</p>

<p class="docText">The following is an example of using this function call:</P>

<pre>/* do a blocking bulk read to get data from the device */
retval = usb_bulk_msg(dev-&gt;udev,
              usb_rcvbulkpipe(dev-&gt;udev, dev-&gt;bulk_in_endpointAddr),
              dev-&gt;bulk_in_buffer,
              min(dev-&gt;bulk_in_size, count),
              &amp;count, HZ*10);

/* if the read was successful, copy the data to user space */
if (!retval) {
    if (copy_to_user(buffer, dev-&gt;bulk_in_buffer, count))
        retval = -EFAULT;
    else
        retval = count;
}</pre><br>


<p class="docText">This example shows a simple bulk read from an IN endpoint. If the
read is successful, the data is then copied to user space. This is
typically done in a <tt>read</tt> function for a USB
driver.</p>

<p class="docText">The <span class="docEmphasis">usb_bulk_msg</span> function cannot be called from
within interrupt context or with a spinlock held. Also, this function
cannot be canceled by any other function, so be careful when using
it; make sure that your driver's
<span class="docEmphasis">disconnect</span> knows enough to wait for the call to
complete before allowing itself to be unloaded from memory.</P>


<a name="chp-13-sect-5.2"></a>
<h4 class="docSection2Title">13.5.2. usb_control_msg</H4>

<p class="docText">The <a name="chp-13-ITERM-6581"></a>
<a name="chp-13-ITERM-6582"></a><span class="docEmphasis">usb_control_msg</span>
function works just like the <span class="docEmphasis">usb_bulk_msg</span>
function, except it allows a driver to send and receive USB control
messages:</p>

<pre>int usb_control_msg(struct usb_device *dev, unsigned int pipe,
                    _ _u8 request, _ _u8 requesttype,
                    _ _u16 value, _ _u16 index,
                    void *data, _ _u16 size, int timeout);</pre><br>


<p class="docText">The parameters of this function are almost the same as
<span class="docEmphasis">usb_bulk_msg</span>, with a few important differences:</p>

<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct usb_device *dev</span></span>  </span></dt></p>
<dd>
<p class="docList">A pointer to the USB device to send the control message to.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">unsigned int pipe</span></span>  </span></dt></p>
<dd>
<p class="docList">The specific endpoint of the USB device that this control message is
to be sent to. This value is created with a call to either
<span class="docEmphasis">usb_sndctrlpipe</span> or
<span class="docEmphasis">usb_rcvctrlpipe</span>.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _u8 request</span></span>  </span></dt></P>
<dd>
<p class="docList">The USB request value for the control message.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _u8 requesttype</span></span>  </span></dt></p>
<dd>
<p class="docList">The USB request type value for the control message</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _u16 value</span></span>  </span></dt></p>
<dd>
<p class="docList">The USB message value for the control message.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _u16 index</span></span>  </span></dt></p>
<dd>
<p class="docList">The USB message index value for the control message.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void *data</span></span>  </span></dt></P>
<dd>
<p class="docList">A pointer to the data to send to the device if this is an OUT
endpoint. If this is an IN endpoint, this is a pointer to where the
data should be placed after being read from the device.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _u16 size</span></span>  </span></dt></P>
<dd>
<p class="docList">The size of the buffer that is pointed to by the
<tt>data</tt> parameter.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int timeout</span></span>  </span></dt></p>
<dd>
<p class="docList">The amount of time, in jiffies, that should be waited before timing
out. If this value is <tt>0</tt>, the function will wait
forever for the message to complete.</p>
</dd>
</dl>

<p class="docText">If the function is successful, it returns the number of bytes that
were transferred to or from the device. If it is not successful, it
returns a negative error number.</P>

<p class="docText">The parameters <tt>request</tt>,
<tt>requesttype</tt>, <tt>value</tt>, and
<tt>index</tt> all directly map to the USB specification
for how a USB control message is defined. For more information on the
valid values for these parameters and how they are used, see Chapter
9 of the USB specification.</p>

<p class="docText">Like the function <span class="docEmphasis">usb_bulk_msg</span>, the function
<span class="docEmphasis">usb_control_msg</span> cannot be called from within
interrupt context or with a spinlock held. Also, this function cannot
be canceled by any other function, so be careful when using it; make
sure that your driver <span class="docEmphasis">disconnect</span> function knows
enough to wait for the call to complete before allowing itself to be
unloaded from memory.</p>


<a name="chp-13-sect-5.3"></a>
<H4 class="docSection2Title">13.5.3. Other USB Data Functions</h4>

<p class="docText">A number of helper functions<a name="chp-13-ITERM-6583"></a> in the USB core can be used to retrieve
standard information from all USB devices. These functions cannot be
called from within interrupt context or with a spinlock held.</p>

<p class="docText">The function
<a name="chp-13-ITERM-6584"></a>
<a name="chp-13-ITERM-6585"></a>
<a name="chp-13-ITERM-6586"></a><span class="docEmphasis">usb_get_descriptor</span>
retrieves the specified USB descriptor from the specified device. The
function is defined as:</P>

<pre>int usb_get_descriptor(struct usb_device *dev, unsigned char type,
                       unsigned char index, void *buf, int size);</pre><br>


<p class="docText">This function can be used by a USB driver to retrieve from the
<tt>struct</tt> <tt>usb_device</tt> structure any
of the device descriptors that are not already present in the
existing <tt>struct</tt> <tt>usb_device</tt> and
<tt>struct</tt> <tt>usb_interface</tt>
structures, such as audio descriptors or other class specific
information. The parameters of the function are:</P>

<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct usb_device *usb_dev</span></span>  </span></dt></p>
<dd>
<p class="docList">A pointer to the USB device that the descriptor should be retrieved
from.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">unsigned char type</span></span>  </span></dt></p>
<dd>
<p class="docList">The descriptor type. This type is described in the USB specification
and can be one of the following types:</p>
</dd>
</dl>

<pre>USB_DT_DEVICE
USB_DT_CONFIG
USB_DT_STRING
USB_DT_INTERFACE
USB_DT_ENDPOINT
USB_DT_DEVICE_QUALIFIER
USB_DT_OTHER_SPEED_CONFIG
USB_DT_INTERFACE_POWER
USB_DT_OTG
USB_DT_DEBUG
USB_DT_INTERFACE_ASSOCIATION
USB_DT_CS_DEVICE
USB_DT_CS_CONFIG
USB_DT_CS_STRING
USB_DT_CS_INTERFACE
USB_DT_CS_ENDPOINT</pre><br>


<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">unsigned char index</span></span>  </span></dt></p>
<dd>
<p class="docList">The number of the descriptor that should be retrieved from the device.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void *buf</span></span>  </span></dt></P>
<dd>
<p class="docList">A pointer to the buffer to which you copy the descriptor.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int size</span></span>  </span></dt></p>
<dd>
<p class="docList">The size of the memory pointed to by the <tt>buf</tt>
variable.</P>
</dd>
</dl>

<p class="docText">If this function is successful, it returns the number of bytes read
from the device. Otherwise, it returns a negative error number
returned by the underlying call to
<span class="docEmphasis">usb_control_msg</span> that this function makes.</p>

<p class="docText">One of the more common uses for the
<span class="docEmphasis">usb_get_descriptor</span> call is to retrieve a string
from the USB device. Because this is quite common, there is a helper
function for it called <span class="docEmphasis">usb_get_string</span>:</P>

<pre>int usb_get_string(struct usb_device *dev, unsigned short langid,
                   unsigned char index, void *buf, int size);</pre><BR>


<p class="docText">If successful, this function returns the number of bytes received by
the device for the string. Otherwise, it returns a negative error
number returned by the underlying call to
<span class="docEmphasis">usb_control_msg</span> that this function makes.</P>

<p class="docText">If this function is successful, it returns a string encoded in the
UTF-16LE format (Unicode, 16 bits per character, in little-endian
byte order) in the buffer pointed to by the <tt>buf</tt>
parameter. As this format is usually not very useful, there is
another function, called <span class="docEmphasis">usb_string</span>, that
returns a string that is read from a USB device and is already
converted into an ISO 8859-1 format string. This character set is a
8-bit subset of Unicode and is the most common format for strings in
English and other Western European languages. As this is typically
the format that the USB device's strings are in, it
is recommended that the<a name="chp-13-ITERM-6587"></a>
<a name="chp-13-ITERM-6588"></a>
<span class="docEmphasis">usb_string</span> function be used <a name="chp-13-ITERM-6589"></a> <a name="chp-13-ITERM-6590"></a> <a name="chp-13-ITERM-6591"></a> <a name="chp-13-ITERM-6592"></a>instead of the
<span class="docEmphasis">usb_get_string</span> function.</p>



<ul></ul></td></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-13-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-13-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
