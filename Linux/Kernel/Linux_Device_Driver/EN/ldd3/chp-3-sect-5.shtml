<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>3.5. open and release</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-3-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-3-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-3-sect-5"></a>
<H3 class="docSection1Title">3.5. open and release</H3>

<p class="docText">Now that we've taken a quick look at the fields, we
start using them in real <span class="docEmphasis">scull</span> functions.</p>

<a name="chp-3-sect-5.1"></a>
<h4 class="docSection2Title">3.5.1. The open Method</h4>

<p class="docText"><a name="chp-3-ITERM-4543"></a>The <span class="docEmphasis">open</span>
method is provided for a <a name="chp-3-ITERM-4544"></a>
<a name="chp-3-ITERM-4545"></a> <a name="chp-3-ITERM-4546"></a> <a name="chp-3-ITERM-4547"></a> <a name="chp-3-ITERM-4548"></a>driver
to do any initialization in preparation for later operations. In most
drivers, <span class="docEmphasis">open</span> should perform the following
tasks:</p>

<UL><li><p class="docList">Check for device-specific errors (such as device-not-ready or similar
hardware problems)</p></LI><li><p class="docList">Initialize the device if it is being opened for the first time</p></LI><li><p class="docList">Update the <tt>f_op</tt> pointer, if necessary</P></li><li><p class="docList">Allocate and fill any data structure to be put in
<tt>filp-&gt;private_data</tt></p></li></ul>
<p class="docText">The first order of business, however, is usually to identify which
device is being opened. Remember that the prototype for the
<span class="docEmphasis">open</span> method is:</p>

<pre>int (*open)(struct inode *inode, struct file *filp);</pre><br>


<p class="docText">The <span class="docEmphasis">inode</span> argument has the information we need
in the form of its <tt>i_cdev</tt> field, which contains
the <tt>cdev</tt> structure we set up before. The only
problem is that we do not normally want the <tt>cdev</tt>
structure itself, we want the <tt>scull_dev</tt> structure
that contains that <tt>cdev</tt> structure. The C language
lets programmers play all sorts of tricks to make that kind of
conversion; programming such tricks is error prone, however, and
leads to code that is difficult for others to read and understand.
Fortunately, in this case, the kernel hackers have done the tricky
stuff for us, in the form of the <span class="docEmphasis">container_of</span>
macro, defined in <i>&lt;linux/kernel.h&gt;</i>:</p>

<pre>container_of(pointer, container_type, container_field);</pre><br>


<p class="docText">This macro takes a <tt>pointer</tt> to a field of type
<tt>container_field</tt>, within a structure of type
<tt>container_type</tt>, and returns a pointer to the
containing structure. In <span class="docEmphasis">scull_open</span>, this macro
is used to find the appropriate device structure:</p>

<pre>struct scull_dev *dev; /* device information */

dev = container_of(inode-&gt;i_cdev, struct scull_dev, cdev);
filp-&gt;private_data = dev; /* for other methods */</pre><br>


<p class="docText">Once it has found the <tt>scull_dev</tt> structure,
<span class="docEmphasis">scull</span> stores a pointer to it in the
<tt>private_data</tt> field of the <tt>file</tt>
structure for easier access in the future.</P>

<p class="docText">The other way to identify the device being opened is to look at the
minor number stored in the <tt>inode</tt> structure. If you
register your device with <span class="docEmphasis">register_chrdev</span>, you
must use this technique. Be sure to use <span class="docEmphasis">iminor</span>
to obtain the minor number from the <tt>inode</tt>
structure, and make sure that it corresponds to a device that your
driver is actually prepared to handle.</p>

<p class="docText">The (slightly simplified) code for <span class="docEmphasis">scull_open</span> is:</P>

<pre>int scull_open(struct inode *inode, struct file *filp)
{
    struct scull_dev *dev; /* device information */

    dev = container_of(inode-&gt;i_cdev, struct scull_dev, cdev);
    filp-&gt;private_data = dev; /* for other methods */

    /* now trim to 0 the length of the device if open was write-only */
    if ( (filp-&gt;f_flags &amp; O_ACCMODE) =  = O_WRONLY) {
        scull_trim(dev); /* ignore errors */
    }
    return 0;          /* success */
}</pre><BR>


<p class="docText">The code looks pretty sparse, because it doesn't do
any particular device handling when <span class="docEmphasis">open</span> is
called. It doesn't need to, because the
<span class="docEmphasis">scull</span> device is global and persistent by design.
Specifically, there's no action such as
"initializing the device on first
open," because we don't keep an
open count for <span class="docEmphasis">scull</span>s.</p>

<p class="docText"><a name="chp-3-ITERM-4549"></a><a name="chp-3-ITERM-4550"></a>The only real operation performed on
the device is truncating it to a length of 0 when the device is
opened for writing. This is performed because, by design, overwriting
a <span class="docEmphasis">scull</span> device with a shorter file results in a
shorter device data area. This is similar to the way opening a
regular file for writing truncates it to zero length. The operation
does nothing if the device is opened for reading.</p>

<p class="docText">We'll see later how a real initialization <a name="chp-3-ITERM-4551"></a> <a name="chp-3-ITERM-4552"></a> <a name="chp-3-ITERM-4553"></a> <a name="chp-3-ITERM-4554"></a>works when we look
at the code for the other <span class="docEmphasis">scull</span> personalities.</p>


<a name="chp-3-sect-5.2"></a>
<H4 class="docSection2Title">3.5.2. The release Method</h4>

<p class="docText"><a name="chp-3-ITERM-4555"></a>
<a name="chp-3-ITERM-4556"></a><a name="chp-3-ITERM-4557"></a>
<a name="chp-3-ITERM-4558"></a><a name="chp-3-ITERM-4559"></a><a name="chp-3-ITERM-4560"></a>The role of the
<span class="docEmphasis">release</span> method is the<a name="chp-3-ITERM-4561"></a> <a name="chp-3-ITERM-4562"></a>
<a name="chp-3-ITERM-4563"></a>
<a name="chp-3-ITERM-4564"></a>
<a name="chp-3-ITERM-4565"></a>
reverse of <span class="docEmphasis">open</span>. Sometimes
you'll find that the method implementation is called
<tt><I>device</I></tt><tt>_close</tt> instead of
<tt><I>device</i></tt><tt>_release</tt>. Either
way, the device method should perform the following tasks:</p>

<ul><li><p class="docList">Deallocate anything that <span class="docEmphasis">open</span> allocated in
<tt>filp-&gt;private_data</tt></P></LI><LI><p class="docList">Shut down the device on last close</p></LI></UL>
<p class="docText">The basic form of <span class="docEmphasis">scull</span> has no hardware to shut
down, so the code required is minimal:<sup class="docFootnote"><a class="docLink" href="chp-3-sect-5.shtml#chp-3-FNOTE-7">[7]</a></sup></p><blockquote><p class="docFootnote"><sup><a name="chp-3-FNOTE-7">[7]</a></sup> The other
flavors of the device are closed by different functions because
<span class="docEmphasis">scull_open</span> substituted a different
<tt>filp-&gt;f_op</tt> for each device.
We'll discuss these as we introduce each
flavor.</p></blockquote>

<pre>int scull_release(struct inode *inode, struct file *filp)
{
    return 0;
}</pre><br>


<p class="docText">You may be wondering what happens when a device file is closed more
times than it is opened. After all, the <span class="docEmphasis">dup</span> and
<span class="docEmphasis">fork</span> system calls create copies of open files
without calling <span class="docEmphasis">open</span>; each of those copies is
then closed at program termination. For example, most programs
don't open their <span class="docEmphasis">stdin</span> file (or
device), but all of them end up closing it. How does a driver know
when an open device file has <span class="docEmphasis">really</span> been closed?</p>

<p class="docText">The answer is simple: not every <span class="docEmphasis">close</span> system
call causes the <span class="docEmphasis">release</span> method to be invoked.
Only the calls that actually release the device data structure invoke
the method—hence its name. The kernel keeps a counter of how
many times a <tt>file</tt> structure is being used. Neither
<span class="docEmphasis">fork</span> nor <span class="docEmphasis">dup</span> creates a new
<tt>file</tt> structure (only <span class="docEmphasis">open</span>
does that); they just increment the counter in the existing
structure. The <span class="docEmphasis">close</span> system call executes the
<span class="docEmphasis">release</span> method only when the counter for the
<tt>file</tt> structure drops to <tt>0</tt>,
which happens when the structure is destroyed. This relationship
between the <span class="docEmphasis">release</span> method and the
<span class="docEmphasis">close</span> system call guarantees that your driver
sees only one <span class="docEmphasis">release</span> call for each
<span class="docEmphasis">open</span>.</P>

<p class="docText"><a name="chp-3-ITERM-4566"></a>
<a name="chp-3-ITERM-4567"></a>Note
that the <span class="docEmphasis">flush</span> method <span class="docEmphasis">is</span>
called every time an application calls <span class="docEmphasis">close</span>.
However, very few drivers implement <span class="docEmphasis">flush</span>,
because usually there's nothing to perform at close
time unless <span class="docEmphasis">release</span> is involved.</p>

<p class="docText">As you may imagine, the previous discussion applies even when the
application terminates without explicitly closing its open files: the
kernel automatically closes any file at process exit time by
internally using the <span class="docEmphasis">close</span> system call.</p>



<UL></ul></td></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-3-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-3-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
