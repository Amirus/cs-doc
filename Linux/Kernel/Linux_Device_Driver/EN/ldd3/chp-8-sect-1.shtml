<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>8.1. The Real Story of kmalloc</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-8.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-8-sect-2.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><TD valign="top"><a name="chp-8-sect-1"></a>
<h3 class="docSection1Title">8.1. The Real Story of kmalloc</h3>

<p class="docText">The <span class="docEmphasis">kmalloc</span><a name="chp-8-ITERM-5645"></a> <a name="chp-8-ITERM-5646"></a> <a name="chp-8-ITERM-5647"></a> <a name="chp-8-ITERM-5648"></a> allocation engine is a powerful tool
and easily learned because of its similarity to
<span class="docEmphasis">malloc</span>. The function is fast (unless it blocks)
and doesn't clear the memory it obtains; the
allocated region still holds its previous content.<sup class="docFootnote"><a class="docLink" href="chp-8-sect-1.shtml#chp-8-FNOTE-1">[1]</a></sup> The allocated region is also
contiguous in physical memory. In the next few sections, we talk in
detail about <span class="docEmphasis">kmalloc</span>, so you can compare it with
the memory allocation techniques that we discuss later.</p><blockquote><p class="docFootnote"><sup><a name="chp-8-FNOTE-1">[1]</a></sup> Among other things, this implies that you should explicitly
clear any memory that might be exposed to user space or written to a
device; otherwise, you risk disclosing information that should be
kept private.</P></blockquote>

<a name="chp-8-sect-1.1"></a>
<h4 class="docSection2Title">8.1.1. The Flags Argument</H4>

<p class="docText"><a name="chp-8-ITERM-5649"></a>
<a name="chp-8-ITERM-5650"></a><a name="chp-8-ITERM-5651"></a>Remember that the prototype for
<span class="docEmphasis">kmalloc</span> is:</P>

<pre>#include &lt;linux/slab.h&gt;

void *kmalloc(size_t size, int flags);</pre><BR>


<p class="docText">The first argument to <span class="docEmphasis">kmalloc</span> is the size of the
block to be allocated. The second argument, the allocation flags, is
much more interesting, because it controls the behavior of
<span class="docEmphasis">kmalloc</span> in a number of ways.</p>

<p class="docText"><a name="chp-8-ITERM-5652"></a>
<a name="chp-8-ITERM-5653"></a><a name="chp-8-ITERM-5654"></a>
<a name="chp-8-ITERM-5655"></a>The
most commonly used flag, <tt>GFP_KERNEL</tt>, means that
the allocation (internally performed by calling, eventually,
<span class="docEmphasis">_ _get_free_pages</span>, which is the source of the
<tt>GFP_</tt> prefix) is performed on behalf of a process
running in kernel space. In other words, this means that the calling
function is executing a system call on behalf of a process. Using
<tt>GFP_KERNEL</tt> means that <span class="docEmphasis">kmalloc</span>
can put the current process to sleep waiting for a page when called
in low-memory situations. A function that allocates memory using
<tt>GFP_KERNEL</tt> must, therefore, be reentrant and
cannot be running in atomic context. While the current process
sleeps, the kernel takes proper action to locate some free memory,
either by flushing buffers to disk or by swapping out memory from a
user process.</p>

<p class="docText"><a name="chp-8-ITERM-5656"></a>
<a name="chp-8-ITERM-5657"></a><tt>GFP_KERNEL</tt>
isn't always the right allocation flag to use;
sometimes <span class="docEmphasis">kmalloc</span> is called from outside a
process's context. This type of call can happen, for
instance, in interrupt handlers, tasklets, and kernel timers. In this
case, the <tt>current</tt> process should not be put to
sleep, and the driver should use a flag of
<tt>GFP_ATOMIC</tt> instead. The kernel normally tries to
keep some free pages around in order to fulfill atomic allocation.
When <tt>GFP_ATOMIC</tt> is used,
<span class="docEmphasis">kmalloc</span> can use even the last free page. If that
last page does not exist, however, the allocation fails.</p>

<p class="docText"><a name="chp-8-ITERM-5658"></a>Other
flags can be used in place of or in addition to
<tt>GFP_KERNEL</tt> and <tt>GFP_ATOMIC</tt>,
although those two cover most of the needs of device drivers. All the
flags are defined in <i>&lt;linux/gfp.h&gt;</I>, and
individual flags are prefixed with a double underscore, such as
<tt>_ _GFP_DMA</tt>. In addition, there are symbols that
represent frequently used combinations of flags; these lack the
prefix and are sometimes called <span class="docEmphasis">allocation
priorities</span><a name="chp-8-ITERM-5659"></a>.
The latter include:</P>

<a name="chp-8-ITERM-5660"></a><a name="chp-8-ITERM-5661"></a><a name="chp-8-ITERM-5662"></a><a name="chp-8-ITERM-5663"></a><a name="chp-8-ITERM-5664"></a><a name="chp-8-ITERM-5665"></a><a name="chp-8-ITERM-5666"></a><a name="chp-8-ITERM-5667"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">GFP_ATOMIC</span></span></span></dt></P>
<dd>
<p class="docList">Used to allocate memory from interrupt handlers and other code
outside of a process context. Never sleeps.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">GFP_KERNEL</span></span></span></dt></p>
<dd>
<p class="docList">Normal allocation of kernel memory. May sleep.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">GFP_USER</span></span></span></dt></p>
<dd>
<p class="docList"><a name="chp-8-ITERM-5660"></a>
<a name="chp-8-ITERM-5661"></a>Used
to allocate memory for user-space pages; it may sleep.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">GFP_HIGHUSER</span></span></span></dt></P>
<dd>
<p class="docList"><a name="chp-8-ITERM-5662"></a>
<a name="chp-8-ITERM-5663"></a>Like
<tt>GFP_USER</tt>, but allocates from high memory, if any.
High memory is described in the next subsection.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">GFP_NOIO</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">GFP_NOFS</span></span><a name="chp-8-ITERM-5664"></a>
<a name="chp-8-ITERM-5665"></a></span></dt></p>
<dd>
<p class="docList">These flags function like <tt>GFP_KERNEL</tt>, but they add
restrictions on what the kernel can do to satisfy the request. A
<tt>GFP_NOFS</tt> allocation is not allowed to perform any
filesystem calls, while
<tt>GFP_NOIO</tt><a name="chp-8-ITERM-5666"></a>
<a name="chp-8-ITERM-5667"></a>
disallows the initiation of any I/O at all. They are used primarily
in the filesystem and virtual memory code where an allocation may be
allowed to sleep, but recursive filesystem calls would be a bad idea.</p>
</dd>
</dl>

<p class="docText">The allocation flags listed above can be augmented by an ORing in any
of the following flags, which change how the allocation is carried
out:</p>

<a name="chp-8-ITERM-5668"></a><a name="chp-8-ITERM-5669"></a><a name="chp-8-ITERM-5670"></a><a name="chp-8-ITERM-5671"></a><a name="chp-8-ITERM-5672"></a><a name="chp-8-ITERM-5673"></a><a name="chp-8-ITERM-5674"></a><a name="chp-8-ITERM-5675"></a><a name="chp-8-ITERM-5676"></a><a name="chp-8-ITERM-5677"></a><a name="chp-8-ITERM-5678"></a><a name="chp-8-ITERM-5679"></a><a name="chp-8-ITERM-5680"></a><a name="chp-8-ITERM-5681"></a><a name="chp-8-ITERM-5682"></a><a name="chp-8-ITERM-5683"></a><a name="chp-8-ITERM-5684"></a><a name="chp-8-ITERM-5685"></a><a name="chp-8-ITERM-5686"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_DMA</span></span><a name="chp-8-ITERM-5668"></a>
<a name="chp-8-ITERM-5669"></a></span></dt></p>
<dd>
<p class="docList">This flag requests allocation to happen in the DMA-capable memory
zone. The exact meaning is platform-dependent and is explained in the
following section.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_HIGHMEM</span></span><a name="chp-8-ITERM-5670"></a>
<a name="chp-8-ITERM-5671"></a></span></dt></P>
<dd>
<p class="docList">This flag indicates that the allocated memory may be located in high
memory.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_COLD</span></span><a name="chp-8-ITERM-5672"></a>
<a name="chp-8-ITERM-5673"></a></span></dt></p>
<dd>
<p class="docList">Normally, the memory
<a name="chp-8-ITERM-5674"></a>
<a name="chp-8-ITERM-5675"></a>
<a name="chp-8-ITERM-5676"></a>allocator
tries to return "cache warm"
pages—pages that are likely to be found in the processor cache.
Instead, this flag requests a
"cold" page, which has not been
used in some time. It is useful for allocating pages for DMA reads,
where presence in the processor cache is not useful. See 
<a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a> for a full discussion
of how to allocate DMA buffers.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_NOWARN</span></span><a name="chp-8-ITERM-5677"></a>
<a name="chp-8-ITERM-5678"></a></span></dt></p>
<dd>
<p class="docList">This rarely used flag prevents the kernel from issuing warnings (with
<span class="docEmphasis">printk</span>) when an allocation cannot be satisfied.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_HIGH</span></span><a name="chp-8-ITERM-5679"></a>
<a name="chp-8-ITERM-5680"></a></span></dt></p>
<dd>
<p class="docList">This flag marks a high-priority request, which is allowed to consume
even the last pages of memory set aside by the kernel for
emergencies.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_REPEAT</span></span><a name="chp-8-ITERM-5681"></a>
<a name="chp-8-ITERM-5682"></a></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_NOFAIL</span></span><a name="chp-8-ITERM-5683"></a>
<a name="chp-8-ITERM-5684"></a></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">_ _GFP_NORETRY</span></span><a name="chp-8-ITERM-5685"></a>
<a name="chp-8-ITERM-5686"></a></span></dt></p>
<dd>
<p class="docList">These flags modify how the allocator behaves when it has difficulty
satisfying an allocation. <tt>_ _GFP_REPEAT</tt> means
"try a little harder" by repeating
the attempt—but the allocation can still fail. The <tt>_
_GFP_NOFAIL</tt> flag tells the allocator never to fail; it
works as hard as needed to satisfy the request. Use of <tt>_
_GFP_NOFAIL</tt> is very strongly discouraged; there will
probably never be a valid reason to use it in a device driver.
Finally, <tt>_ _GFP_NORETRY</tt> tells the allocator to
give up immediately if the requested memory is not available.</p>
</dd>
</dl>

<a name="chp-8-sect-1.1.1"></a>
<h5 class="docSection3Title">8.1.1.1 Memory zones</h5>

<p class="docText"><a name="chp-8-ITERM-5687"></a>
<a name="chp-8-ITERM-5688"></a>Both
<tt>_ _GFP_DMA</tt> and <tt>_ _GFP_HIGHMEM</tt>
have a platform-dependent role, although their use is valid for all
platforms.</P>

<p class="docText"><a name="chp-8-ITERM-5689"></a><a name="chp-8-ITERM-5690"></a>The Linux kernel knows about a minimum of
three <i>memory zones</i>: DMA-capable memory, normal
memory, and high memory. While allocation normally happens in the
<span class="docEmphasis">normal</span> zone, setting either of the bits just
mentioned requires memory to be allocated from a different zone. The
idea is that every computer platform that must know about special
memory ranges (instead of considering all RAM equivalents) will fall
into this abstraction.</P>

<p class="docText"><span class="docEmphasis">DMA-capable memory</span> is memory that lives in a
preferential address range, where peripherals can perform DMA access.
On most sane platforms, all memory lives in this zone. On the x86,
the DMA zone is used for the first 16 MB of RAM, where legacy ISA
devices can perform DMA; PCI devices have no such limit.</p>

<p class="docText"><i>High memory</I><a name="chp-8-ITERM-5691"></a> is a mechanism used to allow access to
(relatively) large amounts of memory on 32-bit platforms. This memory
cannot be directly accessed from the kernel without first setting up
a special mapping and is generally harder to work with. If your
driver uses large amounts of memory, however, it will work better on
large systems if it can use high memory. See the <a class="docLink" href="chp-1-sect-8.shtml#chp-1-sect-8">Section 1.8</a> in <a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a> for a detailed
description of how high memory works and how to use it.</p>

<p class="docText">Whenever a new page is allocated to fulfill a memory allocation
request, the kernel builds a list of zones that can be used in the
search. If <tt>_ _GFP_DMA</tt> is specified, only the DMA
zone is searched: if no memory is available at low addresses,
allocation fails. If no special flag is present, both normal and DMA
memory are searched; if <tt>_ _GFP_HIGHMEM</tt> is set, all
three zones are used to search a free page. (Note, however, that
<span class="docEmphasis">kmalloc</span> cannot allocate high memory.)</P>

<p class="docText">The situation is more complicated on <a name="chp-8-ITERM-5692"></a>
<a name="chp-8-ITERM-5693"></a>nonuniform memory access (NUMA)
systems. As a general rule, the allocator attempts to locate memory
local to the processor performing the allocation, although there are
ways of changing that behavior.</p>

<p class="docText">The mechanism behind memory <a name="chp-8-ITERM-5694"></a>zones is
implemented in <i>mm/page_alloc.c</i>, while
initialization of the zone resides in platform-specific files,
usually in <i>mm/init.c</i> within the
<i>arch</i> tree. We'll revisit these
topics in <a class="docLink" href="chp-15.shtml#chp-15">Chapter 15</a>.</p>



<a name="chp-8-sect-1.2"></a>
<h4 class="docSection2Title">8.1.2. The Size Argument</h4>

<p class="docText">The kernel
manages<a name="chp-8-ITERM-5695"></a>
<a name="chp-8-ITERM-5696"></a> the system's
<span class="docEmphasis">physical</span><a name="chp-8-ITERM-5697"></a>
<a name="chp-8-ITERM-5698"></a> memory, which is available only in
page-sized chunks. As a result, <span class="docEmphasis">kmalloc</span> looks
rather different from a typical user-space
<span class="docEmphasis">malloc</span> implementation. A simple, heap-oriented
allocation technique would quickly run into trouble; it would have a
hard time working around the page boundaries. Thus, the kernel uses a
special page-oriented allocation technique to get the best use from
the system's RAM.</p>

<p class="docText">Linux handles memory allocation by creating a set of pools of memory
objects of fixed sizes. Allocation requests are handled by going to a
pool that holds sufficiently large objects and handing an entire
memory chunk back to the requester. The memory management scheme is
quite complex, and the details of it are not normally all that
interesting to device driver writers.</p>

<p class="docText">The one thing driver developers should keep in mind, though, is that
the kernel can allocate only certain predefined, fixed-size byte
arrays. If you ask for an arbitrary amount of memory,
you're likely to get slightly more than you asked
for, up to twice as much. Also, programmers should remember that the
smallest allocation that <span class="docEmphasis">kmalloc</span> can handle is
as big as 32 or 64 bytes, depending on the page size used by the
system's architecture.</p>

<p class="docText">There is an upper limit to the <a name="chp-8-ITERM-5699"></a> <a name="chp-8-ITERM-5700"></a> <a name="chp-8-ITERM-5701"></a> <a name="chp-8-ITERM-5702"></a>size of memory chunks that can be
allocated by <span class="docEmphasis">kmalloc</span>. That limit varies
depending on architecture and kernel configuration options. If your
code is to be completely portable, it cannot count on being able to
allocate anything larger than 128 KB. If you need more than a few
kilobytes, however, there are better ways than
<span class="docEmphasis">kmalloc</span> to obtain memory, which we describe
later in this chapter.</P>



<ul></UL></TD></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-8.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-8-sect-2.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
