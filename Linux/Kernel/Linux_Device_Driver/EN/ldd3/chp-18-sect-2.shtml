<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>18.2. tty_driver Function Pointers</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-18-sect-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-18-sect-3.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-18-sect-2"></a>
<H3 class="docSection1Title">18.2. tty_driver Function Pointers</H3>

<p class="docText">Finally, the <span class="docEmphasis">tiny_tty</span> driver declares four
<a name="chp-18-ITERM-7919"></a>
<a name="chp-18-ITERM-7920"></a>
<a name="chp-18-ITERM-7921"></a> <a name="chp-18-ITERM-7922"></a>function pointers.</p>

<a name="chp-18-sect-2.1"></a>
<h4 class="docSection2Title">18.2.1. open and close</h4>

<p class="docText">The <span class="docEmphasis">open</span> function is called by the tty core when
a user calls <tt>open</tt> on the device node the tty
driver is assigned to. The tty core calls this with a pointer to the
<tt>tty_struct</tt> structure assigned to this device, and
a file pointer. The <tt>open</tt> field must be set by a
tty driver for it to work properly; otherwise,
<tt>-ENODEV</tt> is returned to the user when open is
called.</p>

<p class="docText">When this <span class="docEmphasis">open</span><a name="chp-18-ITERM-7923"></a> <a name="chp-18-ITERM-7924"></a> <a name="chp-18-ITERM-7925"></a> <a name="chp-18-ITERM-7926"></a> function is called, the tty
driver is expected to either save some data within the
<tt>tty_struct</tt> variable that is passed to it, or save
the data within a static array that can be referenced based on the
minor number of the port. This is necessary so the tty driver knows
which device is being referenced when the later close, write, and
other functions are called.</P>

<p class="docText">The <span class="docEmphasis">tiny_tty</span> driver saves a pointer within the
tty structure, as can be seen with the following code:</p>

<pre>static int tiny_open(struct tty_struct *tty, struct file *file)
{
    struct tiny_serial *tiny;
    struct timer_list *timer;
    int index;

    /* initialize the pointer in case something fails */
    tty-&gt;driver_data = NULL;

    /* get the serial object associated with this tty pointer */
    index = tty-&gt;index;
    tiny = tiny_table[index];
    if (tiny =  = NULL) {
        /* first time accessing this device, let's create it */
        tiny = kmalloc(sizeof(*tiny), GFP_KERNEL);
        if (!tiny)
            return -ENOMEM;

        init_MUTEX(&amp;tiny-&gt;sem);
        tiny-&gt;open_count = 0;
        tiny-&gt;timer = NULL;

        tiny_table[index] = tiny;
    }

    down(&amp;tiny-&gt;sem);

    /* save our structure within the tty structure */
    tty-&gt;driver_data = tiny;
    tiny-&gt;tty = tty;</pre><br>


<p class="docText">In this code, the <tt>tiny_serial</tt> structure is saved
within the <tt>tty</tt> structure. This allows the
<span class="docEmphasis">tiny_write</span>,
<span class="docEmphasis">tiny_write_room</span>, and
<span class="docEmphasis">tiny_close</span> functions to retrieve the
<tt>tiny_serial</tt> structure and manipulate it properly.</P>

<p class="docText">The <tt>tiny_serial</tt> structure is defined as:</p>

<pre>struct tiny_serial {
    struct tty_struct   *tty;       /* pointer to the tty for this device */
    int         open_count; /* number of times this port has been opened */
    struct semaphore    sem;        /* locks this structure */
    struct timer_list   *timer;

};</pre><br>


<p class="docText">As we've seen, the <tt>open_count</tt>
variable is initialized to <tt>0</tt> in the open call the
first time the port is opened. This is a typical reference counter,
needed because the <span class="docEmphasis">open</span> and
<span class="docEmphasis">close</span> functions of a tty driver can be called
multiple times for the same device in order to allow multiple
processes to read and write data. To handle everything correctly, a
count of how many times the port has been opened or closed must be
kept; the driver increments and decrements the count as the port is
used. When the port is opened for the first time, any needed hardware
initialization and memory allocation can be done. When the port is
closed for the last time, any needed hardware shutdown and memory
cleanup can be done.</P>

<p class="docText">The rest of the <span class="docEmphasis">tiny_open</span> function shows how to
keep track of the number of times the device has been opened:</p>

<pre>    ++tiny-&gt;open_count;
    if (tiny-&gt;open_count =  = 1) {
        /* this is the first time this port is opened */
        /* do any hardware initialization needed here */</pre><BR>


<p class="docText">The <span class="docEmphasis">open</span> function must return either a negative
error number if something has happened to prevent the open from being
successful, or a <tt>0</tt> to indicate success.</p>

<p class="docText">The <span class="docEmphasis">close</span> function pointer is called by the tty
core when <span class="docEmphasis">close</span> is called by a user on the file
handle that was previously created with a call to
<span class="docEmphasis">open</span>. This indicates that the device should be
closed at this time. However, since the <span class="docEmphasis">open</span>
function can be called more than once, the <span class="docEmphasis">close</span>
function also can be called more than once. So this function should
keep track of how many times it has been called to determine if the
hardware should really be shut down at this time. The
<span class="docEmphasis">tiny_tty</span> driver does this with the following
code:</p>

<pre>static void do_close(struct tiny_serial *tiny)
{
    down(&amp;tiny-&gt;sem);

    if (!tiny-&gt;open_count) {
        /* port was never opened */
        goto exit;
    }

    --tiny-&gt;open_count;
    if (tiny-&gt;open_count &lt;= 0) {
        /* The port is being closed by the last user. */
        /* Do any hardware specific stuff here */

        /* shut down our timer */
        del_timer(tiny-&gt;timer);
    }
exit:
    up(&amp;tiny-&gt;sem);
}

static void tiny_close(struct tty_struct *tty, struct file *file)
{
    struct tiny_serial *tiny = tty-&gt;driver_data;

    if (tiny)
        do_close(tiny);
}</pre><br>


<p class="docText">The <span class="docEmphasis">tiny_close</span><a name="chp-18-ITERM-7927"></a>
<a name="chp-18-ITERM-7928"></a>
function just calls the
<span class="docEmphasis">do_close</span><a name="chp-18-ITERM-7929"></a>
<a name="chp-18-ITERM-7930"></a>
function to do the real work of closing the device. This is done so
that the shutdown logic does not have to be duplicated here and when
the driver is unloaded and a port is open. The
<span class="docEmphasis">close</span> function has no return value, as it is not
supposed to be able <a name="chp-18-ITERM-7931"></a> <a name="chp-18-ITERM-7932"></a> <a name="chp-18-ITERM-7933"></a> <a name="chp-18-ITERM-7934"></a>to fail.</p>


<a name="chp-18-sect-2.2"></a>
<h4 class="docSection2Title">18.2.2. Flow of Data</h4>

<p class="docText">The<a name="chp-18-ITERM-7935"></a>
<a name="chp-18-ITERM-7936"></a> <a name="chp-18-ITERM-7937"></a> <span class="docEmphasis">write</span>
function call is called by the user when there is data to be sent to
the hardware. First the tty core receives the call, and then it
passes the data on to the tty driver's
<span class="docEmphasis">write</span> function. The tty core also tells the tty
driver the size of the data being sent.</p>

<p class="docText">Sometimes, because of the speed and buffer capacity of the tty
hardware, not all characters requested by the writing program can be
sent at the moment the <span class="docEmphasis">write</span> function is called.
The <span class="docEmphasis">write</span> function should return the number of
characters that was able to be sent to the hardware (or queued to be
sent at a later time), so that the user program can check if all of
the data really was written. It is much easier for this check to be
done in user space than it is for a kernel driver to sit and sleep
until all of the requested data is able to be sent out. If any errors
happen during the <span class="docEmphasis">write</span> call, a negative error
value should be returned instead of the number of characters that
were written.</p>

<p class="docText">The <span class="docEmphasis">write</span> function can be called from both
interrupt context and user context. This is important to know, as the
tty driver should not call any functions that might sleep when it is
in interrupt context. These include any function that might possibly
call <span class="docEmphasis">schedule</span>, such as the common functions
<span class="docEmphasis">copy_from_user</span>, <span class="docEmphasis">kmalloc</span>,
and <span class="docEmphasis">printk</span>. If you really want to sleep, make
sure to check first whether the driver is
<a name="chp-18-ITERM-7938"></a>in interrupt context by
calling <span class="docEmphasis">in_interrupt</span>.</p>

<p class="docText">This sample tiny tty driver does not connect to any real hardware, so
its write function simply records in the kernel debug log what data
was supposed to be written. It does this with the following code:</p>

<pre>static int tiny_write(struct tty_struct *tty, 
              const unsigned char *buffer, int count)
{
    struct tiny_serial *tiny = tty-&gt;driver_data;
    int i;
    int retval = -EINVAL;

    if (!tiny)
        return -ENODEV;

    down(&amp;tiny-&gt;sem);

    if (!tiny-&gt;open_count)
        /* port was not opened */
        goto exit;

    /* fake sending the data out a hardware port by
     * writing it to the kernel debug log.
     */
    printk(KERN_DEBUG "%s - ", _ _FUNCTION_ _);
    for (i = 0; i &lt; count; ++i)
        printk("%02x ", buffer[i]);
    printk("\n");
        
exit:
    up(&amp;tiny-&gt;sem);
    return retval;
}</pre><br>


<p class="docText">The <span class="docEmphasis">write</span> function can be called when the tty
subsystem itself needs to send some data out the tty device. This can
happen if the tty driver does not implement the
<span class="docEmphasis">put_char</span> function in the
<tt>tty_struct</tt>. In that case, the tty core uses the
<span class="docEmphasis">write</span> function callback with a data size of 1.
This commonly happens when the tty core wants to convert a newline
character to a line feed plus a newline character. The biggest
problem that can occur here is that the tty driver's
<span class="docEmphasis">write</span> function must not return
<tt>0</tt> for this kind of call. This means that the
driver must write that byte of data to the device, as the caller (the
tty core) does not buffer the data and try again at a later time. As
the <span class="docEmphasis">write</span> function can not determine if it is
being called in the place of <span class="docEmphasis">put_char</span>, even if
only one byte of data is being sent, try to implement the
<span class="docEmphasis">write</span> function so it always writes at least one
byte before returning. A number of the current USB-to-serial tty
drivers do not follow this rule, and because of this, some terminals
types do not work properly when connected to them.</p>

<p class="docText">The <span class="docEmphasis">write_room</span> function is called when the tty
core wants to know how much room in the write buffer the tty driver
has available. This number changes over time as characters empty out
of the write buffers and as the <span class="docEmphasis">write</span> function
is called, adding characters to the buffer.</p>

<pre>static int tiny_write_room(struct tty_struct *tty) 
{
    struct tiny_serial *tiny = tty-&gt;driver_data;
    int room = -EINVAL;

    if (!tiny)
        return -ENODEV;

    down(&amp;tiny-&gt;sem);
    
    if (!tiny-&gt;open_count) {
        /* port was not opened */
        goto exit;
    }

    /* calculate how much room is left in the device */
    room = 255;

exit:
    up(&amp;tiny-&gt;sem);
    return room;
}</pre><BR>



<a name="chp-18-sect-2.3"></a>
<h4 class="docSection2Title">18.2.3. Other Buffering Functions</H4>

<p class="docText">The
<span class="docEmphasis">chars_in_buffer</span><a name="chp-18-ITERM-7939"></a>
<a name="chp-18-ITERM-7940"></a>
<a name="chp-18-ITERM-7941"></a> <a name="chp-18-ITERM-7942"></a>
<a name="chp-18-ITERM-7943"></a>
function in the <tt>tty_driver</tt> structure is not
required in order to have a working tty driver, but it is
recommended. This function is called when the tty core wants to know
how many characters are still remaining in the tty
driver's write buffer to be sent out. If the driver
can store characters before it sends them out to the hardware, it
should implement this function in order for the tty core to be able
to determine if all of the data in the driver has drained out.</P>

<p class="docText">Three functions callbacks in the <tt>tty_driver</tt>
structure can be used to flush any remaining data that the driver is
holding on to. These are not required to be implemented, but are
recommended if the tty driver can buffer data before it sends it to
the hardware. The first two function callbacks are called
<span class="docEmphasis">flush_chars</span> and
<span class="docEmphasis">wait_until_sent</span>. These functions are called when
the tty core has sent a number of characters to the tty driver using
the <span class="docEmphasis">put_char</span> function callback. The
<span class="docEmphasis">flush_chars</span> function callback is called when the
tty core wants the tty driver to start sending these characters out
to the hardware, if it hasn't already started. This
function is allowed to return before all of the data is sent out to
the hardware. The <span class="docEmphasis">wait_until_sent</span> function
callback works much the same way; but it must wait until all of the
characters are sent before returning to the tty core or until the
passed in <span class="docEmphasis">timeout</span> value has expired, whichever
occurrence happens first. The tty driver is allowed to sleep within
this function in order to complete it. If the timeout value passed to
the <span class="docEmphasis">wait_until_sent</span> function callback is set to
<tt>0</tt>, the function should wait until it is finished
with the operation.</p>

<p class="docText">The remaining data flushing function callback is
<span class="docEmphasis">flush_buffer</span>. It is called by the tty core when
the tty driver is to flush all of the data still in its write buffers
out of memory. Any data remaining in the buffer is lost and not sent
to the device.</p>


<a name="chp-18-sect-2.4"></a>
<h4 class="docSection2Title">18.2.4. No read Function?</H4>

<p class="docText">With only these functions, the <span class="docEmphasis">tiny_tty</span> driver
can be registered, a device node opened, data written to the device,
the device node closed, and the driver unregistered and unloaded from
the kernel. But the tty core and <tt>tty_driver</tt>
structure do not provide a read function; in other words; no function
callback exists to get data from the driver to the tty core.</p>

<p class="docText">Instead of a conventional <a name="chp-18-ITERM-7944"></a>
<a name="chp-18-ITERM-7945"></a>read function, the tty driver is
responsible for sending any data received from the hardware to the
tty core when it is received. The tty core buffers the data until it
is asked for by the user. Because of the buffering logic the tty core
provides, it is not necessary for every tty driver to implement its
own buffering logic. The tty core notifies the tty driver when a user
wants the driver to stop and start sending data, but if the internal
tty buffers are full, no such notification occurs.</P>

<p class="docText">The tty core buffers the data received by the tty drivers in a
structure called <tt>struct</tt>
<tt>tty_flip_buffer</tt>. A flip buffer is a structure that
contains two main data arrays. Data being received from the tty
device is stored in the first array. When that array is full, any
user waiting on the data is notified that data is available to be
read. While the user is reading the data from this array, any new
incoming data is being stored in the second array. When that array is
finished, the data is again flushed to the user, and the driver
starts to fill up the first array. Essentially, the data being
received "flips" from one buffer to
the other, hopefully not overflowing both of them. To try to prevent
data from being lost, a tty driver can monitor how big the incoming
array is, and, if it fills up, tell the tty driver to flush the
buffer at this moment in time, instead of waiting for the next
available chance.</P>

<p class="docText">The details of the
<tt>struct</tt><a name="chp-18-ITERM-7946"></a>
<a name="chp-18-ITERM-7947"></a> <a name="chp-18-ITERM-7948"></a>
<tt>tty_flip_buffer</tt> structure do not really matter to
the tty driver, with one exception, the variable
<tt>count</tt>. This variable contains how many bytes are
currently left in the buffer that are being used for receiving data.
If this value is equal to the value
<tt>TTY_FLIPBUF_SIZE</tt>, the flip buffer needs to be
flushed out to the user with a call to
<span class="docEmphasis">tty_flip_buffer_push</span>. This is shown in the
following bit of code:</P>

<pre>for (i = 0; i &lt; data_size; ++i) {
    if (tty-&gt;flip.count &gt;= TTY_FLIPBUF_SIZE)
        tty_flip_buffer_push(tty);
    tty_insert_flip_char(tty, data[i], TTY_NORMAL);
}
tty_flip_buffer_push(tty);</pre><br>


<p class="docText">Characters that are received from the tty driver to be sent to the
user are added to the flip buffer with a call to
<span class="docEmphasis">tty_insert_flip_char</span>. The first parameter of
this function is the <tt>struct</tt>
<tt>tty_struct</tt> the data should be saved in, the second
parameter is the character to be saved, and the third parameter is
any flags that should be set for this character. The flags value
should be set to <tt>TTY_NORMAL</tt> if this is a normal
character being received. If this is a special type of character
indicating an error receiving data, it should be set to
<tt>TTY_BREAK</tt>, <tt>TTY_FRAME</tt>,
<tt>TTY_PARITY</tt>, or <tt>TTY_OVERRUN</tt>,
depending on the error.</p>

<p class="docText">In order to "push" the data to the
user, a call to <span class="docEmphasis">tty_flip_buffer_push</span> is made.
This function should also be called if the flip buffer is about to
overflow, as is shown in this example. So whenever data is added to
the flip buffer, or when the flip buffer is full, the tty driver must
call <span class="docEmphasis">tty_flip_buffer_push</span>. If the tty driver can
accept data at very high rates, the
<tt>tty-&gt;low_latency</tt> flag should be set, which
causes the call to <span class="docEmphasis">tty_flip_buffer_push</span> to be
immediately executed when called. Otherwise, the
<span class="docEmphasis">tty_flip_buffer_push</span> call schedules itself to
push the data out<a name="chp-18-ITERM-7949"></a> <a name="chp-18-ITERM-7950"></a> <a name="chp-18-ITERM-7951"></a> <a name="chp-18-ITERM-7952"></a> of the buffer at some later point in
the near future.</p>



<ul></UL></TD></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-18-sect-1.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-18-sect-3.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
