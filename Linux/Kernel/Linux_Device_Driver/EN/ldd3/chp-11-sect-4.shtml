<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>11.4. Other Portability Issues</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-11-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-11-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><a name="chp-11-sect-4"></a>
<h3 class="docSection1Title" >11.4. Other Portability Issues</h3>

<p class="docText">In addition to data typing, <a name="chp-11-ITERM-6217"></a>there
are a few other software issues to keep in mind when writing a driver
if you want it to be portable across Linux platforms.</p>

<p class="docText">A general rule is to be suspicious of explicit constant values.
Usually the code has been parameterized using preprocessor macros.
This section lists the most important portability problems. Whenever
you encounter other values that have been parameterized, you can find
hints in the header files and in the device drivers distributed with
the official kernel.</p>

<a name="chp-11-sect-4.1"></a>
<H4 class="docSection2Title">11.4.1. Time Intervals</h4>

<p class="docText"><a name="chp-11-ITERM-6218"></a>
<a name="chp-11-ITERM-6219"></a><a name="chp-11-ITERM-6220"></a><a name="chp-11-ITERM-6221"></a><a name="chp-11-ITERM-6222"></a>When dealing with time
intervals, don't assume that there are 1000 jiffies
per second. Although this is currently true for the i386
architecture, not every Linux platform runs at this speed. The
assumption can be false even for the x86 if you play with the
<tt>HZ</tt> value (as some people do), and nobody knows
what will happen in future kernels. Whenever you calculate time
intervals using jiffies, scale your times using <tt>HZ</tt>
(the number of timer interrupts per second). For example, to check
against a timeout of half a second, compare the elapsed time against
<tt>HZ/2</tt>. More generally, the number of jiffies
corresponding to <tt>msec</tt> milliseconds is always
<tt>msec*HZ/1000</tt>.</P>


<a name="chp-11-sect-4.2"></a>
<H4 class="docSection2Title">11.4.2. Page Size</h4>

<p class="docText"><a name="chp-11-ITERM-6223"></a>
<a name="chp-11-ITERM-6224"></a>
<a name="chp-11-ITERM-6225"></a><a name="chp-11-ITERM-6226"></a><a name="chp-11-ITERM-6227"></a><a name="chp-11-ITERM-6228"></a>When playing games with memory, remember
that a memory page is <tt>PAGE_SIZE</tt> bytes, not 4 KB.
Assuming that the page size is 4 KB and hardcoding the value is a
common error among PC programmers, instead, supported platforms show
page sizes from 4 KB to 64 KB, and sometimes they differ between
different implementations of the same platform. The relevant macros
are <tt>PAGE_SIZE</tt> and <tt>PAGE_SHIFT</tt>.
The latter contains the number of bits to shift an address to get its
page number. The number currently is 12 or greater for pages that are
4 KB and larger. The macros are defined in
<i>&lt;asm/page.h&gt;</i>; user-space programs can use
the <span class="docEmphasis">getpagesize</span> library function if they ever
need the information.</P>

<p class="docText">Let's look at a nontrivial situation. If a driver
needs 16 KB for temporary data, it shouldn't specify
an <tt>order</tt> of <tt>2</tt> to
<span class="docEmphasis">get_free_pages</span>. You need a portable solution.
Such a solution, fortunately, has been written by the kernel
developers and is called <span class="docEmphasis">get_order</span>:</p>

<pre>#include &lt;asm/page.h&gt;
int order = get_order(16*1024);
buf = get_free_pages(GFP_KERNEL, order);</pre><BR>


<p class="docText">Remember that the argument to <span class="docEmphasis">get_order</span> must be
a power of two.</P>


<a name="chp-11-sect-4.3"></a>
<H4 class="docSection2Title">11.4.3. Byte Order</h4>

<p class="docText"><a name="chp-11-ITERM-6229"></a><a name="chp-11-ITERM-6230"></a><a name="chp-11-ITERM-6231"></a>Be careful not to make assumptions about
byte ordering. Whereas the PC stores multibyte values low-byte first
(little end first, thus little-endian), some high-level platforms
work the other way (big-endian). Whenever possible, your code should
be written such that it does not care about byte ordering in the data
it manipulates. However, sometimes a driver needs to build an integer
number out of single bytes or do the opposite, or it must communicate
with a device that expects a specific order.</p>

<p class="docText">The include file <i>&lt;asm/byteorder.h&gt;</i> defines
either <tt>_ _BIG_ENDIAN</tt> or <tt>_
_LITTLE_ENDIAN</tt>, depending on the
processor's byte ordering. When dealing with byte
ordering issues, you could code a bunch of <tt>#ifdef _
_LITTLE_ENDIAN</tt> conditionals, but there is a better way. The
Linux kernel defines a set of macros that handle conversions between
the processor's byte ordering and that of the data
you need to store or load in a specific byte order. For example:</P>

<pre>u32 cpu_to_le32 (u32);
u32 le32_to_cpu (u32);</pre><BR>


<p class="docText">These two macros convert a value from whatever the CPU uses to an
unsigned, little-endian, 32-bit quantity and back. They work whether
your CPU is big-endian or little-endian and, for that matter, whether
it is a 32-bit processor or not. They return their argument unchanged
in cases where there is no work to be done. Use of these macros makes
it easy to write portable code without having to use a lot of
conditional compilation constructs.</P>

<p class="docText">There are dozens of similar routines; you can see the full list in
<i>&lt;linux/byteorder/big_endian.h&gt;</I> and
<I>&lt;linux/byteorder/little_endian.h&gt;</i>. After a
while, the pattern is not hard to follow.
<span class="docEmphasis">be64_to_cpu</span> converts an unsigned, big-endian,
64-bit value to the internal CPU representation.
<span class="docEmphasis">le16_to_cpus</span>, instead, handles signed,
little-endian, 16-bit quantities. When dealing with pointers, you can
also use functions like <span class="docEmphasis">cpu_to_le32p</span>, which take
a pointer to the value to be converted rather than the value itself.
See the include file for the rest.</p>


<a name="chp-11-sect-4.4"></a>
<h4 class="docSection2Title">11.4.4. Data Alignment</h4>

<p class="docText"><a name="chp-11-ITERM-6232"></a>
<a name="chp-11-ITERM-6233"></a><a name="chp-11-ITERM-6234"></a><a name="chp-11-ITERM-6235"></a>
<a name="chp-11-ITERM-6236"></a><a name="chp-11-ITERM-6237"></a>
<a name="chp-11-ITERM-6238"></a><a name="chp-11-ITERM-6239"></a>The last problem worth
considering when writing portable code is how to access unaligned
data—for example, how to read a 4-byte value stored at an
address that isn't a multiple of 4 bytes. i386 users
often access unaligned data items, but not all architectures permit
it. Many modern architectures generate an exception every time the
program tries unaligned data transfers; data transfer is handled by
the exception handler, with a great performance penalty. If you need
to access unaligned data, you should use the following macros:</P>

<pre>#include &lt;asm/unaligned.h&gt;
get_unaligned(ptr);
put_unaligned(val, ptr);</pre><br>


<p class="docText">These macros are typeless and work for every data item, whether
it's one, two, four, or eight bytes long. They are
defined with any kernel version.</p>

<p class="docText"><a name="chp-11-ITERM-6240"></a>Another issue related to alignment is
portability of data structures across platforms. The same data
structure (as defined in the C-language source file) can be compiled
differently on different platforms. The compiler arranges structure
fields to be aligned according to conventions that differ from
platform to platform.</P>

<p class="docText"><a name="chp-11-ITERM-6241"></a>In order to write data structures for data
items that can be moved across architectures, you should always
enforce natural alignment of the data items in addition to
standardizing on a specific endianness. <span class="docEmphasis">Natural
alignment</span> means storing data items at an address that is a
multiple of their size (for instance, 8-byte items go in an address
multiple of 8). To enforce natural alignment while preventing the
compiler to arrange the fields in unpredictable ways, you should use
filler fields that avoid leaving holes in the data structure.</p>

<p class="docText"><a name="chp-11-ITERM-6242"></a>
<a name="chp-11-ITERM-6243"></a><a name="chp-11-ITERM-6244"></a><a name="chp-11-ITERM-6245"></a>To show how alignment is
enforced by the compiler, the <span class="docEmphasis">dataalign</span> program
is distributed in the <i>misc-progs</I> directory of
the sample code, and an equivalent <span class="docEmphasis">kdataalign</span>
module is part of <i>misc-modules</I>. This is the
output of the program on several platforms and the output of the
module on the SPARC64:</p>

<pre>arch  Align:  char  short  int  long   ptr long-long  u8 u16 u32 u64
i386            1     2     4     4     4     4        1   2   4   4
i686            1     2     4     4     4     4        1   2   4   4
alpha           1     2     4     8     8     8        1   2   4   8
armv4l          1     2     4     4     4     4        1   2   4   4
ia64            1     2     4     8     8     8        1   2   4   8
mips            1     2     4     4     4     8        1   2   4   8
ppc             1     2     4     4     4     8        1   2   4   8
sparc           1     2     4     4     4     8        1   2   4   8
sparc64         1     2     4     4     4     8        1   2   4   8
x86_64          1     2     4     8     8     8        1   2   4   8

kernel: arch  Align: char short int long  ptr long-long u8 u16 u32 u64
kernel: sparc64        1    2    4    8    8     8       1   2   4   8</pre><br>


<p class="docText">It's interesting to note that not all platforms
align 64-bit values on 64-bit boundaries, so you need filler fields
to enforce alignment and ensure portability.</p>

<p class="docText">Finally, be aware that the compiler may quietly insert padding into
structures itself to ensure that every field is aligned for good
performance on the target processor. If you are defining a structure
that is intended to match a structure expected by a device, this
automatic padding may thwart your attempt. The way around this
problem is to tell the compiler that the structure must be
"packed," with no fillers added.
For example, the kernel header file
<i>&lt;linux/edd.h&gt;</i> defines several data
structures used in interfacing with the x86 BIOS, and it includes the
following definition:</p>

<pre>struct {
        u16 id;
        u64 lun;
        u16 reserved1;
        u32 reserved2;
} _ _attribute_ _ ((packed)) scsi;</pre><br>


<p class="docText">Without the <tt>_ _attribute_ _ ((packed))</tt>, the
<tt>lun</tt> field would be preceded by two filler bytes or
six if we compile the structure on a 64-bit platform.</p>


<a name="chp-11-sect-4.5"></a>
<h4 class="docSection2Title">11.4.5. Pointers and Error Values</h4>

<p class="docText">Many internal kernel functions return a pointer value to the caller.
Many of those functions can also fail.
In<a name="chp-11-ITERM-6246"></a>
<a name="chp-11-ITERM-6247"></a>
<a name="chp-11-ITERM-6248"></a>
<a name="chp-11-ITERM-6249"></a>
most cases, failure is indicated by returning a
<tt>NULL</tt> pointer value. This technique works, but it
is unable to communicate the exact nature of the problem. Some
interfaces really need to return an actual error code so that the
caller can make the right decision based on what actually went wrong.</p>

<p class="docText">A number of kernel interfaces return this information by encoding the
error code in a pointer value. Such functions must be used with care,
since their return value cannot simply be compared against
<tt>NULL</tt>. To help in the creation and use of this sort
of interface, a small set of functions has been made available (in
<i>&lt;linux/err.h&gt;</i>).</P>

<p class="docText">A function returning a pointer type can return an error value with:</p>

<pre>void *ERR_PTR(long error);</pre><BR>


<p class="docText">where <tt>error</tt> is the usual negative error code. The
caller can use <span class="docEmphasis">IS_ERR</span> to test whether a returned
pointer is an error code or not:</P>

<pre>long IS_ERR(const void *ptr);</pre><br>


<p class="docText">If you need the actual error code, it can be extracted with:</p>

<pre>long PTR_ERR(const void *ptr);</pre><br>


<p class="docText">You should use <span class="docEmphasis">PTR_ERR</span> only on a value for which
<span class="docEmphasis">IS_ERR</span> returns a true value; any other value is
a valid<a name="chp-11-ITERM-6250"></a>
pointer.</P>



<ul></UL></TD></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-11-sect-3.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-11-sect-5.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
