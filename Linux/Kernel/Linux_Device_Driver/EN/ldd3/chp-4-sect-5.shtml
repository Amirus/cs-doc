<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>4.5. Debugging System Faults</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-4-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-4-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><a name="chp-4-sect-5"></a>
<h3 class="docSection1Title">4.5. Debugging System Faults</h3>

<p class="docText">Even if you've used all the<a name="chp-4-ITERM-4865"></a>
<a name="chp-4-ITERM-4866"></a>
<a name="chp-4-ITERM-4867"></a> monitoring and debugging techniques,
sometimes bugs remain in the driver, and the system faults when the
driver is executed. When this happens, it's
important to be able to collect as much information as possible to
solve the problem.</p>

<p class="docText">Note that "fault"
doesn't mean
"panic." The Linux code is robust
enough to respond gracefully to most errors: a fault usually results
in the destruction of the current process while the system goes on
working. The system <span class="docEmphasis">can</span> panic, and it may if a
fault happens outside of a process's context or if
some vital part of the system is compromised. But when the problem is
due to a driver error, it usually results only in the sudden death of
the process unlucky enough to be using the driver. The only
unrecoverable damage when a process is destroyed is that some memory
allocated to the process's context is lost; for
instance, dynamic lists allocated by the driver through
<span class="docEmphasis">kmalloc</span> might be lost. However, since the kernel
calls the <span class="docEmphasis">close</span> operation for any open device
when a process dies, your driver can release what was allocated by
the <span class="docEmphasis">open</span> method.</p>

<p class="docText">Even though an oops usually does not bring down the entire system,
you may well find yourself needing to reboot after one happens. A
buggy driver can leave hardware in an unusable state, leave kernel
resources in an inconsistent state, or, in the worst case, corrupt
kernel memory in random places. Often you can simply unload your
buggy driver and try again after an oops. If, however, you see
anything that suggests that the system as a whole is not well, your
best bet is usually to reboot immediately.</P>

<p class="docText">We've already said that when kernel code misbehaves,
an informative message is printed on the console. The next section
explains how to decode and use such messages. Even though they appear
rather obscure to the novice, processor dumps are full of interesting
information, often sufficient to pinpoint a program bug without the
need for additional testing.</p>

<a name="chp-4-sect-5.1"></a>
<H4 class="docSection2Title">4.5.1. Oops Messages</H4>

<p class="docText">Most bugs show themselves in<a name="chp-4-ITERM-4868"></a>
<a name="chp-4-ITERM-4869"></a>
<tt>NULL</tt> pointer dereferences or by the use of other
incorrect pointer values. The usual outcome of such bugs is an oops
message.</p>

<p class="docText"><a name="chp-4-ITERM-4870"></a>Almost any address used by
the processor is a virtual address and is mapped to physical
addresses through a complex structure of page tables (the exceptions
are physical addresses used with the memory management subsystem
itself). When an invalid pointer is dereferenced, the paging
mechanism fails to map the pointer to a physical address, and the
processor signals a <span class="docEmphasis">page fault</span> to the operating
system. If the address is not valid, the kernel is not able to
"page in" the missing address; it
(usually) generates an oops if this happens while the processor is in
supervisor mode.</p>

<p class="docText">An oops displays the processor status at the time of the fault,
including the contents of the CPU registers and other seemingly
incomprehensible information. The message is generated by
<span class="docEmphasis">printk</span> statements in the fault handler
(<i>arch/*/kernel/traps.c</I>) and is dispatched as
described earlier in <a class="docLink" href="chp-4-sect-2.shtml#chp-4-sect-2.1">Section 4.2.1</a>).</p>

<p class="docText">Let's look at one such message.
Here's what results from dereferencing a
<tt>NULL</tt> pointer on a PC running Version 2.6 of the
kernel. The most relevant information here is the instruction pointer
(<tt>EIP</tt>), the address of the faulty instruction.</P>

<pre>Unable to handle kernel NULL pointer dereference at virtual address 00000000
 printing eip:
d083a064
Oops: 0002 [#1]
SMP 
CPU:    0
EIP:    0060:[&lt;d083a064&gt;]    Not tainted
EFLAGS: 00010246   (2.6.6) 
EIP is at faulty_write+0x4/0x10 [faulty]
eax: 00000000   ebx: 00000000   ecx: 00000000   edx: 00000000
esi: cf8b2460   edi: cf8b2480   ebp: 00000005   esp: c31c5f74
ds: 007b   es: 007b   ss: 0068
Process bash (pid: 2086, threadinfo=c31c4000 task=cfa0a6c0)
Stack: c0150558 cf8b2460 080e9408 00000005 cf8b2480 00000000 cf8b2460 cf8b2460 
       fffffff7 080e9408 c31c4000 c0150682 cf8b2460 080e9408 00000005 cf8b2480 
       00000000 00000001 00000005 c0103f8f 00000001 080e9408 00000005 00000005 
Call Trace:
 [&lt;c0150558&gt;] vfs_write+0xb8/0x130
 [&lt;c0150682&gt;] sys_write+0x42/0x70
 [&lt;c0103f8f&gt;] syscall_call+0x7/0xb

Code: 89 15 00 00 00 00 c3 90 8d 74 26 00 83 ec 0c b8 00 a6 83 d0</pre><BR>


<p class="docText">This message was generated by writing to a device owned by the
<span class="docEmphasis">faulty</span><a name="chp-4-ITERM-4871"></a>
<a name="chp-4-ITERM-4872"></a> module, a module built deliberately
to demonstrate failures. The implementation of the
<span class="docEmphasis">write</span><a name="chp-4-ITERM-4873"></a>
<a name="chp-4-ITERM-4874"></a> method of
<I>faulty.c</i> is trivial:</p>

<pre>ssize_t faulty_write (struct file *filp, const char _ _user *buf, size_t count,
        loff_t *pos)
{
    /* make a simple fault by dereferencing a NULL pointer */
    *(int *)0 = 0;
    return 0;
}</pre><br>


<p class="docText">As you can see, what we do here is dereference a
<tt>NULL</tt> pointer. Since <tt>0</tt> is never
a valid pointer value, a fault occurs, which the kernel turns into
the oops message shown earlier. The calling process is then killed.</p>

<p class="docText">The <span class="docEmphasis">faulty</span> module has a different fault
condition in its<a name="chp-4-ITERM-4875"></a>
<a name="chp-4-ITERM-4876"></a> <span class="docEmphasis">read</span>
implementation:</P>

<pre>ssize_t faulty_read(struct file *filp, char _ _user *buf,
            size_t count, loff_t *pos)
{
    int ret;
    char stack_buf[4];

    /* Let's try a buffer overflow  */
    memset(stack_buf, 0xff, 20);
    if (count &gt; 4)
        count = 4; /* copy 4 bytes to the user */
    ret = copy_to_user(buf, stack_buf, count);
    if (!ret)
        return count;
    return ret;
}</pre><BR>


<p class="docText"><a name="chp-4-ITERM-4877"></a> <a name="chp-4-ITERM-4878"></a>
<a name="chp-4-ITERM-4879"></a>This method copies a string into a
local variable; unfortunately, the string is longer than the
destination array. The resulting buffer overflow causes an oops when
the function returns. Since the <tt>return</tt> instruction
brings the instruction pointer to nowhere land, this kind of fault is
much harder to trace, and you can get something such as the
following:</P>

<pre>EIP:    0010:[&lt;00000000&gt;]
Unable to handle kernel paging request at virtual address ffffffff
 printing eip:
ffffffff
Oops: 0000 [#5]
SMP 
CPU:    0
EIP:    0060:[&lt;ffffffff&gt;]    Not tainted
EFLAGS: 00010296   (2.6.6) 
EIP is at 0xffffffff
eax: 0000000c   ebx: ffffffff   ecx: 00000000   edx: bfffda7c
esi: cf434f00   edi: ffffffff   ebp: 00002000   esp: c27fff78
ds: 007b   es: 007b   ss: 0068
Process head (pid: 2331, threadinfo=c27fe000 task=c3226150)
Stack: ffffffff bfffda70 00002000 cf434f20 00000001 00000286 cf434f00 fffffff7 
       bfffda70 c27fe000 c0150612 cf434f00 bfffda70 00002000 cf434f20 00000000 
       00000003 00002000 c0103f8f 00000003 bfffda70 00002000 00002000 bfffda70 
Call Trace:
 [&lt;c0150612&gt;] sys_read+0x42/0x70
 [&lt;c0103f8f&gt;] syscall_call+0x7/0xb

Code:  Bad EIP value.</pre><br>


<p class="docText">In this case, we see only part of the call stack
(<span class="docEmphasis">vfs_read</span> and <span class="docEmphasis">faulty_read</span>
are missing), and the kernel complains about a "bad
EIP value." That complaint, and the offending
address (<tt>ffffffff</tt>) listed at the beginning are
both hints that the kernel stack has been corrupted.</P>

<p class="docText">In general, when you are confronted with an oops, the first thing to
do is to look at the location where the problem happened, which is
usually listed separately from the call stack. In the first oops
shown above, the relevant line is:</P>

<pre>EIP is at faulty_write+0x4/0x10 [faulty]</pre><br>


<p class="docText">Here we see that we were in the function
<span class="docEmphasis">faulty_write</span><a name="chp-4-ITERM-4880"></a>
<a name="chp-4-ITERM-4881"></a>,
which is located in the <span class="docEmphasis">faulty</span> module (which is
listed in square brackets). The hex numbers indicate that the
instruction pointer was 4 bytes into the function, which appears to
be 10 (hex) bytes long. Often that is enough to figure out what the
problem is.</p>

<p class="docText">If you need more information, the call stack shows you how you got to
where things fell apart. The stack itself is printed in hex form;
with a bit of work, you can often determine the values of local
variables and function parameters from the stack listing. Experienced
kernel developers can benefit from a certain amount of pattern
recognition here; for example, if we look at the stack listing from
the <span class="docEmphasis">faulty_read</span><a name="chp-4-ITERM-4882"></a>
<a name="chp-4-ITERM-4883"></a>
oops:</p>

<pre>Stack: ffffffff bfffda70 00002000 cf434f20 00000001 00000286 cf434f00 fffffff7 
       bfffda70 c27fe000 c0150612 cf434f00 bfffda70 00002000 cf434f20 00000000 
       00000003 00002000 c0103f8f 00000003 bfffda70 00002000 00002000 bfffda70</pre><br>


<p class="docText">The <tt>ffffffff</tt> at the top of the stack is part of
our string that broke things. On the x86 architecture, by default,
the user-space stack starts just below <tt>0xc0000000</tt>;
thus, the recurring value <tt>0xbfffda70</tt> is probably a
user-space stack address; it is, in fact, the address of the buffer
passed to the <span class="docEmphasis">read</span> system call, replicated each
time it is passed down the kernel call chain. On the x86 (again, by
default), kernel space starts at <tt>0xc0000000</tt>, so
values above that are almost certainly kernel-space addresses, and so
on.</P>

<p class="docText">Finally, when looking at oops listings, always be on the lookout for
the "slab poisoning" values
discussed at the beginning of this chapter. Thus, for example, if you
get a kernel oops where the offending address is
<tt>0xa5a5a5a5</tt>, you are almost certainly forgetting to
initialize dynamic memory somewhere.</p>

<p class="docText">Please note that you see a symbolic call stack (as shown above) only
if your kernel is built with the <tt>CONFIG_KALLSYMS</tt>
option turned on. Otherwise, you see a bare, hexadecimal listing,
which is far less <a name="chp-4-ITERM-4884"></a> <a name="chp-4-ITERM-4885"></a>useful until you have decoded it in
other ways.</p>


<a name="chp-4-sect-5.2"></a>
<H4 class="docSection2Title">4.5.2. System Hangs</h4>

<p class="docText"><a name="chp-4-ITERM-4886"></a>
<a name="chp-4-ITERM-4887"></a><a name="chp-4-ITERM-4888"></a><a name="chp-4-ITERM-4889"></a><a name="chp-4-ITERM-4890"></a><a name="chp-4-ITERM-4891"></a>Although most bugs in kernel code end up
as oops messages, sometimes they can completely hang the system. If
the system hangs, no message is printed. For example, if the code
enters an endless loop, the kernel stops scheduling,<sup class="docFootnote"><a class="docLink" href="chp-4-sect-5.shtml#chp-4-FNOTE-3">[3]</a></sup> and the system
doesn't respond to any action, including the magic
Ctrl-Alt-Del combination. You have two choices for dealing with
system hangs—either prevent them beforehand or be able to debug
them after the fact.</p><blockquote><p class="docFootnote"><sup><a name="chp-4-FNOTE-3">[3]</a></sup> Actually, multiprocessor systems still schedule on the other
processors, and even a uniprocessor machine might reschedule if
kernel preemption is enabled. For the most common case (uniprocessor
with preemption disabled), however, the system stops scheduling
altogether.</P></blockquote>

<p class="docText"><a name="chp-4-ITERM-4892"></a><a name="chp-4-ITERM-4893"></a><a name="chp-4-ITERM-4894"></a><a name="chp-4-ITERM-4895"></a>
<a name="chp-4-ITERM-4896"></a>You can prevent an endless
loop by inserting <span class="docEmphasis">schedule</span> invocations at
strategic points. The <span class="docEmphasis">schedule</span> call (as you
might guess) invokes the scheduler and, therefore, allows other
processes to steal CPU time from the current process. If a process is
looping in kernel space due to a bug in your driver, the
<span class="docEmphasis">schedule</span> calls enable you to kill the process
after tracing what is happening.</p>

<p class="docText"><a name="chp-4-ITERM-4897"></a><a name="chp-4-ITERM-4898"></a>You should be aware, of course, that
any call to <span class="docEmphasis">schedule</span> may create an additional
source of reentrant calls to your driver, since it allows other
processes to run. This reentrancy should not normally be a problem,
assuming that you have used suitable locking in your driver. Be sure,
however, not to call <span class="docEmphasis">schedule</span> any time that your
driver is holding a spinlock.</P>

<p class="docText"><a name="chp-4-ITERM-4899"></a>If your driver really hangs the system,
and you don't know where to insert
<span class="docEmphasis">schedule</span> calls, the best way to go may be to add
some print messages and write them to the console (by changing the
<tt>console_loglevel</tt> value if need be).</p>

<p class="docText"><a name="chp-4-ITERM-4900"></a><a name="chp-4-ITERM-4901"></a><a name="chp-4-ITERM-4902"></a>Sometimes the system may appear to be
hung, but it isn't. This can happen, for example, if
the keyboard remains locked in some strange way. These false hangs
can be detected by looking at the output of a program you keep
running for just this purpose. A clock or system load meter on your
display is a good status monitor; as long as it continues to update,
the scheduler is working.</p>

<p class="docText"><a name="chp-4-ITERM-4903"></a>
<a name="chp-4-ITERM-4904"></a><a name="chp-4-ITERM-4905"></a>An indispensable tool for many lockups is
the "magic SysRq key," which is
available on most architectures. Magic SysRq is invoked with the
combination of the Alt and SysRq keys on the PC keyboard, or with
other special keys on other platforms (see
<i>Documentation/sysrq.txt</i> for details), and is
available on the serial console as well. A third key, pressed along
with these two, performs one of a number of useful actions:</p>

<a name="chp-4-ITERM-4906"></a><a name="chp-4-ITERM-4907"></a><a name="chp-4-ITERM-4908"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">r</span></span></span></dt></p>
<dd>
<p class="docList">Turns off keyboard raw mode; useful in situations where a crashed
application (such as the X server) may have left your keyboard in a
strange state.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">k</span></span></span></dt></p>
<dd>
<p class="docList">Invokes the "<a name="chp-4-ITERM-4906"></a>
<a name="chp-4-ITERM-4907"></a>
<a name="chp-4-ITERM-4908"></a>secure attention key"
(SAK) function. SAK kills all processes running on the current
console, leaving you with a clean terminal.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">s</span></span></span></dt></P>
<dd>
<p class="docList">Performs an emergency synchronization of all disks.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">u</span></span></span></dt></p>
<dd>
<p class="docList">Umount. Attempts to remount all disks in a read-only mode. This
operation, usually invoked immediately after <span class="docEmphasis">s</span>,
can save a lot of filesystem checking time in cases where the system
is in serious trouble.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">b</span></span></span></dt></P>
<dd>
<p class="docList">Boot. Immediately reboots the system. Be sure to synchronize and
remount the disks first.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">p</span></span></span></dt></p>
<dd>
<p class="docList">Prints processor registers information.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">t</span></span></span></dt></P>
<dd>
<p class="docList">Prints the current task list.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">m</span></span></span></dt></p>
<dd>
<p class="docList">Prints memory information.</p>
</dd>
</dl>

<p class="docText">Other magic SysRq functions exist; see <span class="docEmphasis">sysrq.txt</span>
in the <span class="docEmphasis">Documentation</span> directory of the kernel
source for the full list. Note that magic SysRq must be explicitly
enabled in the kernel configuration and that most distributions do
not enable it, for obvious security reasons. For a system used to
develop drivers, however, enabling magic SysRq is worth the trouble
of building a new kernel in itself. Magic SysRq may be disabled at
runtime with a command such as the following:</p>

<pre>echo 0 &gt; /proc/sys/kernel/sysrq</pre><br>


<p class="docText">You should consider disabling it if unprivileged users can reach your
system keyboard, to prevent accidental or willing damages. Some
previous kernel versions had <span class="docEmphasis">sysrq</span> disabled by
default, so you needed to enable it at runtime by writing 1 to that
same <I>/proc/sys</i> file.</p>

<p class="docText">The<a name="chp-4-ITERM-4909"></a>
<a name="chp-4-ITERM-4910"></a>
<a name="chp-4-ITERM-4911"></a>
<span class="docEmphasis">sysrq</span> operations are exceedingly useful, so they
have been made available to system administrators who
can't reach the console. The file
<I>/proc/sysrq-trigger</i> is a write-only entry point,
where you can trigger a specific <span class="docEmphasis">sysrq</span> action by
writing the associated command character; you can then collect any
output data from the kernel logs. This entry point to
<span class="docEmphasis">sysrq</span> is always working, even if
<span class="docEmphasis">sysrq</span> is disabled on the console.</p>

<p class="docText">If you are experiencing a "live
hang," in which your driver is stuck in a loop but
the system as a whole is still functioning, there are a couple of
techniques worth knowing. Often, the SysRq <span class="docEmphasis">p</span>
function points the finger directly at the guilty routine. Failing
that, you can also use the kernel profiling function. Build a kernel
with profiling enabled, and boot it with <tt>profile=2</tt>
on the command line. Reset the profile counters with the
<span class="docEmphasis">readprofile</span> utility, then send your driver into
its loop. After a little while, use <span class="docEmphasis">readprofile</span>
again to see where the kernel is spending its time. Another more
advanced alternative is <span class="docEmphasis">oprofile</span>, that you may
consider as well. The file
<I>Documentation/basic_profiling.txt</i> tells you
everything you need to know to get started with the profilers.</P>

<p class="docText">One precaution worth using when chasing system hangs is to mount all
your disks as read-only (or unmount them). If the disks are read-only
or unmounted, there's no risk of damaging the
filesystem or leaving it in an inconsistent state. Another
possibility is using a computer that mounts all of its filesystems
via NFS, the network file system. The
"NFS-Root" capability must be
enabled in the kernel, and special parameters must be passed at boot
time. In this case, you'll avoid filesystem
corruption without even resorting to SysRq, because filesystem
coherence is managed by the NFS server, which is not brought
down<a name="chp-4-ITERM-4912"></a> by
your device<a name="chp-4-ITERM-4913"></a> <a name="chp-4-ITERM-4914"></a> driver.</p>



<ul></ul></td></tr></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-4-sect-4.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-4-sect-6.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
