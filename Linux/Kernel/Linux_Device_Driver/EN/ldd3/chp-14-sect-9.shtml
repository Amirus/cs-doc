<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>14.9. Quick Reference</title>
<link rel="STYLESHEET" type="text/css" href="images/style.css">
<link rel="STYLESHEET" type="text/css" href="images/docsafari.css">
</head>
<body >
<head>
<link rel="stylesheet" type="text/css" href="../style/visited-green.css">
</head>
<div align=center>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->


</div>
<!-- 
Hi surfer
<script type="text/javascript"> 
	try {
	document.write(" from <i><b>" + geoip_city()+"</b></i>"); 
	} catch (e) {
	}
</script>, please visit -->


<xhr>
<script type="text/javascript">
	s = document.location.href.lastIndexOf("/");
	a = document.location.href.substring(0,s+1);
	b = document.location.href.substring(s+1);
if ( document.location == top.location  ) {
	//alert(a + " -- " + b);
	document.write("<a href="http://www.makelinux.net/ldd3/+&#32;a&#32;+"?u=" +b + "> &lt; open Table of Content</a>");
	//top.location = a + "?u=" +b;
} else {
	document.write("<a target=_top href="http://www.makelinux.net/ldd3/+document.location&#32;+"> &lt; full page </a>");
}
function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

addLoadEvent(  function() { 
		try {
		} catch (e) {
	}
}
);


</script>
<span style='display:none;background:#BBFFFF;color:black;position:absolute;right:0;' ><a target=_main href=http://www.makelinux.net/kernel_map?src=ldd3>&nbsp;Linux kernel map&nbsp;</a></span><br>
<script type="text/javascript">
</script>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>
<script type="text/javascript"> _uacct = "UA-839593-1"; if (typeof(urchinTracker) == 'function') urchinTracker();</script>
<script type=text/javascript>
	// document.write("<img src=http://const.homelinux.net/1.png?REF="+top.document.referrer+" height=0 width=0 border=0 />");
</script>


<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-14-sect-8.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-15.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="0"><TR><td valign="top"><a name="chp-14-sect-9"></a>
<H3 class="docSection1Title">14.9. Quick Reference</H3>

<p class="docText">Many functions have been introduced in this chapter; here is a quick
summary of them all.</p>

<a name="chp-14-sect-9.1"></a>
<h4 class="docSection2Title">14.9.1. Kobjects</h4>

<dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">#include &lt;linux/kobject.h&gt;</span></span></span></dt></p>
<dd>
<p class="docList">The include file containing definitions for kobjects, related
structures, and functions.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void kobject_init(struct kobject *kobj);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int kobject_set_name(struct kobject *kobj, const char *format, ...);</span></span></span></dt></P>
<dd>
<p class="docList">Functions for kobject initialization.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct kobject *kobject_get(struct kobject *kobj);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void kobject_put(struct kobject *kobj);</span></span></span></dt></p>
<dd>
<p class="docList">Functions that manage reference counts for kobjects.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct kobj_type;</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct kobj_type *get_ktype(struct kobject *kobj);</span></span></span></dt></P>
<dd>
<p class="docList">Represents the type of structure within which a kobject is embedded.
Use <span class="docEmphasis">get_ktype</span> to get the
<tt>kobj_type</tt> associated with a given kobject.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int kobject_add(struct kobject *kobj);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">extern int kobject_register(struct kobject *kobj);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void kobject_del(struct kobject *kobj);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void kobject_unregister(struct kobject *kobj);</span></span></span></dt></p>
<dd>
<p class="docList"><span class="docEmphasis">kobject_add</span> adds a kobject to the system,
handling kset membership, sysfs representation, and hotplug event
generation. <span class="docEmphasis">kobject_register</span> is a convenience
function that combines <span class="docEmphasis">kobject_init</span> and
<span class="docEmphasis">kobject_add</span>. Use
<span class="docEmphasis">kobject_del</span> to remove a kobject or
<span class="docEmphasis">kobject_unregister</span>, which combines
<span class="docEmphasis">kobject_del</span> and
<span class="docEmphasis">kobject_put</span>.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void kset_init(struct kset *kset);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int kset_add(struct kset *kset);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int kset_register(struct kset *kset);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void kset_unregister(struct kset *kset);</span></span></span></dt></P>
<dd>
<p class="docList">Initialization and registration functions for ksets.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">decl_subsys(name, type, hotplug_ops);</span></span></span></dt></p>
<dd>
<p class="docList">A macro that makes it easier to declare subsystems.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void subsystem_init(struct subsystem *subsys);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int subsystem_register(struct subsystem *subsys);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void subsystem_unregister(struct subsystem *subsys);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct subsystem *subsys_get(struct subsystem *subsys)</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void subsys_put(struct subsystem *subsys);</span></span></span></dt></p>
<dd>
<p class="docList">Operations on subsystems.</p>
</dd>
</dl>


<a name="chp-14-sect-9.2"></a>
<H4 class="docSection2Title">14.9.2. Sysfs Operations</h4>

<a name="chp-14-ITERM-6937"></a><a name="chp-14-ITERM-6938"></a><a name="chp-14-ITERM-6939"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">#include &lt;linux/sysfs.h&gt;</span></span></span></dt></p>
<dd>
<p class="docList">The include file containing <a name="chp-14-ITERM-6937"></a>
<a name="chp-14-ITERM-6938"></a>
<a name="chp-14-ITERM-6939"></a>declarations for sysfs.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int sysfs_create_file(struct kobject *kobj, struct attribute *attr);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int sysfs_remove_file(struct kobject *kobj, struct attribute *attr);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int sysfs_create_bin_file(struct kobject *kobj, struct bin_attribute *attr);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int sysfs_remove_bin_file(struct kobject *kobj, struct bin_attribute *attr);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int sysfs_create_link(struct kobject *kobj, struct kobject *target, char</span></span> </span></dt></P>
<dt><span class="docPubcolor">                      <span class="docPubcolor"><span class="docMonofont">*name);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void sysfs_remove_link(struct kobject *kobj, char *name);</span></span></span></dt></P>
<dd>
<p class="docList">Functions for creating and removing attribute files associated with a
kobject.</p>
</dd>
</dl>


<a name="chp-14-sect-9.3"></a>
<h4 class="docSection2Title">14.9.3. Buses, Devices, and Drivers</H4>

<a name="chp-14-ITERM-6940"></a><a name="chp-14-ITERM-6941"></a><a name="chp-14-ITERM-6942"></a><a name="chp-14-ITERM-6943"></a><a name="chp-14-ITERM-6944"></a><a name="chp-14-ITERM-6945"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int bus_register(struct bus_type *bus);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void bus_unregister(struct bus_type *bus);</span></span></span></dt></p>
<dd>
<p class="docList">Functions that
<a name="chp-14-ITERM-6940"></a>
<a name="chp-14-ITERM-6941"></a>
<a name="chp-14-ITERM-6942"></a>
<a name="chp-14-ITERM-6943"></a>
<a name="chp-14-ITERM-6944"></a>
<a name="chp-14-ITERM-6945"></a>perform
registration and unregistration of buses in the device model.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data</span></span>,  </span></dt></p>
<dt><span class="docPubcolor">                     <span class="docPubcolor"><span class="docMonofont">int (*fn)(struct device *, void *));</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int bus_for_each_drv(struct bus_type *bus, struct device_driver *start, void</span></span>  </span></dt></p>
<dt><span class="docPubcolor">                     <span class="docPubcolor"><span class="docMonofont">*data, int (*fn)(struct device_driver *, void *));</span></span></span></dt></P>
<dd>
<p class="docList">Functions that iterate over each of the devices and drivers,
respectively, that are attached to the given bus.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">BUS_ATTR(name, mode, show, store);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int bus_create_file(struct bus_type *bus, struct bus_attribute *attr);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void bus_remove_file(struct bus_type *bus, struct bus_attribute *attr);</span></span></span></dt></P>
<dd>
<p class="docList">The <span class="docEmphasis">BUS_ATTR</span> macro may be used to declare a
<tt>bus_attribute</tt> structure, which may then be added
and removed with the above two functions.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int device_register(struct device *dev);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void device_unregister(struct device *dev);</span></span></span></dt></P>
<dd>
<p class="docList">Functions that handle device registration.</P>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">DEVICE_ATTR(name, mode, show, store);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int device_create_file(struct device *device, struct device_attribute *entry);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void device_remove_file(struct device *dev, struct device_attribute *attr);</span></span></span></dt></p>
<dd>
<p class="docList">Macros and functions that deal with device attributes.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int driver_register(struct device_driver *drv);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void driver_unregister(struct device_driver *drv);</span></span></span></dt></P>
<dd>
<p class="docList">Functions that register and unregister a device driver.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">DRIVER_ATTR(name, mode, show, store);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int driver_create_file(struct device_driver *drv, struct driver_attribute</span></span> </span></dt></p>
<dt><span class="docPubcolor">                       <span class="docPubcolor"><span class="docMonofont">*attr);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void driver_remove_file(struct device_driver *drv, struct driver_attribute</span></span> </span></dt></p>
<dt><span class="docPubcolor">                        <span class="docPubcolor"><span class="docMonofont">*attr);</span></span></span></dt></P>
<dd>
<p class="docList">Macros and functions that manage driver attributes.</P>
</dd>
</dl>


<a name="chp-14-sect-9.4"></a>
<h4 class="docSection2Title">14.9.4. Classes</h4>

<a name="chp-14-ITERM-6946"></a><a name="chp-14-ITERM-6947"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct class_simple *class_simple_create(struct module *owner, char *name);</span></span><a name="chp-14-ITERM-6946"></a>
<a name="chp-14-ITERM-6947"></a></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_simple_destroy(struct class_simple *cs);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">struct class_device *class_simple_device_add(struct class_simple *cs, dev_t</span></span> </span></dt></p>
<dt><span class="docPubcolor">  <span class="docPubcolor"><span class="docMonofont">devnum, struct device *device, const char *fmt, ...);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_simple_device_remove(dev_t dev);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_simple_set_hotplug(struct class_simple *cs, int (*hotplug)(struct</span></span>  </span></dt></p>
<dt><span class="docPubcolor">  <span class="docPubcolor"><span class="docMonofont">class_device *dev, char **envp, int num_envp, char *buffer, int</span></span> </span></dt></P>
<dt><span class="docPubcolor">  <span class="docPubcolor"><span class="docMonofont">buffer_size));</span></span></span></dt></P>
<dd>
<p class="docList">Functions that implement the <tt>class_simple</tt>
interface; they manage simple class entries containing a
<tt>dev</tt> attribute and little else.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_register(struct class *cls);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_unregister(struct class *cls);</span></span></span></dt></p>
<dd>
<p class="docList">Registration and unregistration of classes.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">CLASS_ATTR(name, mode, show, store);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_create_file(struct class *cls, const struct class_attribute *attr);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_remove_file(struct class *cls, const struct class_attribute *attr);</span></span></span></dt></p>
<dd>
<p class="docList">The usual macros and functions for dealing with class attributes.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_device_register(struct class_device *cd);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_device_unregister(struct class_device *cd);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_device_rename(struct class_device *cd, char *new_name);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">CLASS_DEVICE_ATTR(name, mode, show, store);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_device_create_file(struct class_device *cls, const struct</span></span> </span></dt></p>
<dt><span class="docPubcolor">                             <span class="docPubcolor"><span class="docMonofont">class_device_attribute *attr);</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_device_remove_file(struct class_device *cls, const struct</span></span> </span></dt></P>
<dt><span class="docPubcolor">                              <span class="docPubcolor"><span class="docMonofont">class_device_attribute *attr);</span></span></span></dt></p>
<dd>
<p class="docList">Functions and macros that implement the class device interface.</p>
</dd>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int class_interface_register(struct class_interface *intf);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void class_interface_unregister(struct class_interface *intf);</span></span></span></dt></p>
<dd>
<p class="docList">Functions that add an interface to a class (or remove it).</p>
</dd>
</dl>


<a name="chp-14-sect-9.5"></a>
<H4 class="docSection2Title">14.9.5. Firmware</h4>

<a name="chp-14-ITERM-6948"></a><a name="chp-14-ITERM-6949"></a><dl class="docList"><dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">#include &lt;linux/firmware.h&gt;</span></span><a name="chp-14-ITERM-6948"></a>
<a name="chp-14-ITERM-6949"></a></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int request_firmware(const struct firmware **fw, char *name, struct device</span></span> </span></dt></p>
<dt><span class="docPubcolor">                     <span class="docPubcolor"><span class="docMonofont">*device);</span></span></span></dt></p>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">int request_firmware_nowait(struct module *module, char *name, struct device</span></span> </span></dt></p>
<dt><span class="docPubcolor">  <span class="docPubcolor"><span class="docMonofont">*device, void *context, void (*cont)(const struct firmware *fw, void</span></span> </span></dt></P>
<dt><span class="docPubcolor">  <span class="docPubcolor"><span class="docMonofont">*context));</span></span></span></dt></P>
<dt><span class="docPubcolor"><span class="docPubcolor"><span class="docMonofont">void release_firmware(struct firmware *fw);</span></span></span></dt></p>
<dd>
<p class="docList">Functions that implement the kernel firmware-loading interface.</P>
</dd>
</dl>



<ul></UL></TD></TR></table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#e6e6e6">
<tr >
<td class="v2" align="left" width="30%">
<a href="chp-14-sect-8.shtml"> &#8678; prev </a>
</td>
<td class="v2" align="center" width="40%">
<a href="index.html" target=_parent style="text-decoration:none;text-underline:none"> &#8689; home </a>
</td>
<td class="v2" align="right" width="30%">
<a href="chp-15.shtml"> next &#8680; </a>
</td>
</tr>
</table>
<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<center>
<table width=100% height=90>
<tr style='display:none'>
<td style='display:xnone' id='banner' xalign=center style="background-image:url(/kernel_map.d/LKM3_2048.png);width:100%;height:90;opacity:0;filter:alpha(opacity=0);
cursor:pointer" onclick="top.location='http://www.makelinux.com/kernel_map?b'" /> 
</td> </tr>
<tr style='display:none'>
<td  id='banner2' style="opacity:0;filter:alpha(opacity=0);text-align:center;" /> 
<a target=_top href=http://www.makelinux.com/kernel_map_poster?b>
<span style="font-weight:bold"><span style="display:block;font-size:large" >Poster of Linux kernel</span>The best gift for a Linux geek</span>
</a>
</td> </tr>
<tr style='zdisplay:xnone' >
<td  id='banner3' align=center /> 
<a Xtarget=_top href="http://www.makelinux.com/kernel_map_poster?b"> <img target=_top src="http://www.makelinux.net/kernel_map.d/poster2.png" border=0></a>
</td></tr>
</table>
</center>
<script type='text/javascript' src='../common/fade.js'></script>
<script type=text/javascript>

	var banner = document.getElementById('banner');
	banner.style.backgroundPosition="50% 50%";
	banner.style.backgroundPosition=100*Math.random()+"% "+100*Math.random(100)+"%";
	//fade('banner');
    	//setTimeout("fade('banner')",1000);
    	//setTimeout("fade('banner2')",1000);
</script>

<script type="text/javascript">
var a = new Array();
a[0]='<a href=http://www.linuxdriver.co.il/>www.LinuxDriver.co.il - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot. In Tel-Aviv</a>';
a[1]='<a href=http://www.MakeLinux.net/>www.MakeLinux.net - Embedded Linux solutions: Drivers, Media Streaming, Fast Boot</a>';
a[2]='<a href="http://www.amazon.com/gp/product/0672329468?ie=UTF8&tag=makelinux-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329468">New book <b>Linux Kernel Development</b> (3rd Edition) 2010</a><img src="http://www.assoc-amazon.com/e/ir?t=makelinux-20&l=as2&o=1&a=0672329468" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
a[3]='';
google_ad_width = 728;
google_ad_height = 1;
if ( 0) { 
document.write("<center>");
if (  geoip_country_code()=="IL" ) {
	if ( Math.random() > 0.5 ) document.write(a[0]+"<br>"); else document.write(a[2]);;
	google_ad_width = 728;
	google_ad_height = 1;
} else { 
	if ( Math.random() > 0.5 ) {
		if ( Math.random() > 0.5 ) document.write(a[1]+"<br>"); else document.write(a[2]);
		google_ad_width = 728;
		google_ad_height = 1;
	} else {
		google_ad_client = "pub-5656623102424572";
		/* 728x90, created 4/4/08 */
		google_ad_slot = "6613964975";
		google_ad_width = 728;
		google_ad_height = 100;
	}
}
	document.write("</center>");
}
</script>
<!--
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>
-->



<script type="text/javascript" src="http://j.maxmind.com/app/geoip.js"></script>
<script type="text/javascript" >
{
	var os, br, ua = navigator.userAgent;

	if (ua.indexOf("Linux")!=-1) os="Linux";
	if (ua.indexOf("Windows")!=-1) os="Windows";
	if (ua.indexOf("Mac")!=-1) os="Mac";

	if (ua.indexOf("Gecko")!=-1) br="Gecko";
	if (ua.indexOf("Firefox")!=-1) br="Firefox";
	if (ua.indexOf("WebKit")!=-1) br="WebKit";
	if (ua.indexOf("MSIE")!=-1) br="MSIE";
	if (ua.indexOf("Safari")!=-1) br="Safari";
	if (ua.indexOf("Chrome")!=-1) br="Chrome";
	if (ua.indexOf("Konqueror")!=-1) br="Konqueror";
	if (ua.indexOf("Opera")!=-1) br="Opera";

	function query_var(query, variable) 
	{
		var vars = query.replace(/\?/g,"&").replace(/%20/g,"+").split("&");
		for (var i=0;i<vars.length;i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}

		} 
	}
	var RQ="";
	q = query_var(top.document.referrer,'q');
	if ( q != undefined)
		RQ = ".&Q=" + q
	else if (top.document.referrer.length)
	
		RQ = ".&R=" + top.document.referrer;
	var traceimg= new Image();
	try {
		traceimg.src="http://const.homelinux.net/1.png?U="
			+ br + "-" + os 
			+"."+geoip_region_name().replace(/ /g,"_") 
			+"."+geoip_country_code()
			+ RQ ;
	} catch (e) {
	}
}
</script>


</body>
</html>
